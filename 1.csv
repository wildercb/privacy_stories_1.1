File,Prompt,Model,Target File Path,Target Annotations,Model Response 1,Model Response 2,Preferred_Response
Actual_Budget\Accounts_&_Transactions.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Getting Started
Choosing an Instance
If you are used to sites like Reddit, then Lemmy works in a fundamentally different way. Instead of a single website like reddit.com, there are many different websites (called instances). These are operated by different people, have different topics and rules. Nevertheless, posts created in one instance can directly be seen by users who are registered on another. Its basically like email, but for social media.

This means before using Lemmy and registering an account, you need to pick an instance. For this you can browse the instance list and look for one that matches your topics of interest. You can also see if the rules match your expectations, and how many users there are. It is better to avoid very big or very small instances. But don't worry too much about this choice, you can always create another account on a different instance later.

[instance list screenshot]

Registration
Once you choose an instance, it's time to create your account. To do this, click sign up in the top right of the page, or click the top right button on mobile to open a menu with sign up link.

[registration page screenshot]

On the signup page you need to enter a few things:

Username: How do you want to be called? This name can not be changed and is unique within an instance. Later you can also set a displayname which can be freely changed. If your desired username is taken, consider choosing a different instance where it is still available.
Email: Your email address. This is used for password resets and notifications (if enabled). Providing an email address is usually optional, but admins may choose to make it mandatory. In this case you will have to wait for a confirmation mail and click the link after completing this form.
Password: The password for logging in to your account. Make sure to choose a long and unique password which isn't used on any other website.
Verify password: Repeat the same password from above to ensure that it was entered correctly.
There are also a few optional fields, which you may need to fill in depending on the instance configuration:

Question/Answer: Instance admins can set an arbitrary question which needs to be answered in order to create an account. This is often used to prevent spam bots from signing up. After submitting the form, you will need to wait for some time until the answer is approved manually before you can login.
Code: A captcha which is easy to solve for humans but hard for bots. Enter the letters and numbers that you see in the text box, ignoring uppercase or lowercase. Click the refresh button if you are unable to read a character. The play button plays an audio version of the captcha.
Show NSFW content: Here you can choose if content that is ""not safe for work"" (or adult-only) should be shown.
When you are done, press the sign up button.

It depends on the instance configuration when you can login and start using the account. In case the email is mandatory, you need to wait for the confirmation email and click the link first. In case ""Question/Answer"" is present, you need to wait for an admin to manually review and approve your registration. If you have problems with the registration, try to get in contact with the admin for support. You can also choose a different instance to sign up if your primary choice does not work.

Following Communities
After logging in to your new account, its time to follow communities that you are interested in. For this you can click on the communities link at the top of the page (on mobile, you need to click the menu icon on the top right first). You will see a list of communities which can be filtered by subscribed, local or all. Local communities are those which are hosted on the same site where you are signed in, while all also contains federated communities from other instances. In any case you can directly subscribe to communities with the right-hand subscribe link. Or click on the community name to browse the community first, see what its posted and what the rules are before subscribing.

Another way to find communities to subscribe to is by going to the front page and browsing the posts. If there is something that interests you, click on the post title to see more details and comments. Here you can subscribe to the community in the right-hand sidebar, or by clicking the ""sidebar"" button on mobile.

These previous ways will only show communities that are already known to the instance. Especially if you joined a small or inactive Lemmy instance, there will be few communities to discover. You can find more communities by browsing different Lemmy instances, or using the Lemmy Explorer. When you found a community that you want to follow, enter its URL (e.g. https://feddit.org/c/main) or the identifier (e.g. !main@feddit.org) into the search field of your own Lemmy instance. Lemmy will then fetch the community from its original instance, and allow you to interact with it. The same method also works to fetch users, posts or comments from other instances.

Setting up Your Profile
Before you start posting, its a good idea to provide some details about yourself. Open the top-right menu and go to ""settings"". Here the following settings are available for your public profile:

Displayname: An alternative username which can be changed at any time
Bio: Long description of yourself, can be formatted with Markdown
Matrix User: Your username on the decentralized Matrix chat
Avatar: Profile picture that is shown next to all your posts
Banner: A header image for your profile page
On this page you can also change the email and password. Additionally there are many other settings available, which allow customizing of your browsing experience:

Blocks (tab at top of the page): Here you can block users and communities, so that their posts will be hidden.
Interface language: Which language the user interface should use.
Languages: Select the languages that you speak to see only content in these languages. This is a new feature and many posts don't specify a language yet, so be sure to select ""Undetermined"" to see them.
Theme: You can choose between different color themes for the user interface. Instance admins can add more themes.
Type: Which timeline you want to see by default on the front page; only posts from communities that you subscribe to, posts in local communities, or all posts including federated.
Sort type: How posts and comments should be sorted by default. See Votes and Ranking for details.
Show NSFW content: Whether or not you want to see content that is ""not safe for work"" (or adult-only).
Show Scores: Whether the number of upvotes and downvotes should be visible.
Show Avatars: Whether profile pictures of other users should be shown.
Bot Account: Enable this if you are using a script or program to create posts automatically
Show Bot Accounts: Disable this to hide posts that were created by bot accounts.
Show Read Posts: If this is disabled, posts that you already viewed are not shown in listings anymore. Useful if you want to find new content easily, but makes it difficult to follow ongoing discussion under existing posts.
Show Notifications for New Posts: Enable this to receive a popup notification for each new post that is created.
Send notifications to Email: Enable to receive notifications about new comment replies and private messages to your email address.
Start Posting
Finally its time to start posting! To do this it is always a good idea to read the community rules in the sidebar (below the Subscribe button). When you are ready, go to a post and type your comment in the box directly below for a top-level reply. You can also write a nested reply to an existing comment, by clicking the left-pointing arrow.

Other than commenting on existing posts, you can also create new posts. To do this, click the button Create a post in the sidebar. Here you can optionally supply an external link or upload an image. The title field is mandatory and should describe what you are posting. The body is again optional, and gives space for long texts. You can also embed additional images here. The Community dropdown below allows choosing a different community to post in. With NSFW, posts can be marked as ""not safe for work"". Finally you can specify the language that the post is written in, and then click on Create.

One more possibility is to write private messages to individual users. To do this, simply visit a user profile and click Send message. You will be notified about new private messages and comment replies with the bell icon in the top right.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Delete
Data Types: Email address,username, password
Purposes: Account management, Functionality, authenticate
Stories:
1. We collect Email Address, User name, password dor account management. We use Email address, User name, password for authentication .


Using Actual
Accounts & Transactions

overview

 You can add as many accounts as you like. Adding all of your accounts (including things like mortgages) is a nice way to get an overview of all your finances.

Off-budget accounts
​
Actual makes a distinction between accounts being
for budget or off budget. 
Off budget accounts don't effect the budget and are meant to track stuff like investments and mortgages. Transactions in off budget accounts can't be categorized; they simply track balances over time.

For budget
accounts affect the budget, and transactions can be categorized. These are accounts where you want to track cash flow and use the budget, like checking accounts and credit cards.

Depending on your usage, savings accounts can either be on or off the budget. If you're not sure, we recommend keeping it on budget at the start.

Adding a new account
​

You can add an account to your budget at any time, however when you first install Actual you can use the
Add Account
button in the middle of the screen.

You can also add an account using the
+ Add account
button in the sidebar.

Two successive screens will appear with boxes asking you to fill in a few options

Create a Local Account or Link to GoCardless (See
Connecting Your Bank
)
Give your account a name
Is the account on or off budget
The current account balance

Off budget means that the balance is not reflected when you assign money to categories in your budget register

Here you can see how that looks when the options are completed.

If you select the Off Budget checkbox then change the account type the Off Budget checkbox will reset and will need to be re-selected each time the account type is changed

You can now see the account in the sidebar of Actual


Closing or deleting an account
​

Navigate to the account by clicking on it in the sidebar
Click on the 3 dots (top right of the transactions list) to show the actions menu
Select
Close Account
You need to select another account to transfer the existing balance to. Choose the account that you have moved funds to.
Press
Close Account

You can still access this account under
Closed Accounts
in the sidebar, and even reopen it from the same actions menu.

If you want to delete an account
even if it has existing balances, in the popup after selecting
Close Account
, click the
force close
at the bottom.


Renaming an existing account
​

Click the account name in the sidebar of Actual

Hovering your cursor close to the account name at the top will reveal two icons.
The page icon allows you to write a note about this account, and the pencil icon allows you to rename the account.

After editing a note for the account or its name, hit 'Enter' to save your changes.

Off-budget accounts
Adding a new account
Closing or deleting an account
Renaming an existing account 



Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\Actual_Budget\Accounts_&_Transactions.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",1.0
Actual_Budget\Backup_&_Restore.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Getting Started
Choosing an Instance
If you are used to sites like Reddit, then Lemmy works in a fundamentally different way. Instead of a single website like reddit.com, there are many different websites (called instances). These are operated by different people, have different topics and rules. Nevertheless, posts created in one instance can directly be seen by users who are registered on another. Its basically like email, but for social media.

This means before using Lemmy and registering an account, you need to pick an instance. For this you can browse the instance list and look for one that matches your topics of interest. You can also see if the rules match your expectations, and how many users there are. It is better to avoid very big or very small instances. But don't worry too much about this choice, you can always create another account on a different instance later.

[instance list screenshot]

Registration
Once you choose an instance, it's time to create your account. To do this, click sign up in the top right of the page, or click the top right button on mobile to open a menu with sign up link.

[registration page screenshot]

On the signup page you need to enter a few things:

Username: How do you want to be called? This name can not be changed and is unique within an instance. Later you can also set a displayname which can be freely changed. If your desired username is taken, consider choosing a different instance where it is still available.
Email: Your email address. This is used for password resets and notifications (if enabled). Providing an email address is usually optional, but admins may choose to make it mandatory. In this case you will have to wait for a confirmation mail and click the link after completing this form.
Password: The password for logging in to your account. Make sure to choose a long and unique password which isn't used on any other website.
Verify password: Repeat the same password from above to ensure that it was entered correctly.
There are also a few optional fields, which you may need to fill in depending on the instance configuration:

Question/Answer: Instance admins can set an arbitrary question which needs to be answered in order to create an account. This is often used to prevent spam bots from signing up. After submitting the form, you will need to wait for some time until the answer is approved manually before you can login.
Code: A captcha which is easy to solve for humans but hard for bots. Enter the letters and numbers that you see in the text box, ignoring uppercase or lowercase. Click the refresh button if you are unable to read a character. The play button plays an audio version of the captcha.
Show NSFW content: Here you can choose if content that is ""not safe for work"" (or adult-only) should be shown.
When you are done, press the sign up button.

It depends on the instance configuration when you can login and start using the account. In case the email is mandatory, you need to wait for the confirmation email and click the link first. In case ""Question/Answer"" is present, you need to wait for an admin to manually review and approve your registration. If you have problems with the registration, try to get in contact with the admin for support. You can also choose a different instance to sign up if your primary choice does not work.

Following Communities
After logging in to your new account, its time to follow communities that you are interested in. For this you can click on the communities link at the top of the page (on mobile, you need to click the menu icon on the top right first). You will see a list of communities which can be filtered by subscribed, local or all. Local communities are those which are hosted on the same site where you are signed in, while all also contains federated communities from other instances. In any case you can directly subscribe to communities with the right-hand subscribe link. Or click on the community name to browse the community first, see what its posted and what the rules are before subscribing.

Another way to find communities to subscribe to is by going to the front page and browsing the posts. If there is something that interests you, click on the post title to see more details and comments. Here you can subscribe to the community in the right-hand sidebar, or by clicking the ""sidebar"" button on mobile.

These previous ways will only show communities that are already known to the instance. Especially if you joined a small or inactive Lemmy instance, there will be few communities to discover. You can find more communities by browsing different Lemmy instances, or using the Lemmy Explorer. When you found a community that you want to follow, enter its URL (e.g. https://feddit.org/c/main) or the identifier (e.g. !main@feddit.org) into the search field of your own Lemmy instance. Lemmy will then fetch the community from its original instance, and allow you to interact with it. The same method also works to fetch users, posts or comments from other instances.

Setting up Your Profile
Before you start posting, its a good idea to provide some details about yourself. Open the top-right menu and go to ""settings"". Here the following settings are available for your public profile:

Displayname: An alternative username which can be changed at any time
Bio: Long description of yourself, can be formatted with Markdown
Matrix User: Your username on the decentralized Matrix chat
Avatar: Profile picture that is shown next to all your posts
Banner: A header image for your profile page
On this page you can also change the email and password. Additionally there are many other settings available, which allow customizing of your browsing experience:

Blocks (tab at top of the page): Here you can block users and communities, so that their posts will be hidden.
Interface language: Which language the user interface should use.
Languages: Select the languages that you speak to see only content in these languages. This is a new feature and many posts don't specify a language yet, so be sure to select ""Undetermined"" to see them.
Theme: You can choose between different color themes for the user interface. Instance admins can add more themes.
Type: Which timeline you want to see by default on the front page; only posts from communities that you subscribe to, posts in local communities, or all posts including federated.
Sort type: How posts and comments should be sorted by default. See Votes and Ranking for details.
Show NSFW content: Whether or not you want to see content that is ""not safe for work"" (or adult-only).
Show Scores: Whether the number of upvotes and downvotes should be visible.
Show Avatars: Whether profile pictures of other users should be shown.
Bot Account: Enable this if you are using a script or program to create posts automatically
Show Bot Accounts: Disable this to hide posts that were created by bot accounts.
Show Read Posts: If this is disabled, posts that you already viewed are not shown in listings anymore. Useful if you want to find new content easily, but makes it difficult to follow ongoing discussion under existing posts.
Show Notifications for New Posts: Enable this to receive a popup notification for each new post that is created.
Send notifications to Email: Enable to receive notifications about new comment replies and private messages to your email address.
Start Posting
Finally its time to start posting! To do this it is always a good idea to read the community rules in the sidebar (below the Subscribe button). When you are ready, go to a post and type your comment in the box directly below for a top-level reply. You can also write a nested reply to an existing comment, by clicking the left-pointing arrow.

Other than commenting on existing posts, you can also create new posts. To do this, click the button Create a post in the sidebar. Here you can optionally supply an external link or upload an image. The title field is mandatory and should describe what you are posting. The body is again optional, and gives space for long texts. You can also embed additional images here. The Community dropdown below allows choosing a different community to post in. With NSFW, posts can be marked as ""not safe for work"". Finally you can specify the language that the post is written in, and then click on Create.

One more possibility is to write private messages to individual users. To do this, simply visit a user profile and click Send message. You will be notified about new private messages and comment replies with the bell icon in the top right.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Delete
Data Types: Email address,username, password
Purposes: Account management, Functionality, authenticate
Stories:
1. We collect Email Address, User name, password dor account management. We use Email address, User name, password for authentication .


Using Actual
Backup & Restore
Backing up your Actual budget

Backing up your Actual budget

If your budget is very old, you may have trouble restoring large backups. If you’re encountering this issue, click “Reset Sync” under 'Settings' > 'Show advanced settings' to reset sync, then make the export again. This should reduce the file size.



You can export your data from Actual at any time. To do so,

Login to your budget, click 'More' > 'Settings'
Scroll down to the Export section and click Export Data
Save the file somewhere on your computer - that is it done.

Login to your budget, click 'More' > 'Settings'

Scroll down to the Export section and click Export Data

Save the file somewhere on your computer - that is it done.


Manually creating a backup from the desktop app
​

This will force a backup to be created right now. Do this if you are going to do something that you might want to revert later (and don't want to use
undo
).

Select the
File > Load Backup…
menu item
Click
Backup Now

Manually creating a backup from the desktop app 


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\Actual_Budget\Backup_&_Restore.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
Akaunting\CreatingAnewAccount.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Using Actual
Accounts & Transactions

overview

 You can add as many accounts as you like. Adding all of your accounts (including things like mortgages) is a nice way to get an overview of all your finances.

Off-budget accounts
â€‹
Actual makes a distinction between accounts being
for budget or off budget. 
Off budget accounts don't effect the budget and are meant to track stuff like investments and mortgages. Transactions in off budget accounts can't be categorized; they simply track balances over time.

For budget
accounts affect the budget, and transactions can be categorized. These are accounts where you want to track cash flow and use the budget, like checking accounts and credit cards.

Depending on your usage, savings accounts can either be on or off the budget. If you're not sure, we recommend keeping it on budget at the start.

Adding a new account
â€‹

You can add an account to your budget at any time, however when you first install Actual you can use the
Add Account
button in the middle of the screen.

You can also add an account using the
+ Add account
button in the sidebar.

Two successive screens will appear with boxes asking you to fill in a few options

Create a Local Account or Link to GoCardless (See
Connecting Your Bank
)
Give your account a name
Is the account on or off budget
The current account balance

Off budget means that the balance is not reflected when you assign money to categories in your budget register

Here you can see how that looks when the options are completed.

If you select the Off Budget checkbox then change the account type the Off Budget checkbox will reset and will need to be re-selected each time the account type is changed

You can now see the account in the sidebar of Actual


Closing or deleting an account
â€‹

Navigate to the account by clicking on it in the sidebar
Click on the 3 dots (top right of the transactions list) to show the actions menu
Select
Close Account
You need to select another account to transfer the existing balance to. Choose the account that you have moved funds to.
Press
Close Account

You can still access this account under
Closed Accounts
in the sidebar, and even reopen it from the same actions menu.

If you want to delete an account
even if it has existing balances, in the popup after selecting
Close Account
, click the
force close
at the bottom.


Renaming an existing account
â€‹

Click the account name in the sidebar of Actual

Hovering your cursor close to the account name at the top will reveal two icons.
The page icon allows you to write a note about this account, and the pencil icon allows you to rename the account.

After editing a note for the account or its name, hit 'Enter' to save your changes.

Off-budget accounts
Adding a new account
Closing or deleting an account
Renaming an existing account 


  

(S: 
We collect account data, account balance, bank account, and assets for personal analytics.We collect account data, account balance, bank account, and assets for account management. We collect account data, account balance, bank account, and assets for Functionality. We use account data, account balance, bank account, and assets for personal analytics. We use account data, account balance, bank account, and assets for account management. We use account data, account balance, bank account, and assets for Functionality.
)

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use
Data Types: Account Data, Account Balance, Bank Account, Assets
Purposes: Personal analytics, Provide Service, 
Cash and Bank Transfer are the default accounts on Akaunting. Every Invoice, Bill, or Transaction is recorded in Cash or Bank Transfer.

Creating New Account:

Go to Banking on the Navigation Menu.
Creating New Payment Account
Select Accounts from the dropdown options.
On the Accounts page, Click on New Account at the top right corner.
Define the Account type – Bank or Credit Card (Use the credit card option for a negative opening balance)
Creating New Payment Account: Define Account type when adding a payment account
For Bank account type:

Enter the required details – General (Name, Account Number, Currency, and Starting Balance) and Bank (Name, Phone, and Address).
Adding a bank account for payment account
Decide whether you want the account to be your default.
Then, Save.
Please note that when creating a Credit Card account, you cannot set it as Default Account.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\Akaunting\CreatingAnewAccount.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
Attendize\features.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Document your life
Docker pulls Lines of code Code coverage License

Docs - Bug report

Monica is an open source personal relationship management system, that lets you document your life.
Warning

This branch is in development. Itâ€™s our beta version.

If you want to browse the stable and current version, see the 4.x branch.

Table of contents
Introduction
Features
Who is it for?
What Monica isnâ€™t
Contribute
Contribute as a community
Contribute as a developer
Principles, vision, goals and strategy
Principles
Vision
Goals
Why Open Source?
Patreon
Contact
Team
Thank you, open source
License
Introduction
Monica is an open-source web application that enables you to document your life, organize, and log your interactions with your family and friends. We call it a PRM, or Personal Relationship Management. Imagine a CRMâ€”a commonly used tool by sales teams in the corporate worldâ€”for your friends and family.

Features
Add and manage contacts
Define relationships between contacts
Reminders
Automatic reminders for birthdays
Ability to add notes to a contact
Ability to record how you met someone
Management of activities with a contact
Management of tasks
Management of addresses and all the different ways to contact someone
Management of contact field types
Management of a contactâ€™s pets
Top of the art diary to keep track of whatâ€™s happening in your life
Ability to record how your day went
Upload documents and photos
Ability to define custom genders
Ability to define custom activity types
Ability to favorite contacts
Multiple vaults and users
Labels to organize contacts
Ability to define what section should appear on the contact sheet
Multiple currencies
Translated in 27 languages
Who is it for?
This project is for people who want to document their lives and those who have difficulty remembering details about the lives of people they care about.

Weâ€™ve also had a lot of positive reviews from people with Asperger syndrome, Alzheimerâ€™s disease, and introverts who use our app every day.

What Monica isnâ€™t
Monica is not a social network and it never will be. Itâ€™s not meant to be social. Itâ€™s designed to be the opposite: itâ€™s for your eyes only.
Monica is not a smart assistant. It wonâ€™t guess what you want to do. Itâ€™s actually pretty dumb: it will only send you emails for the things you asked to be reminded of.
Monica does not have built-in AI with integrations like ChatGPT.
Monica is not a tool that will scan your data and do nasty things with it. Itâ€™s your data, your server, do whatever you want with it. Youâ€™re in control of your data.
Contribute
Do you want to lend a hand? Thatâ€™s great! We accept contributions from everyone, regardless of form.

Here are some of the things you can do to help.

Contribute as a community
Unlike Fight Club, the best way to help is to actually talk about Monica as much as you can in blog posts and articles, or on social media.
You can answer questions in the issue tracker to help other community members.
You can financially support Monicaâ€™s development on Patreon or by subscribing to a paid account.
Contribute as a developer
Read our Contribution Guide.
Install the developer version locally so you can start contributing.
Look for issues labelled â€˜Bugsâ€™ if you are looking to have an immediate impact on Monica.
Look for issues labelled â€˜Help Wantedâ€™. These are issues that you can solve relatively easily.
Look for issues labelled â€™Good First Issueâ€™. These issues are for people who want to contribute, but try to work on a small feature first.
If you are an advanced developer, you can try to tackle issues labelled â€˜Feature Requestsâ€™. These are harder to do and will require a lot of back-and-forth with the repository administrator to make sure we are going to the right direction with the product.
Principles, vision, goals and strategy
We want to use technology in a way that does not harm human relationships, unlike big social networks.

Principles
Monica has a few principles.

It should help improve relationships.
It should be simple to use, simple to contribute to, simple to understand, extremely simple to maintain.
It is not a social network and never will be.
It is not and never will be ad-supported.
Users are not and never will be tracked.
It should be transparent.
It should be open-source.
It should do one thing (documenting your life) extremely well, and nothing more.
It should be well documented.
Vision
Monicaâ€™s vision is to help people have more meaningful relationships.

Goals
We want to provide a platform that is:

really easy to use: we value simplicity over anything else.
open-source: we believe everyone should be able to contribute to this tool, and see for themselves that nothing nasty is done behind the scenes that would go against the best interests of the users. We also want to leverage the community to build attractive features and do things that would not be possible otherwise.
easy to contribute to: we want to keep the codebase as simple as possible. This has two big advantages: anyone can contribute, and itâ€™s easily maintainable on the long run.
available everywhere: Monica should be able to run on any desktop OS or mobile phone easily. This will be made possible by making sure the tool is easily installable by anyone who wants to either contribute or host the platform themselves.
Why Open Source?
Why is Monica open source? Is it risky? Could someone steal my code and use it to start a for-profit business that could hurt my own? Why reveal our strategy to the world? Weâ€™ve already received these kinds of questions in our emails.

The answer is simple: yes, you can fork Monica and create a competing project, make money from it (even if the license is not ideal for that) and we wonâ€™t be aware. But thatâ€™s okay, we donâ€™t mind.

We wanted to open source Monica for several reasons:

We believe that this tool can really change peopleâ€™s lives. We aim to make money from this project, but also want everyone to benefit. Open sourcing it will help Monica become much bigger than we imagine. We believe the software should follow our vision, but we must be humble enough to recognize that ideas come from everywhere and people may have better ideas than us.
You canâ€™t make something great alone. While Monica could become a company and hire a bunch of super smart people to work on it, you canâ€™t beat the manpower of an entire community. Open sourcing the product means bugs will be fixed faster, features will be developed faster, and more importantly, developers will be able to contribute to a tool that positively changes their own lives and the lives of other people.
Doing things in a transparent way leads to formidable things. People respect the project more when they can see how itâ€™s being worked on. You canâ€™t hide nasty things in the code. You canâ€™t do things behind the backs of your users. Doing everything in the open is a major driving force that motivates you to keep doing whatâ€™s right.
Once youâ€™ve created a community of passionate developers around your project, youâ€™ve won. Developers are powerful influencers: they create apps, discuss your product on forums, and share it with their networks. Nurture your relationship with developers â€“ users will follow.
Patreon
You can support the development of Monica on Patreon. Thanks for your help.

Contact
Team
Our team is made of two core members:

Regis (djaiss)
Alexis Saettler (asbiin)
We are also fortunate to have an amazing community of developers who help us greatly.

Thank you, open source
Monica makes use of numerous open-source projects and we are deeply grateful. We hope that by offering Monica as a free, open-source project, we can help others in the same way these programs have helped us.

License
Copyright Â© 2016â€“2023

Licensed under the AGPL License.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use
Data Types: Date of Birth, Email, Image, Friends
Purposes: Contact, customization, access
Stories:
1. We collect and use date of birth and email for contact. We collect and use Images and Friends for customization and access. We collect and use Images and Friends for access.

Beautiful mobile friendly event pages
Easy attendee management - Refunds, Messaging etc.
Data export - attendees list to XLS, CSV etc.
Generate print friendly attendee list
Ability to manage unlimited organisers / events
Manage multiple organisers
Real-time event statistics
Customizable event pages
Multiple currency support
Quick and easy checkout process
Customizable tickets - with QR codes, organiser logos etc.
Fully brandable - Have your own logos on tickets etc.
Affiliate tracking
track sales volume / number of visits generated etc.
Widget support - embed ticket selling widget into existing websites / WordPress blogs
Social sharing
Support multiple payment gateways - Stripe, PayPal & Coinbase so far, with more being added
Support for offline payments
Refund payments - partial refund & full refunds
Ability to add service charge to tickets
Messaging - eg. Email all attendees with X ticket
Public event listings page for organisers
Ability to ask custom questions during checkout
Browser based QR code scanner for door management
Elegant dashboard for easy management.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\Attendize\features.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
element-android\add_threePids.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
# Password auth provider callbacks

Password auth providers offer a way for server administrators to integrate
their Synapse installation with an external authentication system. The callbacks can be
registered by using the Module API's `register_password_auth_provider_callbacks` method.

## Callbacks

### `auth_checkers`

_First introduced in Synapse v1.46.0_

```python
auth_checkers: Dict[Tuple[str, Tuple[str, ...]], Callable]
```

A dict mapping from tuples of a login type identifier (such as `m.login.password`) and a
tuple of field names (such as `(""password"", ""secret_thing"")`) to authentication checking
callbacks, which should be of the following form:

```python
async def check_auth(
    user: str,
    login_type: str,
    login_dict: ""synapse.module_api.JsonDict"",
) -> Optional[
    Tuple[
        str, 
        Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]]
    ]
]
```

The login type and field names should be provided by the user in the
request to the `/login` API. [The Matrix specification](https://matrix.org/docs/spec/client_server/latest#authentication-types)
defines some types, however user defined ones are also allowed.

The callback is passed the `user` field provided by the client (which might not be in
`@username:server` form), the login type, and a dictionary of login secrets passed by
the client.

If the authentication is successful, the module must return the user's Matrix ID (e.g. 
`@alice:example.com`) and optionally a callback to be called with the response to the
`/login` request. If the module doesn't wish to return a callback, it must return `None`
instead.

If the authentication is unsuccessful, the module must return `None`.

Note that the user is not automatically registered, the `register_user(..)` method of
the [module API](writing_a_module.html) can be used to lazily create users.

If multiple modules register an auth checker for the same login type but with different
fields, Synapse will refuse to start.

If multiple modules register an auth checker for the same login type with the same fields,
then the callbacks will be executed in order, until one returns a Matrix User ID (and
optionally a callback). In that case, the return value of that callback will be accepted
and subsequent callbacks will not be fired. If every callback returns `None`, then the
authentication fails.
\} 

{#s (a: collect, use) (dt: Account data, Username, password, email ) (p: Log in)
### `check_3pid_auth`

_First introduced in Synapse v1.46.0_

```python
async def check_3pid_auth(
    medium: str, 
    address: str,
    password: str,
) -> Optional[
    Tuple[
        str, 
        Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]]
    ]
]
```

Called when a user attempts to register or log in with a third party identifier,
such as email. It is passed the medium (eg. `email`), an address (eg. `jdoe@example.com`)
and the user's password.

If the authentication is successful, the module must return the user's Matrix ID (e.g. 
`@alice:example.com`) and optionally a callback to be called with the response to the `/login` request.
If the module doesn't wish to return a callback, it must return None instead.

If the authentication is unsuccessful, the module must return `None`.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the authentication is denied.
\} 

{#s (a: collect, use) (dt: Account data, Username, password ) (p: Log out)
### `on_logged_out`

_First introduced in Synapse v1.46.0_

```python
async def on_logged_out(
    user_id: str,
    device_id: Optional[str],
    access_token: str
) -> None
``` 
Called during a logout request for a user. It is passed the qualified user ID, the ID of the
deactivated device (if any: access tokens are occasionally created without an associated
device ID), and the (now deactivated) access token.

Deleting the related pushers is done after calling `on_logged_out`, so you can rely on them
to still be present.

If multiple modules implement this callback, Synapse runs them all in order.
\} 

{#s (a: collect, use) (dt: Account data, Username, password, email ) (p: Account open)
### `get_username_for_registration`

_First introduced in Synapse v1.52.0_

```python
async def get_username_for_registration(
    uia_results: Dict[str, Any],
    params: Dict[str, Any],
) -> Optional[str]
```

Called when registering a new user. The module can return a username to set for the user
being registered by returning it as a string, or `None` if it doesn't wish to force a
username for this user. If a username is returned, it will be used as the local part of a
user's full Matrix ID (e.g. it's `alice` in `@alice:example.com`).

This callback is called once [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
has been completed by the user. It is not called when registering a user via SSO. It is
passed two dictionaries, which include the information that the user has provided during
the registration process.

The first dictionary contains the results of the [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
flow followed by the user. Its keys are the identifiers of every step involved in the flow,
associated with either a boolean value indicating whether the step was correctly completed,
or additional information (e.g. email address, phone number...). A list of most existing
identifiers can be found in the [Matrix specification](https://spec.matrix.org/v1.1/client-server-api/#authentication-types).
Here's an example featuring all currently supported keys:

```python
{
    ""m.login.dummy"": True,  # Dummy authentication
    ""m.login.terms"": True,  # User has accepted the terms of service for the homeserver
    ""m.login.recaptcha"": True,  # User has completed the recaptcha challenge
    ""m.login.email.identity"": {  # User has provided and verified an email address
        ""medium"": ""email"",
        ""address"": ""alice@example.com"",
        ""validated_at"": 1642701357084,
    },
    ""m.login.msisdn"": {  # User has provided and verified a phone number
        ""medium"": ""msisdn"",
        ""address"": ""33123456789"",
        ""validated_at"": 1642701357084,
    },
    ""m.login.registration_token"": ""sometoken"",  # User has registered through a registration token
}
```

The second dictionary contains the parameters provided by the user's client in the request
to `/_matrix/client/v3/register`. See the [Matrix specification](https://spec.matrix.org/latest/client-server-api/#post_matrixclientv3register)
for a complete list of these parameters.

If the module cannot, or does not wish to, generate a username for this user, it must
return `None`.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the username provided by the user is used, if any (otherwise one is automatically
generated).

### `get_displayname_for_registration`

_First introduced in Synapse v1.54.0_

```python
async def get_displayname_for_registration(
    uia_results: Dict[str, Any],
    params: Dict[str, Any],
) -> Optional[str]
```

Called when registering a new user. The module can return a display name to set for the
user being registered by returning it as a string, or `None` if it doesn't wish to force a
display name for this user.

This callback is called once [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
has been completed by the user. It is not called when registering a user via SSO. It is
passed two dictionaries, which include the information that the user has provided during
the registration process. These dictionaries are identical to the ones passed to
[`get_username_for_registration`](#get_username_for_registration), so refer to the
documentation of this callback for more information about them.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the username will be used (e.g. `alice` if the user being registered is `@alice:example.com`).
\} 

{#s (a: collect, use) (dt: Phone number, email, username, password ) (p: Log in)
## `is_3pid_allowed`

_First introduced in Synapse v1.53.0_

```python
async def is_3pid_allowed(self, medium: str, address: str, registration: bool) -> bool
```

Called when attempting to bind a third-party identifier (i.e. an email address or a phone
number). The module is given the medium of the third-party identifier (which is `email` if
the identifier is an email address, or `msisdn` if the identifier is a phone number) and
its address, as well as a boolean indicating whether the attempt to bind is happening as
part of registering a new user. The module must return a boolean indicating whether the
identifier can be allowed to be bound to an account on the local homeserver.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `True`, Synapse falls through to the next one. The value of the first
callback that does not return `True` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback.

## Example

The example module below implements authentication checkers for two different login types: 
-  `my.login.type` 
    - Expects a `my_field` field to be sent to `/login`
    - Is checked by the method: `self.check_my_login`
- `m.login.password` (defined in [the spec](https://matrix.org/docs/spec/client_server/latest#password-based))
    - Expects a `password` field to be sent to `/login`
    - Is checked by the method: `self.check_pass`

```python
from typing import Awaitable, Callable, Optional, Tuple

import synapse
from synapse import module_api


class MyAuthProvider:
    def __init__(self, config: dict, api: module_api):

        self.api = api

        self.credentials = {
            ""bob"": ""building"",
            ""@scoop:matrix.org"": ""digging"",
        }

        api.register_password_auth_provider_callbacks(
            auth_checkers={
                (""my.login_type"", (""my_field"",)): self.check_my_login,
                (""m.login.password"", (""password"",)): self.check_pass,
            },
        )

    async def check_my_login(
        self,
        username: str,
        login_type: str,
        login_dict: ""synapse.module_api.JsonDict"",
    ) -> Optional[
        Tuple[
            str,
            Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]],
        ]
    ]:
        if login_type != ""my.login_type"":
            return None

        if self.credentials.get(username) == login_dict.get(""my_field""):
            return (self.api.get_qualified_user_id(username), None)

    async def check_pass(
        self,
        username: str,
        login_type: str,
        login_dict: ""synapse.module_api.JsonDict"",
    ) -> Optional[
        Tuple[
            str,
            Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]],
        ]
    ]:
        if login_type != ""m.login.password"":
            return None

        if self.credentials.get(username) == login_dict.get(""password""):
            return (self.api.get_qualified_user_id(username), None)
```

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, process
Data Types: account information, email address, phone number
Purposes: functionality, account management
Stories:
1. We collect account information, email address and phone number for functionality. We collect account information, email address and phone number for account management. We process account information, email address and phone number for functionality.   We process account information, email address and phone number for account management..


# Adding and removing ThreePids to an account

<!--- TOC -->

* [Add email](#add-email)
  * [User enter the email](#user-enter-the-email)
    * [The email is already added to an account](#the-email-is-already-added-to-an-account)
    * [The email is free](#the-email-is-free)
* [User receives an e-mail](#user-receives-an-e-mail)
  * [User clicks on the link](#user-clicks-on-the-link)
  * [User returns on Element](#user-returns-on-element)
  * [User enters his password](#user-enters-his-password)
    * [The link has not been clicked](#the-link-has-not-been-clicked)
    * [Wrong password](#wrong-password)
    * [The link has been clicked and the account password is correct](#the-link-has-been-clicked-and-the-account-password-is-correct)
* [Remove email](#remove-email)
  * [User want to remove an email from his account](#user-want-to-remove-an-email-from-his-account)
    * [Email was not bound to an identity server](#email-was-not-bound-to-an-identity-server)
    * [Email was bound to an identity server](#email-was-bound-to-an-identity-server)
* [Add phone number](#add-phone-number)
    * [The phone number is already added to an account](#the-phone-number-is-already-added-to-an-account)
    * [The phone number is free](#the-phone-number-is-free)
* [User receive a text message](#user-receive-a-text-message)
  * [User enter the code to the app](#user-enter-the-code-to-the-app)
    * [Wrong code](#wrong-code)
    * [Correct code](#correct-code)
* [Remove phone number](#remove-phone-number)
  * [User wants to remove a phone number from his account](#user-wants-to-remove-a-phone-number-from-his-account)

<!--- END -->

## Add email

### User enter the email

> POST https://homeserver.org/_matrix/client/r0/account/3pid/email/requestToken

```json
{
  ""email"": ""alice@email-provider.org"",
  ""client_secret"": ""TixzvOnw7nLEUdiQEmkHzkXKrY4HhiGh"",
  ""send_attempt"": 1
}
```

#### The email is already added to an account

400

```json
{
  ""errcode"": ""M_THREEPID_IN_USE"",
  ""error"": ""Email is already in use""
}
```

#### The email is free

Wording: ""We've sent you an email to verify your address. Please follow the instructions there and then click the button below.""

200

```json
{
  ""sid"": ""bxyDHuJKsdkjMlTJ""
}
```

## User receives an e-mail

> `homeserver.org` Validate your email
>
> A request to add an email address to your Matrix account has been received. If this was you, please click the link below to confirm adding this email:
  https://homeserver.org/_matrix/client/unstable/add_threepid/email/submit_token?token=WUnEhQAmJrXupdEbXgdWvnVIKaGYZFsU&client_secret=TixzvOnw7nLEUdiQEmkHzkXKrY4HhiGh&sid=bxyDHuJKsdkjMlTJ
>  
>  If this was not you, you can safely ignore this email. Thank you.

### User clicks on the link

The browser displays the following message:

> Your email has now been validated, please return to your client. You may now close this window.

### User returns on Element

User clicks on CONTINUE

> POST https://homeserver.org/_matrix/client/r0/account/3pid/add

```json
{
  ""sid"": ""bxyDHuJKsdkjMlTJ"",
  ""client_secret"": ""TixzvOnw7nLEUdiQEmkHzkXKrY4HhiGh""
}
```

401 User Interactive Authentication

```json
{
  ""session"": ""ppvvnozXCQZFaggUBlHJYPjA"",
  ""flows"": [
    {
      ""stages"": [
        ""m.login.password""
      ]
    }
  ],
  ""params"": {
  }
}
```

### User enters his password

POST https://homeserver.org/_matrix/client/r0/account/3pid/add

```json
{
  ""sid"": ""bxyDHuJKsdkjMlTJ"",
  ""client_secret"": ""TixzvOnw7nLEUdiQEmkHzkXKrY4HhiGh"",
  ""auth"": {
    ""session"": ""ppvvnozXCQZFaggUBlHJYPjA"",
    ""type"": ""m.login.password"",
    ""user"": ""@benoitx:matrix.org"",
    ""password"": ""weak_password""
  }
}
```

#### The link has not been clicked

400

```json
{
  ""errcode"": ""M_THREEPID_AUTH_FAILED"",
  ""error"": ""No validated 3pid session found""
}
```

#### Wrong password

401

```json
{
  ""session"": ""fXHOvoQsPMhEebVqTnIrzZJN"",
  ""flows"": [
    {
      ""stages"": [
        ""m.login.password""
      ]
    }
  ],
  ""params"": {
  },
  ""completed"":[
  ],
  ""error"": ""Invalid password"",
  ""errcode"": ""M_FORBIDDEN""
}
```

#### The link has been clicked and the account password is correct

200

```json
{}
```

## Remove email

### User want to remove an email from his account

> POST https://homeserver.org/_matrix/client/r0/account/3pid/delete

```json
{
  ""medium"": ""email"",
  ""address"": ""alice@email-provider.org""
}
```

#### Email was not bound to an identity server

200

```json
{
  ""id_server_unbind_result"": ""no-support""
}
```

#### Email was bound to an identity server

200

```json
{
  ""id_server_unbind_result"": ""success""
}
```

## Add phone number

> POST https://homeserver.org/_matrix/client/r0/account/3pid/msisdn/requestToken

```json
{
  ""country"": ""FR"",
  ""phone_number"": ""611223344"",
  ""client_secret"": ""f1K29wFZBEr4RZYatu7xj8nEbXiVpr7J"",
  ""send_attempt"": 1
}
```

Note that the phone number is sent without `+` and without the country code

#### The phone number is already added to an account

400

```json
{
  ""errcode"": ""M_THREEPID_IN_USE"",
  ""error"": ""MSISDN is already in use""
}
```

#### The phone number is free

Wording: ""A text message has been sent to +33611223344. Please enter the verification code it contains.""

200

```json
{
  ""msisdn"": ""33651547677"",
  ""intl_fmt"": ""+33 6 51 54 76 77"",
  ""success"": true,
  ""sid"": ""253299954"",
  ""submit_url"": ""https://homeserver.org/_matrix/client/unstable/add_threepid/msisdn/submit_token""
}
```

## User receive a text message

> Riot

> Your Riot validation code is 892541, please enter this into the app

### User enter the code to the app

#### Wrong code

> POST https://homeserver.org/_matrix/client/unstable/add_threepid/msisdn/submit_token

```json
{
  ""sid"": ""253299954"",
  ""client_secret"": ""f1K29wFZBEr4RZYatu7xj8nEbXiVpr7J"",
  ""token"": ""111111""
}
```

400

```json
{
  ""errcode"": ""M_UNKNOWN"",
  ""error"": ""Error contacting the identity server""
}
```

This is not an ideal, but the client will display a hint to check the entered code to the user.

#### Correct code

> POST https://homeserver.org/_matrix/client/unstable/add_threepid/msisdn/submit_token

```json
{
  ""sid"": ""253299954"",
  ""client_secret"": ""f1K29wFZBEr4RZYatu7xj8nEbXiVpr7J"",
  ""token"": ""892541""
}
```

200

```json
{
  ""success"": true
}
```

Then the app call `https://homeserver.org/_matrix/client/r0/account/3pid/add` as per adding an email and follow the same UIS flow

## Remove phone number

### User wants to remove a phone number from his account

This is the same request and response than to remove email, but with this body:

```json
{
  ""medium"": ""msisdn"",
  ""address"": ""33611223344""
}
```

Note that the phone number is provided without `+`, but with the country code.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\element-android\add_threePids.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",1.0
friendica\account-basics.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Getting Started
Choosing an Instance
If you are used to sites like Reddit, then Lemmy works in a fundamentally different way. Instead of a single website like reddit.com, there are many different websites (called instances). These are operated by different people, have different topics and rules. Nevertheless, posts created in one instance can directly be seen by users who are registered on another. Its basically like email, but for social media.

This means before using Lemmy and registering an account, you need to pick an instance. For this you can browse the instance list and look for one that matches your topics of interest. You can also see if the rules match your expectations, and how many users there are. It is better to avoid very big or very small instances. But don't worry too much about this choice, you can always create another account on a different instance later.

[instance list screenshot]

Registration
Once you choose an instance, it's time to create your account. To do this, click sign up in the top right of the page, or click the top right button on mobile to open a menu with sign up link.

[registration page screenshot]

On the signup page you need to enter a few things:

Username: How do you want to be called? This name can not be changed and is unique within an instance. Later you can also set a displayname which can be freely changed. If your desired username is taken, consider choosing a different instance where it is still available.
Email: Your email address. This is used for password resets and notifications (if enabled). Providing an email address is usually optional, but admins may choose to make it mandatory. In this case you will have to wait for a confirmation mail and click the link after completing this form.
Password: The password for logging in to your account. Make sure to choose a long and unique password which isn't used on any other website.
Verify password: Repeat the same password from above to ensure that it was entered correctly.
There are also a few optional fields, which you may need to fill in depending on the instance configuration:

Question/Answer: Instance admins can set an arbitrary question which needs to be answered in order to create an account. This is often used to prevent spam bots from signing up. After submitting the form, you will need to wait for some time until the answer is approved manually before you can login.
Code: A captcha which is easy to solve for humans but hard for bots. Enter the letters and numbers that you see in the text box, ignoring uppercase or lowercase. Click the refresh button if you are unable to read a character. The play button plays an audio version of the captcha.
Show NSFW content: Here you can choose if content that is ""not safe for work"" (or adult-only) should be shown.
When you are done, press the sign up button.

It depends on the instance configuration when you can login and start using the account. In case the email is mandatory, you need to wait for the confirmation email and click the link first. In case ""Question/Answer"" is present, you need to wait for an admin to manually review and approve your registration. If you have problems with the registration, try to get in contact with the admin for support. You can also choose a different instance to sign up if your primary choice does not work.

Following Communities
After logging in to your new account, its time to follow communities that you are interested in. For this you can click on the communities link at the top of the page (on mobile, you need to click the menu icon on the top right first). You will see a list of communities which can be filtered by subscribed, local or all. Local communities are those which are hosted on the same site where you are signed in, while all also contains federated communities from other instances. In any case you can directly subscribe to communities with the right-hand subscribe link. Or click on the community name to browse the community first, see what its posted and what the rules are before subscribing.

Another way to find communities to subscribe to is by going to the front page and browsing the posts. If there is something that interests you, click on the post title to see more details and comments. Here you can subscribe to the community in the right-hand sidebar, or by clicking the ""sidebar"" button on mobile.

These previous ways will only show communities that are already known to the instance. Especially if you joined a small or inactive Lemmy instance, there will be few communities to discover. You can find more communities by browsing different Lemmy instances, or using the Lemmy Explorer. When you found a community that you want to follow, enter its URL (e.g. https://feddit.org/c/main) or the identifier (e.g. !main@feddit.org) into the search field of your own Lemmy instance. Lemmy will then fetch the community from its original instance, and allow you to interact with it. The same method also works to fetch users, posts or comments from other instances.

Setting up Your Profile
Before you start posting, its a good idea to provide some details about yourself. Open the top-right menu and go to ""settings"". Here the following settings are available for your public profile:

Displayname: An alternative username which can be changed at any time
Bio: Long description of yourself, can be formatted with Markdown
Matrix User: Your username on the decentralized Matrix chat
Avatar: Profile picture that is shown next to all your posts
Banner: A header image for your profile page
On this page you can also change the email and password. Additionally there are many other settings available, which allow customizing of your browsing experience:

Blocks (tab at top of the page): Here you can block users and communities, so that their posts will be hidden.
Interface language: Which language the user interface should use.
Languages: Select the languages that you speak to see only content in these languages. This is a new feature and many posts don't specify a language yet, so be sure to select ""Undetermined"" to see them.
Theme: You can choose between different color themes for the user interface. Instance admins can add more themes.
Type: Which timeline you want to see by default on the front page; only posts from communities that you subscribe to, posts in local communities, or all posts including federated.
Sort type: How posts and comments should be sorted by default. See Votes and Ranking for details.
Show NSFW content: Whether or not you want to see content that is ""not safe for work"" (or adult-only).
Show Scores: Whether the number of upvotes and downvotes should be visible.
Show Avatars: Whether profile pictures of other users should be shown.
Bot Account: Enable this if you are using a script or program to create posts automatically
Show Bot Accounts: Disable this to hide posts that were created by bot accounts.
Show Read Posts: If this is disabled, posts that you already viewed are not shown in listings anymore. Useful if you want to find new content easily, but makes it difficult to follow ongoing discussion under existing posts.
Show Notifications for New Posts: Enable this to receive a popup notification for each new post that is created.
Send notifications to Email: Enable to receive notifications about new comment replies and private messages to your email address.
Start Posting
Finally its time to start posting! To do this it is always a good idea to read the community rules in the sidebar (below the Subscribe button). When you are ready, go to a post and type your comment in the box directly below for a top-level reply. You can also write a nested reply to an existing comment, by clicking the left-pointing arrow.

Other than commenting on existing posts, you can also create new posts. To do this, click the button Create a post in the sidebar. Here you can optionally supply an external link or upload an image. The title field is mandatory and should describe what you are posting. The body is again optional, and gives space for long texts. You can also embed additional images here. The Community dropdown below allows choosing a different community to post in. With NSFW, posts can be marked as ""not safe for work"". Finally you can specify the language that the post is written in, and then click on Create.

One more possibility is to write private messages to individual users. To do this, simply visit a user profile and click Send message. You will be notified about new private messages and comment replies with the bell icon in the top right.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Delete
Data Types: Email address,username, password
Purposes: Account management, Functionality, authenticate
Stories:
1. We collect Email Address, User name, password dor account management. We use Email address, User name, password for authentication .

Account Basics
==============

* [Home](help)

Registration
---

Not all Friendica sites allow open registration.
If registration is allowed, you will see a ""Register"" link immediately below the login prompt on the site's home page.
Following this link will take you to the site registration page.
The strength of our network is that lots of different sites are all completely compatible with each other.
If the site you're visiting doesn't allow registration, or you think you might prefer another one, there is a [list of public servers here](https://dir.friendica.social/servers) and hopefully you will find one that meets your needs.

If you'd like to have your own server, you can do that too.
Visit [the Friendica website](http://friendi.ca/) to download the code with setup instructions.
It's a very simple installation process that anybody experienced in hosting websites, or with basic Linux experience can handle easily.

### OpenID

The first field on the Registration page is for an OpenID address.
If you do not have an OpenID address or do not wish to use OpenID, leave this field blank.
If you have an OpenID account elsewhere and wish to use it, enter the address into this field and click 'Register'.
Friendica will attempt to extract as much information as possible from your OpenID provider and return to this page with those items already filled in.

### Your Display Name

Please provide your display name **as you would like it to be displayed on this system**.
Some people use their real name for this, but you're under no obligation to do so yourself.

### Email Address

Please provide a valid email address.
Your email address is **never** published.
We need this to send you account information and your login details.
You may also occasionally receive notifications of incoming messages or items requiring your attention, but you have the possibility to completely disable these from your Settings page once you have logged in.
This doesn't have to be your primary email address, but it does need to be a real email address.
You can't get your initial password, or reset a lost password later without it.
This is the only bit of personal information that has to be accurate.

### Nickname

A nickname is used to generate web addresses for many of your personal pages, and is also treated like an email address when establishing communications with others.
Due to the way that the nickname is used, it has some limitations.
It must contain only US-ASCII text characters and numbers, and must also start with a text character.
It also must be unique on this system.
This is used in many places to identify your account, and once set it cannot be changed.


### Directory Publishing

The registration form also allows you to choose whether or not to list your account in the online directory of your node.
This is like a ""phone book"" and you may choose to be unlisted.
We recommend that you select 'Yes' so that other people (friends, family, etc.) will be able to find you.
If you choose 'No', you will essentially be invisible and have few opportunities for interaction.
Whichever you choose, this can be changed any time from your Settings page after you login.

### Register

Once you have provided the necessary details, click the 'Register' button.
An email will be sent to you providing your account login details.
Please check your email (including spam folders) for your registration details and initial password.

Login Page
---

On the 'Login' page, please enter your login information that was provided during registration.
You may use either your nickname or email address as a Login Name.

If you use your account to manage other accounts and these all have the same email address, please enter the nickname for the account you wish to manage.

If your account has been OpenID enabled, you may use your OpenID address as a login name and leave the password blank.
You will be redirected to your OpenID provider to complete your authorisation.

Otherwise, enter your password.
This will have been initially provided in your registration email message.
Your password is case-sensitive, so please check your 'Caps Lock' key if you are having difficulty logging in.

Changing Your Password
---

After your first login, please visit the 'Settings' page from the top menu bar and change your password to something that you will remember.

Getting Started
---

A link with ['Tips for New Members'](newmember) will show up on your network and home pages for two weeks providing key information for getting started.

Retrieving Personal Data
---

You can export a copy of your personal data in JSON format from the ""Export personal data"" link at the top of your settings page.

You need this file to relocate your Friendica account to another node.
This might be necessary, e.g. if your node suffers a severe hardware problem and is not recoverable.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\friendica\account-basics.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
gotosocial\signups.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Getting Started
Choosing an Instance
If you are used to sites like Reddit, then Lemmy works in a fundamentally different way. Instead of a single website like reddit.com, there are many different websites (called instances). These are operated by different people, have different topics and rules. Nevertheless, posts created in one instance can directly be seen by users who are registered on another. Its basically like email, but for social media.

This means before using Lemmy and registering an account, you need to pick an instance. For this you can browse the instance list and look for one that matches your topics of interest. You can also see if the rules match your expectations, and how many users there are. It is better to avoid very big or very small instances. But don't worry too much about this choice, you can always create another account on a different instance later.

[instance list screenshot]

Registration
Once you choose an instance, it's time to create your account. To do this, click sign up in the top right of the page, or click the top right button on mobile to open a menu with sign up link.

[registration page screenshot]

On the signup page you need to enter a few things:

Username: How do you want to be called? This name can not be changed and is unique within an instance. Later you can also set a displayname which can be freely changed. If your desired username is taken, consider choosing a different instance where it is still available.
Email: Your email address. This is used for password resets and notifications (if enabled). Providing an email address is usually optional, but admins may choose to make it mandatory. In this case you will have to wait for a confirmation mail and click the link after completing this form.
Password: The password for logging in to your account. Make sure to choose a long and unique password which isn't used on any other website.
Verify password: Repeat the same password from above to ensure that it was entered correctly.
There are also a few optional fields, which you may need to fill in depending on the instance configuration:

Question/Answer: Instance admins can set an arbitrary question which needs to be answered in order to create an account. This is often used to prevent spam bots from signing up. After submitting the form, you will need to wait for some time until the answer is approved manually before you can login.
Code: A captcha which is easy to solve for humans but hard for bots. Enter the letters and numbers that you see in the text box, ignoring uppercase or lowercase. Click the refresh button if you are unable to read a character. The play button plays an audio version of the captcha.
Show NSFW content: Here you can choose if content that is ""not safe for work"" (or adult-only) should be shown.
When you are done, press the sign up button.

It depends on the instance configuration when you can login and start using the account. In case the email is mandatory, you need to wait for the confirmation email and click the link first. In case ""Question/Answer"" is present, you need to wait for an admin to manually review and approve your registration. If you have problems with the registration, try to get in contact with the admin for support. You can also choose a different instance to sign up if your primary choice does not work.

Following Communities
After logging in to your new account, its time to follow communities that you are interested in. For this you can click on the communities link at the top of the page (on mobile, you need to click the menu icon on the top right first). You will see a list of communities which can be filtered by subscribed, local or all. Local communities are those which are hosted on the same site where you are signed in, while all also contains federated communities from other instances. In any case you can directly subscribe to communities with the right-hand subscribe link. Or click on the community name to browse the community first, see what its posted and what the rules are before subscribing.

Another way to find communities to subscribe to is by going to the front page and browsing the posts. If there is something that interests you, click on the post title to see more details and comments. Here you can subscribe to the community in the right-hand sidebar, or by clicking the ""sidebar"" button on mobile.

These previous ways will only show communities that are already known to the instance. Especially if you joined a small or inactive Lemmy instance, there will be few communities to discover. You can find more communities by browsing different Lemmy instances, or using the Lemmy Explorer. When you found a community that you want to follow, enter its URL (e.g. https://feddit.org/c/main) or the identifier (e.g. !main@feddit.org) into the search field of your own Lemmy instance. Lemmy will then fetch the community from its original instance, and allow you to interact with it. The same method also works to fetch users, posts or comments from other instances.

Setting up Your Profile
Before you start posting, its a good idea to provide some details about yourself. Open the top-right menu and go to ""settings"". Here the following settings are available for your public profile:

Displayname: An alternative username which can be changed at any time
Bio: Long description of yourself, can be formatted with Markdown
Matrix User: Your username on the decentralized Matrix chat
Avatar: Profile picture that is shown next to all your posts
Banner: A header image for your profile page
On this page you can also change the email and password. Additionally there are many other settings available, which allow customizing of your browsing experience:

Blocks (tab at top of the page): Here you can block users and communities, so that their posts will be hidden.
Interface language: Which language the user interface should use.
Languages: Select the languages that you speak to see only content in these languages. This is a new feature and many posts don't specify a language yet, so be sure to select ""Undetermined"" to see them.
Theme: You can choose between different color themes for the user interface. Instance admins can add more themes.
Type: Which timeline you want to see by default on the front page; only posts from communities that you subscribe to, posts in local communities, or all posts including federated.
Sort type: How posts and comments should be sorted by default. See Votes and Ranking for details.
Show NSFW content: Whether or not you want to see content that is ""not safe for work"" (or adult-only).
Show Scores: Whether the number of upvotes and downvotes should be visible.
Show Avatars: Whether profile pictures of other users should be shown.
Bot Account: Enable this if you are using a script or program to create posts automatically
Show Bot Accounts: Disable this to hide posts that were created by bot accounts.
Show Read Posts: If this is disabled, posts that you already viewed are not shown in listings anymore. Useful if you want to find new content easily, but makes it difficult to follow ongoing discussion under existing posts.
Show Notifications for New Posts: Enable this to receive a popup notification for each new post that is created.
Send notifications to Email: Enable to receive notifications about new comment replies and private messages to your email address.
Start Posting
Finally its time to start posting! To do this it is always a good idea to read the community rules in the sidebar (below the Subscribe button). When you are ready, go to a post and type your comment in the box directly below for a top-level reply. You can also write a nested reply to an existing comment, by clicking the left-pointing arrow.

Other than commenting on existing posts, you can also create new posts. To do this, click the button Create a post in the sidebar. Here you can optionally supply an external link or upload an image. The title field is mandatory and should describe what you are posting. The body is again optional, and gives space for long texts. You can also embed additional images here. The Community dropdown below allows choosing a different community to post in. With NSFW, posts can be marked as ""not safe for work"". Finally you can specify the language that the post is written in, and then click on Create.

One more possibility is to write private messages to individual users. To do this, simply visit a user profile and click Send message. You will be notified about new private messages and comment replies with the bell icon in the top right.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Delete
Data Types: Email address,username, password
Purposes: Account management, Functionality, authenticate
Stories:
1. We collect Email Address, User name, password dor account management. We use Email address, User name, password for authentication .

# New Account Sign-Ups

If you want to allow more people than just you to have an account on your instance, you can open your instance to new account sign-ups / registrations.

Be wary that as instance admin, like it or not, you are responsible for what people post on your instance. If users on your instance harass or annoy other people on the fediverse, you may find your instance gets a bad reputation and becomes blocked by others. Moderating a space properly takes work. As such, you should carefully consider whether or not you are willing and able to do moderation, and consider accepting sign-ups on your instance only from friends and people that you really trust.

!!! warning
    For the sign-up flow to work as intended, your instance [should be configured to send emails](../configuration/smtp.md).
    
    As mentioned below, several emails are sent during the sign-up flow, both to you (as admin/moderator) and to the applicant, including an email asking them to confirm their email address.
    
    If they cannot receive this email (because your instance is not configured to send emails), you will have to manually confirm the account by [using the CLI tool](../admin/cli.md#gotosocial-admin-account-confirm).

## Opening Sign-Ups

You can open new account sign-ups for your instance by changing the variable `accounts-registration-open` to `true` in your [configuration](../configuration/accounts.md), and restarting your GoToSocial instance.

A sign-up form for your instance will be available at the `/signup` endpoint. For example, `https://your-instance.example.org/signup`.

![Sign-up form, showing email, password, username, and reason fields.](../public/signup-form.png)

Also, your instance homepage and ""about"" pages will be updated to reflect that registrations are open.

When someone submits a new sign-up, they'll receive an email at the provided email address, giving them a link to confirm that the address really belongs to them.

In the meantime, admins and moderators on your instance will receive an email and a notification that a new sign-up has been submitted.

## Handling Sign-Ups

Instance admins and moderators can handle a new sign-up by either approving or rejecting it via the ""accounts"" -> ""pending"" section in the admin panel.

![Admin settings panel open to ""accounts"" -> ""pending"", showing one account in a list.](../public/signup-pending.png)

If you have no sign-ups, the list pictured above will be empty. If you have a pending account sign-up, however, you can click on it to open that account in the account details screen:

![Details of a new pending account, giving options to approve or reject the sign-up.](../public/signup-account.png)

At the bottom, you will find actions that let you approve or reject the sign-up.

If you **approve** the sign-up, the account will be marked as ""approved"", and an email will be sent to the applicant informing them their sign-up has been approved, and reminding them to confirm their email address if they haven't already done so. If they have already confirmed their email address, they will be able to log in and start using their account.

If you **reject** the sign-up, you may wish to inform the applicant that their sign-up has been rejected, which you can do by ticking the ""send email"" checkbox. This will send a short email to the applicant informing them of the rejection. If you wish, you can add a custom message, which will be added at the bottom of the email. You can also add a private note that will be visible to other admins only.

!!! warning
    You may want to hold off on approving a sign-up until they have confirmed their email address, in case the applicant made a typo when submitting, or the email address they provided does not actually belong to them. If they cannot confirm their email address, they will not be able to log in and use their account.

## Sign-Up Limits

To avoid sign-up backlogs overwhelming admins and moderators, GoToSocial limits the sign-up pending backlog to 20 accounts. Once there are 20 accounts pending in the backlog waiting to be handled by an admin or moderator, new sign-ups will not be accepted via the form.

New sign-ups will also not be accepted via the form if 10 or more new account sign-ups have been approved in the last 24 hours, to avoid instances rapidly expanding beyond the capabilities of moderators.

In both cases, applicants will be shown an error message explaining why they could not submit the form, and inviting them to try again later.

To combat spam accounts, GoToSocial account sign-ups **always** require manual approval by an administrator, and applicants must **always** confirm their email address before they are able to log in and post.

## Sign-Up Via Invite

NOT IMPLEMENTED YET: in a future update, admins and moderators will be able to create and send invites that allow accounts to be created even when public sign-up is closed, and to pre-approve accounts created via invitation, and/or allow them to override the sign-up limits described above.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\gotosocial\signups.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
invoiceninja\userdetails.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Manage Users & Auth
Registrations
You can enable registrations of on your instance. To prevent SPAM, we recommend to enable to following signup settings:

Require email verification
Require approval
Registration approval PeerTube >= 5.1
If signup require approval, users will request registration on your instance and will have to fill a Registration reason to help you to decide if you want to accept or not the user.

Registration reason input

Administrators and moderators can then list registration requests on the instance.

Registration list table

And accept or reject them. A Moderation response must be filled that will be sent to the user to explain its registration request has been accepted/rejected.

Accepting a registration will automatically create the user.

Registration accept modal

Manage users
The user menu allows you to manage all existing users on your instance.

Window displayed when in user menu

Users will be created when they register to your instance, but you may also create users manually using the ""create user"" button at the top right of the user menu.

Under the user menu you can update or delete a user by clicking on the three dots  at the left of a user info.

User dot button

Edit user will allow you to update user informations - see below.
Delete user will allow you to definitely delete this user. All of that user's videos will also be deleted.
Ban will disable connection for this user but videos and comments will be kept as is. No one else will be able to register with the same nickname or email address.
Editing users
When clicking on Edit, you can update parameters for a user such as email, role, video quota and so on. You also can specify if it needs review before a video goes public.

Window displayed when clicking on Edit user

You have two ways to reset password:

by sending a reset link to the user email
by changing it manually
Roles
Role defines what a user is allowed to do on the instance. There are three roles on PeerTube: Administrator, Moderator, and User.

Administrator
Administrators can do anything, and have access to the full admin backend.

Add, Remove, and Edit user accounts, including Admin and Moderator accounts
View, Edit, Add and Remove instance following and followers
Delete Local Videos
Allow or disallow video storage redundancy for followed instances
Configure the instance:
instance name
short and full descriptions
Terms of Service (ToS)
Whether or not the instance is dedicated to NSFW content
default landing page
default NSFW video display policy (which can be modified by logged-in users)
whether signups are enabled or disabled
default user quotas
whether importing videos is allowed
from YouTube
from a torrent file or Magnet Link
whether or not new videos are automatically blacklisted when uploaded
whether other instances can follow your instance, and whether those followers need to be manually approved or not
administrator email
enable or disable the contact form
Twitter account information for the instance link previews (optional)
transcoding settings
enable or disable transcoding
enable or disable mkv, .mov, .avi, and .flv videos (this is all or none)
allow or disallow audio file uploads
number of threads to use for transcoding on the server
which resolutions are enabled (240p, 360p, 480p, 720p, 1080p, 2160p)
cache size for previews and captions
custom JavaScript and CSS
Search for and install Plugins and Themes
View System Jobs, Logs, and Debugging information
Admins also have the ability to perform any action that can be performed by a Moderator or a User

Moderator
Moderators have access to the ""Moderation"" part of the administration backend which Administrators also see.

View user account information:
username
email address
daily/total quotas
role
creation date
Add accounts with the User role.
View video abuse reports
reporter
abuse report date and time
video title (with link to video)
Delete, Comment, Accept or Reject video abuse reports
View blacklisted videos
video title
whether the video is labeled as sensitive or not
whether the video has been unfederated or not (only applies to local videos)
date and time of the blacklist
View muted accounts
account username and instance
date and time of the mute
View muted instances
instance domain
date and time of the mute
Blacklist videos
Mute Accounts
Mute Instances
List, accept and reject registration requests
Moderators can also do anything that a User account can do.

User
User is the default role.

Create, Edit, and Delete channels associated with their account
Create, Edit, and Delete playlists associated with their account
Upload, Edit, and Delete videos to their account, associated with one of their channels
Comment on videos
Add videos to playlists, or remove videos from them
Change user settings (See the Use PeerTube page for more information)
Report videos to the moderators with a comment about why the video is being reported
Quotas
Video Quota
Video Quota represents the size limit a user cannot exceed when uploading videos. Each time a user upload a video, Peertube checks if there is enough quota to store it. If not, the upload is denied. Beware, the quota after an upload is estimated only on the size of the file uploaded. However, after transcoding (which outputs videos of unpredictable size) the video resolutions resulting of the transcoding are also taken into account in a user's quota. If you have enabled multiple resolutions, a user can use more than their quota on disk. Peertube will provide you an estimation of maximal space a user will use according to your transcoding options. You can change the default for new users in the configuration menu.

Daily Video Quota
Daily Video Quota represents the max quota a user is allowed to upload by day. You can tune this parameter to adjust the resources your instance will use. For instance, if you have many users transcoding could take a long time, so limiting upload by user by day could help to share resources between them. You can change the default for new users in the configuration menu.

Once you are satisfied with your user, you can click on the ""Update User"" button to save modifications.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Process, Delete
Data Types: Email address, account information, video
Purposes: account management, user protection
Stories:
1. We collect email address, account information for account management. We Process email addres, account information and video for account management. We delete account information and video for user protection..

User Details
The User Details section covers account settings for the currently logged in user. A user's details help identify them among your team, help your teammates contact each other, and is relevant in Invoice Ninja if you are assigning users to tasks, projects, clients, or etc as a practice for organization and accountability.

Details
First Name
Last Name
Email - Used to send password reset links to when requested.
Phone - For your reference only.
Password - You would use this field to change your user account password, it doesn't reveal your existing account password.
Enable Two Factor - Enable two factor authentication using TOTP codes with any TOTP supported 2FA app or device. The pop-up will present a random secret code, and a matching QR code for it. It will require you test the TOTP with a one time password to verify the 2FA setup works, then save the change to your account.
Accent Color - Accent colors are used mostly as selection highlighter, and button colors in the admin portal UI. Accent Color is a mix of user-associated, and company associated. Each user may pick all of their own accent colors, and for each company.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\invoiceninja\userdetails.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
jitsi-meet\configurations.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Edit on GitHub
Navigation
The Desktop App exercises relatively strict control over the userâ€™s ability to navigate through the web. This is done for a few reasons:
Security:
Since we expose certain Electron (and therefore NodeJS) APIs to the front-end application, we want to be in control of what scripts are run in the front-end. We make a concerted effort to lock down the exposed APIs to only what is necessary; however, to avoid any privacy or security breaches, itâ€™s best to avoid allowing the user to navigate to any page that isnâ€™t explicitly trusted.
User Experience:
Our application is ONLY designed to work with the Mattermost Web App and thus allowing the user to navigate to other places that are not the Web App is not a supported use case, and could create some undesirable effects.
Internal navigation
The Mattermost Web App is self-contained, with the majority of links provided by
react-router
and thus most navigation is handled by that module. However, in the Desktop App, we have a major feature that allows users to navigate between distinct tabs bound to the same server. There are two ways that this style of navigation happens in the Web App:
A user clicks on a link provided by the
react-router
Link
component
The application calls
browserHistory.push
directly within the Web App based on the user action
Both of these methods will make use of the
browserHistory
module within the Web App.
When one of the above methods is used, normally the Web App would update the browserâ€™s URL and change the state of the page. In the Desktop App, we instead send the arguments of the call to
browserHistory.push
up to the Electron Main Process. The information is received at the method
WindowManager.handleBrowserHistoryPush
, where we perform the following actions:
Clean the path name by removing any part of the serverâ€™s subpath pathname.
When the arguments are sent up to the Desktop App, it includes the subpath of the server hosting it.
As an example, if the server URL is
http://server-1.com/mattermost
, any path that is received will start with
/mattermost
and we will need to remove that component. The same would be true for any other path following the origin
http://server-1.com
.
Retrieve the view matching the path name
After removing the leading subpath (if applicable), we check to see if a portion of the path matches one of the other tabs, signally that we will need to switch to that tab.
For server
http://server-1.com/mattermost
, if the pathname is
/mattermost/boards/board1
, we would get the
Boards
view matching the server.
Display the correct view and send the cleaned path to its renderer process
We then explicitly display the new view if itâ€™s not currently in focus. If itâ€™s closed, we open it and load the corresponding URL with the provided path.
Exception
: If weâ€™re redirecting to the root of the application and the user is not logged in, it will generate an unnecessary refresh. In this case, we do not send the path name down.
External navigation
For the cases where a user wants to navigate away from the Web App to an external site, we generally want to direct the user outside of the Desktop App and have them open their default web browser and use the external site in that application.
In order to achieve this, we need to explicitly handle every other link and method of navigation that is available to an Electron renderer process. Fortunately, Electron provides a few listeners that help us with that:
will-navigate
is an event that fires when the URL is changed for a given renderer process. Attaching a listener for this event allows us to prevent the navigation if desired.
NOTE: The event will not fire for in-page navigations or updating
window.location.hash
.
did-start-navigation
is another renderer process event that will fire once the page has started navigating. We can use this event to perform any actions when a certain URL is visited.
new-window
is an event that will fire when the user tries to open a new window or tab. This commonly will fire when the user clicks on a link marked
target=_blank
. We attach this listener using the
setWindowOpenHandler
and will allow us to
allow
or
deny
the opening as we desire.
In our application, we define all of these listeners in the
webContentEvents
module, and we attach them whenever a new
webContents
object is create to make sure that all renderer processes are correctly secured and set up correctly.
New window handling
Our new window handler will
deny
the opening of a new Electron window if any of the following cases are true:
Malformed URL:
Depending on the case, it will outright ignore it (if the URL could not be parsed), or it will open the userâ€™s default browser if it is somehow invalid in another way.
Untrusted Protocol:
If the URL does not match an allowed protocol (allowed protocols include
http
,
https
, and any other protocol that was explicitly allowed by the user).
In this case, it will ask the user whether the protocol should be allowed, and if so will open the URL in the userâ€™s default application that corresponds to that protocol.
Unknown Site:
If the URL does not match the root of a configured server, it will always try to open the link in the userâ€™s default browser.
If the URL DOES match the root of a configured server, we still will deny the window opening for a few cases:
If the URL matches the public files route (
/api/v4/public/files/*
)
If the URL matches the image proxy route (
/api/v4/image/*
)
If the URL matches the help route (
/help/*
)
For these cases, we will open the link in the userâ€™s browser.
Deep Link Case
: If the URL doesnâ€™t match any of the above routes, but is still a valid configured server, we will generally treat is as the deep link cause, and will instead attempt to show the correct tab as well as navigate to the corresponding URL within the app.
There are two cases where we do allow the application to open a new window:
If the URL matches the
devtools:
protocol, so that we can open the Chrome Developer Tools.
If the URL is a valid configured server URL that corresponds to the plugins route (
/plugins/*
). In these cases we allow a single popup per tab to be opened for certain plugins to do things like OAuth (e.g. GitHub or JIRA).
Any other case will be automatically denied for security reasons.
Links within the same window
By default, the Mattermost Web App marks any link external to its application as
target=_blank
, so that the application doesnâ€™t try to open it in the same window. Any other links should therefore be internal to the application.
We
deny
any sort of in-window navigation with the following exceptions: if the link is a
mailto:
link (which always opens the default mail program), OR if we are in the custom login flow.
Custom login flow
In order to facilitate logging into to the app using an external provider (e.g. Okta) in the same way that one would in the browser, we add an exception to the navigation flow that bypasses the
will-navigate
check.
When a user clicks on a login link that redirects them to a matching URL scheme (listed
here
), we will activate the custom login flow. The URL
MUST
still be internal to the application before we activate this flow, or any URL matching this pattern would allow the app to circumvent the navigation protection.
While the current window is in the custom login flow, all links that emit the
will-navigate
event will be allowed. Anything that opens a new window will still be restricted based on the rules for new windows. We leave the custom login flow once the app has navigated back to an URL internal to the application

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Process
Data Types: usage data
Purposes: Functionality, security
Stories:
1. We process usage data for Functionality. We process usage data for security..

Callstats
callStatsConfigParams
type: Object

The callstats initialize config params as described in the API here.

callStatsConfigParams: {
    disableBeforeUnloadHandler: true, // disables callstats.js's window.onbeforeunload parameter.
    applicationVersion: ""app_version"", // Application version specified by the developer.
    disablePrecalltest: true, // disables the pre-call test, it is enabled by default.
    siteID: ""siteID"", // The name/ID of the site/campus from where the call/pre-call test is made.
    additionalIDs: { // additionalIDs object, contains application related IDs.
        customerID: ""Customer Identifier. Example, walmart."",
        tenantID: ""Tenant Identifier. Example, monster."",
        productName: ""Product Name. Example, Jitsi."",
        meetingsName: ""Meeting Name. Example, Jitsi loves callstats."",
        serverName: ""Server/MiddleBox Name. Example, jvb-prod-us-east-mlkncws12."",
        pbxID: ""PBX Identifier. Example, walmart."",
        pbxExtensionID: ""PBX Extension Identifier. Example, 5625."",
        fqExtensionID: ""Fully qualified Extension Identifier. Example, +71 (US) +5625."",
        sessionID: ""Session Identifier. Example, session-12-34""
    },
    collectLegacyStats: true, //enables the collection of legacy stats in chrome browser
    collectIP: true //enables the collection localIP address
}

callStatsID
type: String

You must provide the Application ID to enable sending statistics to callstats.io

callStatsID: 'my-callstats-app-id'

callStatsSecret
type: String

You must provide the Secret to enable sending statistics to callstats.io

callStatsSecret: 'my-callstats-secret'

enableDisplayNameInStats
type: Boolean

Enables sending participants' display names to callstats.

enableDisplayNameInStats: false

enableEmailInStats
type: Boolean

Enables sending participants' emails (if available) to callstats and other analytics

enableEmailInStats: false

feedbackPercentage
type: Number

Controls the percentage of automatic feedback shown to participants when callstats is enabled. The default value is 100%. If set to 0, no automatic feedback will be requested

feedbackPercentage: 100


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\jitsi-meet\configurations.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
joinlemmy\Getting Started.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Account Basics
==============

* [Home](help)

Registration
---

Not all Friendica sites allow open registration.
If registration is allowed, you will see a ""Register"" link immediately below the login prompt on the site's home page.
Following this link will take you to the site registration page.
The strength of our network is that lots of different sites are all completely compatible with each other.
If the site you're visiting doesn't allow registration, or you think you might prefer another one, there is a [list of public servers here](https://dir.friendica.social/servers) and hopefully you will find one that meets your needs.

If you'd like to have your own server, you can do that too.
Visit [the Friendica website](http://friendi.ca/) to download the code with setup instructions.
It's a very simple installation process that anybody experienced in hosting websites, or with basic Linux experience can handle easily.

### OpenID

The first field on the Registration page is for an OpenID address.
If you do not have an OpenID address or do not wish to use OpenID, leave this field blank.
If you have an OpenID account elsewhere and wish to use it, enter the address into this field and click 'Register'.
Friendica will attempt to extract as much information as possible from your OpenID provider and return to this page with those items already filled in.

### Your Display Name

Please provide your display name **as you would like it to be displayed on this system**.
Some people use their real name for this, but you're under no obligation to do so yourself.

### Email Address

Please provide a valid email address.
Your email address is **never** published.
We need this to send you account information and your login details.
You may also occasionally receive notifications of incoming messages or items requiring your attention, but you have the possibility to completely disable these from your Settings page once you have logged in.
This doesn't have to be your primary email address, but it does need to be a real email address.
You can't get your initial password, or reset a lost password later without it.
This is the only bit of personal information that has to be accurate.

### Nickname

A nickname is used to generate web addresses for many of your personal pages, and is also treated like an email address when establishing communications with others.
Due to the way that the nickname is used, it has some limitations.
It must contain only US-ASCII text characters and numbers, and must also start with a text character.
It also must be unique on this system.
This is used in many places to identify your account, and once set it cannot be changed.


### Directory Publishing

The registration form also allows you to choose whether or not to list your account in the online directory of your node.
This is like a ""phone book"" and you may choose to be unlisted.
We recommend that you select 'Yes' so that other people (friends, family, etc.) will be able to find you.
If you choose 'No', you will essentially be invisible and have few opportunities for interaction.
Whichever you choose, this can be changed any time from your Settings page after you login.

### Register

Once you have provided the necessary details, click the 'Register' button.
An email will be sent to you providing your account login details.
Please check your email (including spam folders) for your registration details and initial password.

Login Page
---

On the 'Login' page, please enter your login information that was provided during registration.
You may use either your nickname or email address as a Login Name.

If you use your account to manage other accounts and these all have the same email address, please enter the nickname for the account you wish to manage.

If your account has been OpenID enabled, you may use your OpenID address as a login name and leave the password blank.
You will be redirected to your OpenID provider to complete your authorisation.

Otherwise, enter your password.
This will have been initially provided in your registration email message.
Your password is case-sensitive, so please check your 'Caps Lock' key if you are having difficulty logging in.

Changing Your Password
---

After your first login, please visit the 'Settings' page from the top menu bar and change your password to something that you will remember.

Getting Started
---

A link with ['Tips for New Members'](newmember) will show up on your network and home pages for two weeks providing key information for getting started.

Retrieving Personal Data
---

You can export a copy of your personal data in JSON format from the ""Export personal data"" link at the top of your settings page.

You need this file to relocate your Friendica account to another node.
This might be necessary, e.g. if your node suffers a severe hardware problem and is not recoverable.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Share, Process
Data Types: email address, account information
Purposes: account management, functionality
Stories:
1. We collect email address and account information for account management. We collect email address and account information for functionality. We share account information for functionality. We process email address and personal information for functionality. We process email address and account information for contact..

Getting Started
Choosing an Instance
If you are used to sites like Reddit, then Lemmy works in a fundamentally different way. Instead of a single website like reddit.com, there are many different websites (called instances). These are operated by different people, have different topics and rules. Nevertheless, posts created in one instance can directly be seen by users who are registered on another. Its basically like email, but for social media.

This means before using Lemmy and registering an account, you need to pick an instance. For this you can browse the instance list and look for one that matches your topics of interest. You can also see if the rules match your expectations, and how many users there are. It is better to avoid very big or very small instances. But don't worry too much about this choice, you can always create another account on a different instance later.

[instance list screenshot]

Registration
Once you choose an instance, it's time to create your account. To do this, click sign up in the top right of the page, or click the top right button on mobile to open a menu with sign up link.

[registration page screenshot]

On the signup page you need to enter a few things:

Username: How do you want to be called? This name can not be changed and is unique within an instance. Later you can also set a displayname which can be freely changed. If your desired username is taken, consider choosing a different instance where it is still available.
Email: Your email address. This is used for password resets and notifications (if enabled). Providing an email address is usually optional, but admins may choose to make it mandatory. In this case you will have to wait for a confirmation mail and click the link after completing this form.
Password: The password for logging in to your account. Make sure to choose a long and unique password which isn't used on any other website.
Verify password: Repeat the same password from above to ensure that it was entered correctly.
There are also a few optional fields, which you may need to fill in depending on the instance configuration:

Question/Answer: Instance admins can set an arbitrary question which needs to be answered in order to create an account. This is often used to prevent spam bots from signing up. After submitting the form, you will need to wait for some time until the answer is approved manually before you can login.
Code: A captcha which is easy to solve for humans but hard for bots. Enter the letters and numbers that you see in the text box, ignoring uppercase or lowercase. Click the refresh button if you are unable to read a character. The play button plays an audio version of the captcha.
Show NSFW content: Here you can choose if content that is ""not safe for work"" (or adult-only) should be shown.
When you are done, press the sign up button.

It depends on the instance configuration when you can login and start using the account. In case the email is mandatory, you need to wait for the confirmation email and click the link first. In case ""Question/Answer"" is present, you need to wait for an admin to manually review and approve your registration. If you have problems with the registration, try to get in contact with the admin for support. You can also choose a different instance to sign up if your primary choice does not work.

Following Communities
After logging in to your new account, its time to follow communities that you are interested in. For this you can click on the communities link at the top of the page (on mobile, you need to click the menu icon on the top right first). You will see a list of communities which can be filtered by subscribed, local or all. Local communities are those which are hosted on the same site where you are signed in, while all also contains federated communities from other instances. In any case you can directly subscribe to communities with the right-hand subscribe link. Or click on the community name to browse the community first, see what its posted and what the rules are before subscribing.

Another way to find communities to subscribe to is by going to the front page and browsing the posts. If there is something that interests you, click on the post title to see more details and comments. Here you can subscribe to the community in the right-hand sidebar, or by clicking the ""sidebar"" button on mobile.

These previous ways will only show communities that are already known to the instance. Especially if you joined a small or inactive Lemmy instance, there will be few communities to discover. You can find more communities by browsing different Lemmy instances, or using the Lemmy Explorer. When you found a community that you want to follow, enter its URL (e.g. https://feddit.org/c/main) or the identifier (e.g. !main@feddit.org) into the search field of your own Lemmy instance. Lemmy will then fetch the community from its original instance, and allow you to interact with it. The same method also works to fetch users, posts or comments from other instances.

Setting up Your Profile
Before you start posting, its a good idea to provide some details about yourself. Open the top-right menu and go to ""settings"". Here the following settings are available for your public profile:

Displayname: An alternative username which can be changed at any time
Bio: Long description of yourself, can be formatted with Markdown
Matrix User: Your username on the decentralized Matrix chat
Avatar: Profile picture that is shown next to all your posts
Banner: A header image for your profile page
On this page you can also change the email and password. Additionally there are many other settings available, which allow customizing of your browsing experience:

Blocks (tab at top of the page): Here you can block users and communities, so that their posts will be hidden.
Interface language: Which language the user interface should use.
Languages: Select the languages that you speak to see only content in these languages. This is a new feature and many posts don't specify a language yet, so be sure to select ""Undetermined"" to see them.
Theme: You can choose between different color themes for the user interface. Instance admins can add more themes.
Type: Which timeline you want to see by default on the front page; only posts from communities that you subscribe to, posts in local communities, or all posts including federated.
Sort type: How posts and comments should be sorted by default. See Votes and Ranking for details.
Show NSFW content: Whether or not you want to see content that is ""not safe for work"" (or adult-only).
Show Scores: Whether the number of upvotes and downvotes should be visible.
Show Avatars: Whether profile pictures of other users should be shown.
Bot Account: Enable this if you are using a script or program to create posts automatically
Show Bot Accounts: Disable this to hide posts that were created by bot accounts.
Show Read Posts: If this is disabled, posts that you already viewed are not shown in listings anymore. Useful if you want to find new content easily, but makes it difficult to follow ongoing discussion under existing posts.
Show Notifications for New Posts: Enable this to receive a popup notification for each new post that is created.
Send notifications to Email: Enable to receive notifications about new comment replies and private messages to your email address.
Start Posting
Finally its time to start posting! To do this it is always a good idea to read the community rules in the sidebar (below the Subscribe button). When you are ready, go to a post and type your comment in the box directly below for a top-level reply. You can also write a nested reply to an existing comment, by clicking the left-pointing arrow.

Other than commenting on existing posts, you can also create new posts. To do this, click the button Create a post in the sidebar. Here you can optionally supply an external link or upload an image. The title field is mandatory and should describe what you are posting. The body is again optional, and gives space for long texts. You can also embed additional images here. The Community dropdown below allows choosing a different community to post in. With NSFW, posts can be marked as ""not safe for work"". Finally you can specify the language that the post is written in, and then click on Create.

One more possibility is to write private messages to individual users. To do this, simply visit a user profile and click Send message. You will be notified about new private messages and comment replies with the bell icon in the top right.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\joinlemmy\Getting Started.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
koel\profile-preferences.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Getting Started
Choosing an Instance
If you are used to sites like Reddit, then Lemmy works in a fundamentally different way. Instead of a single website like reddit.com, there are many different websites (called instances). These are operated by different people, have different topics and rules. Nevertheless, posts created in one instance can directly be seen by users who are registered on another. Its basically like email, but for social media.

This means before using Lemmy and registering an account, you need to pick an instance. For this you can browse the instance list and look for one that matches your topics of interest. You can also see if the rules match your expectations, and how many users there are. It is better to avoid very big or very small instances. But don't worry too much about this choice, you can always create another account on a different instance later.

[instance list screenshot]

Registration
Once you choose an instance, it's time to create your account. To do this, click sign up in the top right of the page, or click the top right button on mobile to open a menu with sign up link.

[registration page screenshot]

On the signup page you need to enter a few things:

Username: How do you want to be called? This name can not be changed and is unique within an instance. Later you can also set a displayname which can be freely changed. If your desired username is taken, consider choosing a different instance where it is still available.
Email: Your email address. This is used for password resets and notifications (if enabled). Providing an email address is usually optional, but admins may choose to make it mandatory. In this case you will have to wait for a confirmation mail and click the link after completing this form.
Password: The password for logging in to your account. Make sure to choose a long and unique password which isn't used on any other website.
Verify password: Repeat the same password from above to ensure that it was entered correctly.
There are also a few optional fields, which you may need to fill in depending on the instance configuration:

Question/Answer: Instance admins can set an arbitrary question which needs to be answered in order to create an account. This is often used to prevent spam bots from signing up. After submitting the form, you will need to wait for some time until the answer is approved manually before you can login.
Code: A captcha which is easy to solve for humans but hard for bots. Enter the letters and numbers that you see in the text box, ignoring uppercase or lowercase. Click the refresh button if you are unable to read a character. The play button plays an audio version of the captcha.
Show NSFW content: Here you can choose if content that is ""not safe for work"" (or adult-only) should be shown.
When you are done, press the sign up button.

It depends on the instance configuration when you can login and start using the account. In case the email is mandatory, you need to wait for the confirmation email and click the link first. In case ""Question/Answer"" is present, you need to wait for an admin to manually review and approve your registration. If you have problems with the registration, try to get in contact with the admin for support. You can also choose a different instance to sign up if your primary choice does not work.

Following Communities
After logging in to your new account, its time to follow communities that you are interested in. For this you can click on the communities link at the top of the page (on mobile, you need to click the menu icon on the top right first). You will see a list of communities which can be filtered by subscribed, local or all. Local communities are those which are hosted on the same site where you are signed in, while all also contains federated communities from other instances. In any case you can directly subscribe to communities with the right-hand subscribe link. Or click on the community name to browse the community first, see what its posted and what the rules are before subscribing.

Another way to find communities to subscribe to is by going to the front page and browsing the posts. If there is something that interests you, click on the post title to see more details and comments. Here you can subscribe to the community in the right-hand sidebar, or by clicking the ""sidebar"" button on mobile.

These previous ways will only show communities that are already known to the instance. Especially if you joined a small or inactive Lemmy instance, there will be few communities to discover. You can find more communities by browsing different Lemmy instances, or using the Lemmy Explorer. When you found a community that you want to follow, enter its URL (e.g. https://feddit.org/c/main) or the identifier (e.g. !main@feddit.org) into the search field of your own Lemmy instance. Lemmy will then fetch the community from its original instance, and allow you to interact with it. The same method also works to fetch users, posts or comments from other instances.

Setting up Your Profile
Before you start posting, its a good idea to provide some details about yourself. Open the top-right menu and go to ""settings"". Here the following settings are available for your public profile:

Displayname: An alternative username which can be changed at any time
Bio: Long description of yourself, can be formatted with Markdown
Matrix User: Your username on the decentralized Matrix chat
Avatar: Profile picture that is shown next to all your posts
Banner: A header image for your profile page
On this page you can also change the email and password. Additionally there are many other settings available, which allow customizing of your browsing experience:

Blocks (tab at top of the page): Here you can block users and communities, so that their posts will be hidden.
Interface language: Which language the user interface should use.
Languages: Select the languages that you speak to see only content in these languages. This is a new feature and many posts don't specify a language yet, so be sure to select ""Undetermined"" to see them.
Theme: You can choose between different color themes for the user interface. Instance admins can add more themes.
Type: Which timeline you want to see by default on the front page; only posts from communities that you subscribe to, posts in local communities, or all posts including federated.
Sort type: How posts and comments should be sorted by default. See Votes and Ranking for details.
Show NSFW content: Whether or not you want to see content that is ""not safe for work"" (or adult-only).
Show Scores: Whether the number of upvotes and downvotes should be visible.
Show Avatars: Whether profile pictures of other users should be shown.
Bot Account: Enable this if you are using a script or program to create posts automatically
Show Bot Accounts: Disable this to hide posts that were created by bot accounts.
Show Read Posts: If this is disabled, posts that you already viewed are not shown in listings anymore. Useful if you want to find new content easily, but makes it difficult to follow ongoing discussion under existing posts.
Show Notifications for New Posts: Enable this to receive a popup notification for each new post that is created.
Send notifications to Email: Enable to receive notifications about new comment replies and private messages to your email address.
Start Posting
Finally its time to start posting! To do this it is always a good idea to read the community rules in the sidebar (below the Subscribe button). When you are ready, go to a post and type your comment in the box directly below for a top-level reply. You can also write a nested reply to an existing comment, by clicking the left-pointing arrow.

Other than commenting on existing posts, you can also create new posts. To do this, click the button Create a post in the sidebar. Here you can optionally supply an external link or upload an image. The title field is mandatory and should describe what you are posting. The body is again optional, and gives space for long texts. You can also embed additional images here. The Community dropdown below allows choosing a different community to post in. With NSFW, posts can be marked as ""not safe for work"". Finally you can specify the language that the post is written in, and then click on Create.

One more possibility is to write private messages to individual users. To do this, simply visit a user profile and click Send message. You will be notified about new private messages and comment replies with the bell icon in the top right.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Delete
Data Types: Email address,username, password
Purposes: Account management, Functionality, authenticate
Stories:
1. We collect Email Address, User name, password dor account management. We use Email address, User name, password for authentication .

Profile and Preferences
To manage your profile and preferences, click on your avatar in the bottom-right corner of the screen. From here, you can manage a couple aspects of your account:

Profile
To update your profile, you must first authenticate yourself by entering your current password. After that, you can update your name and email, and set a new password. Leaving the New Password field blank will keep your current password intact.

:::tip Pick a strong password Koel enforces a strong password policy. Make sure to pick a password that is at least 10 characters long and contains a mix of letters, numbers, and special characters. Your password will also be checked against a list of leaked passwords for extra security. :::

Custom Avatar
By default, Koel uses Gravatar to fetch your avatar based on your email address. By hovering over the avatar and clicking the icon, you can select an image file from your computer, crop it, and set it as your custom avatar. Remember to click Save for the change to take effect.

To remove your custom avatar and revert to using Gravatar, click the icon.

Themes
At the time of this writing, Koel comes with 17 themes built-in. You can activate a theme simply by clicking on it. The new theme will be applied immediately.

Theme selection

More themes are to be added in the future, along with the ability to create your own theme.

Preferences
Koel allows you to set a couple of preferences:

Whether playing a song should trigger continuous playback of the entire playlist, album, artist, or genre
Whether to show a notification whenever a new song starts playing
Whether to confirm before closing Koel’s browser tab
Whether to show a translucent, blurred overlay of the current album’s art
Whether to transcode music to a lower bitrate (mobile only, useful if you have a slow connection)
Whether to set your uploaded music as public by default
These preferences are saved immediately upon change and synced across all of your devices.

Service Integration Statuses
If your Koel installation is integrated with any external services, such as Last.fm or Spotify, you can see their statuses here along with the ability to connect or disconnect them when applicable.

QR Code Authentication
This tab displays a QR code that you can scan to log in to Koel Player on your phone without having to manually enter your credentials. The code refreshes every ten minutes, but you can also manually refresh it.

<script lang=""ts"" setup> import uploadIcon from '../assets/icons/upload.svg' import timesIcon from '../assets/icons/times.svg' </script>


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\koel\profile-preferences.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
lh-ehr\Direct_Messaging_README.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Edit on GitHub
Navigation
The Desktop App exercises relatively strict control over the userâ€™s ability to navigate through the web. This is done for a few reasons:
Security:
Since we expose certain Electron (and therefore NodeJS) APIs to the front-end application, we want to be in control of what scripts are run in the front-end. We make a concerted effort to lock down the exposed APIs to only what is necessary; however, to avoid any privacy or security breaches, itâ€™s best to avoid allowing the user to navigate to any page that isnâ€™t explicitly trusted.
User Experience:
Our application is ONLY designed to work with the Mattermost Web App and thus allowing the user to navigate to other places that are not the Web App is not a supported use case, and could create some undesirable effects.
Internal navigation
The Mattermost Web App is self-contained, with the majority of links provided by
react-router
and thus most navigation is handled by that module. However, in the Desktop App, we have a major feature that allows users to navigate between distinct tabs bound to the same server. There are two ways that this style of navigation happens in the Web App:
A user clicks on a link provided by the
react-router
Link
component
The application calls
browserHistory.push
directly within the Web App based on the user action
Both of these methods will make use of the
browserHistory
module within the Web App.
When one of the above methods is used, normally the Web App would update the browserâ€™s URL and change the state of the page. In the Desktop App, we instead send the arguments of the call to
browserHistory.push
up to the Electron Main Process. The information is received at the method
WindowManager.handleBrowserHistoryPush
, where we perform the following actions:
Clean the path name by removing any part of the serverâ€™s subpath pathname.
When the arguments are sent up to the Desktop App, it includes the subpath of the server hosting it.
As an example, if the server URL is
http://server-1.com/mattermost
, any path that is received will start with
/mattermost
and we will need to remove that component. The same would be true for any other path following the origin
http://server-1.com
.
Retrieve the view matching the path name
After removing the leading subpath (if applicable), we check to see if a portion of the path matches one of the other tabs, signally that we will need to switch to that tab.
For server
http://server-1.com/mattermost
, if the pathname is
/mattermost/boards/board1
, we would get the
Boards
view matching the server.
Display the correct view and send the cleaned path to its renderer process
We then explicitly display the new view if itâ€™s not currently in focus. If itâ€™s closed, we open it and load the corresponding URL with the provided path.
Exception
: If weâ€™re redirecting to the root of the application and the user is not logged in, it will generate an unnecessary refresh. In this case, we do not send the path name down.
External navigation
For the cases where a user wants to navigate away from the Web App to an external site, we generally want to direct the user outside of the Desktop App and have them open their default web browser and use the external site in that application.
In order to achieve this, we need to explicitly handle every other link and method of navigation that is available to an Electron renderer process. Fortunately, Electron provides a few listeners that help us with that:
will-navigate
is an event that fires when the URL is changed for a given renderer process. Attaching a listener for this event allows us to prevent the navigation if desired.
NOTE: The event will not fire for in-page navigations or updating
window.location.hash
.
did-start-navigation
is another renderer process event that will fire once the page has started navigating. We can use this event to perform any actions when a certain URL is visited.
new-window
is an event that will fire when the user tries to open a new window or tab. This commonly will fire when the user clicks on a link marked
target=_blank
. We attach this listener using the
setWindowOpenHandler
and will allow us to
allow
or
deny
the opening as we desire.
In our application, we define all of these listeners in the
webContentEvents
module, and we attach them whenever a new
webContents
object is create to make sure that all renderer processes are correctly secured and set up correctly.
New window handling
Our new window handler will
deny
the opening of a new Electron window if any of the following cases are true:
Malformed URL:
Depending on the case, it will outright ignore it (if the URL could not be parsed), or it will open the userâ€™s default browser if it is somehow invalid in another way.
Untrusted Protocol:
If the URL does not match an allowed protocol (allowed protocols include
http
,
https
, and any other protocol that was explicitly allowed by the user).
In this case, it will ask the user whether the protocol should be allowed, and if so will open the URL in the userâ€™s default application that corresponds to that protocol.
Unknown Site:
If the URL does not match the root of a configured server, it will always try to open the link in the userâ€™s default browser.
If the URL DOES match the root of a configured server, we still will deny the window opening for a few cases:
If the URL matches the public files route (
/api/v4/public/files/*
)
If the URL matches the image proxy route (
/api/v4/image/*
)
If the URL matches the help route (
/help/*
)
For these cases, we will open the link in the userâ€™s browser.
Deep Link Case
: If the URL doesnâ€™t match any of the above routes, but is still a valid configured server, we will generally treat is as the deep link cause, and will instead attempt to show the correct tab as well as navigate to the corresponding URL within the app.
There are two cases where we do allow the application to open a new window:
If the URL matches the
devtools:
protocol, so that we can open the Chrome Developer Tools.
If the URL is a valid configured server URL that corresponds to the plugins route (
/plugins/*
). In these cases we allow a single popup per tab to be opened for certain plugins to do things like OAuth (e.g. GitHub or JIRA).
Any other case will be automatically denied for security reasons.
Links within the same window
By default, the Mattermost Web App marks any link external to its application as
target=_blank
, so that the application doesnâ€™t try to open it in the same window. Any other links should therefore be internal to the application.
We
deny
any sort of in-window navigation with the following exceptions: if the link is a
mailto:
link (which always opens the default mail program), OR if we are in the custom login flow.
Custom login flow
In order to facilitate logging into to the app using an external provider (e.g. Okta) in the same way that one would in the browser, we add an exception to the navigation flow that bypasses the
will-navigate
check.
When a user clicks on a login link that redirects them to a matching URL scheme (listed
here
), we will activate the custom login flow. The URL
MUST
still be internal to the application before we activate this flow, or any URL matching this pattern would allow the app to circumvent the navigation protection.
While the current window is in the custom login flow, all links that emit the
will-navigate
event will be allowed. Anything that opens a new window will still be restricted based on the rules for new windows. We leave the custom login flow once the app has navigated back to an URL internal to the application

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Process
Data Types: usage data
Purposes: Functionality, security
Stories:
1. We process usage data for Functionality. We process usage data for security..


 
Direct Messaging with LibreEHR and EMR Direct phiMail(R)
Version 1.3, 19 Jul 2014

A. Purpose: To provide a secure method from within LibreEHR for sending/receiving 
protected health information to/from another Direct address using the Direct Project 
messaging standard, as a step toward the goal of satisfying the three MU2 criteria 
requiring the use of Direct messaging.  (For general information about Direct messaging, 
see http://www.emrdirect.com/about-directed-exchange-and-secure-direct-messaging.html)

B. IMPORTANT:  Please be aware of the following limitations when using the LibreEHR 
Direct Messaging features with PHI in a production environment:

1. the current code only supports a single shared ""group"" Direct Address for each LibreEHR 
installation. Note that this model is fully compliant with the Direct Project 
requirements for Direct messaging, but we may add additional models in the future 
should we determine that doing so would provide a higher degree of interoperability for 
LibreEHR users.

2. the current code only sends the CCR or CCD XML data that is already available in LibreEHR; 
these files as currently generated by existing LibreEHR code do not meet the requirements 
of the MU2 criteria, and the current CCD files do not pass strict CDA validation tests.

C. Problems Solved:

1. Patient-initiated transmission of clinical data from the Report section of the Patient 
Portal interface.

2. Provider-initiated transmission of clinical data from the Report section of the Patient 
pane in the main LibreEHR interface.

3. Log all data transmissions including date/time, patient, and whether transmission 
was initiated by the patient through the Patient Portal or by an LibreEHR user through the 
main interface.

4. Receive Direct messages from other sources.

D. How it Works:
Once configured, LibreEHR will interface with a phiMail Direct messaging server to complete the
required message transactions. The phiMail platform is described on the EMR Direct website, 
http://www.emrdirect.com and http://www.emrdirect.com/phimail-faq.html.

E. What you need before enabling Direct Messaging in LibreEHR:

1. Test Mode: Developers may request a complimentary test address at 
https://www.emrdirect.com/subscribe-developer  
Access to a sandbox server is available for testing and development purposes.

2. Production Mode: Healthcare provider users should begin by signing up for a production 
Direct messaging account with EMR Direct by registering at https://www.emrdirect.com/subscribe

Subscribers will receive the username, password, and server address information with which to 
configure LibreEHR.  

F. How to enable the Direct Messaging Features in LibreEHR:
Setup of phiMail Direct messaging Service is done in the Administration::Globals::Connectors 
tab

1. Check the ""Enable phiMail Direct Messaging Service"" checkbox.

2. Enter the Server Address, Username, and Password provided to you. The server address
will be of the form ""ssl://servername.example.com:32541"" - replace the hostname and port
with the values provided to you by EMR Direct. The Username is your Direct Address. Do not 
enter the server URL into your browser address bar, as this will not work.

3. Specify the LibreEHR user who will receive notification of new incoming Direct messages. 
Enter their LibreEHR username in the notification user field.

4. Specify the interval for automatic message checking; we suggest 5 or 10 minutes as a
starting point, but installations processing a large number of Direct messages may want a 
shorter interval. To disable automatic message checking through LibreEHR's background service
manager, set the interval to 0 (zero). Disabling automatic checking would be appropriate 
if message checking is managed through another mechanism, such as a system cron job.

5. Optionally check ""phiMail Allow CCD Send"" and/or ""phiMail Allow CCR Send"" to enable
the Transmit feature for these data types. If you do not select at least one of these,
LibreEHR will operate in a receive-only mode.

6. Click the ""Save"" button.

7. Confirm that a valid Notification Email Address is set in the Administration::
Globals::Notifications tab to receive error notifications from the Direct Messaging service.

8. Install the EMR Direct trust anchor certificate.  

Note: This is *not* your Direct certificate; it is the trust anchor for the SSL 
certificate issued to our servers, and is used only to validate the SSL certificate 
presented by the phiMail server on the other side of LibreEHR's connection.  Your Direct private
key and certificate are managed by the phiMail Server and are not installed in LibreEHR.
Your Direct certificate is made availabe for your review by EMR Direct, but you will not
need to install it anywhere.

For added security, the trust anchor for the phiMail Server should be installed in the LibreEHR 
installation tree at:

[installation_root]/sites/[site_id]/documents/phimail_server_pem/phimail_server.pem

This phimail_server_pem directory and its contents should be readable by the the 
webserver process, but only writable by trusted local users. The certificate file 
itself must be PEM encoded. You can identify a PEM encoded certificate file because 
it begins with the text ""-----BEGIN CERTIFICATE-----"". Although LibreEHR will connect 
to phiMail servers without installing this certificate, this is a required configuration 
step for all production  accounts to ensure that you are connecting to the correct 
server. You can obtain the correct certificate at the following URLs:

  a. Test accounts: http://certs.emrdirect.com/EMRDirectTestCA.crt
     Important: Don't forget to rename the file to phimail_server.pem and install it
     in the correct directory.

  b. Production accounts: https://www.phicert.com/certs/phiCertDirectRootCA.crt
     Important: The production root must be converted to PEM format as follows:
     $ openssl x509 -in phiCertDirectRootCA.crt -inform DER -out phimail_server.pem
     Don't forget to install phimail_server.pem in the correct directory. As an added
     security measure, please call us to confirm the thumbprint on this certificate.

G. Debugging background connections to the server.

You may review the connection activity to the server by Selecting Administration::Other::Logs,
selecting ""direct-message"" in the ""Name of events:"" drop-down menu, and clicking ""[Refresh]"".
If the background service is succesfully connecting, you will see ""message check completed""
events in the log as well as any message related entries (see below for instructions to
view more detailed message related status information). If you see no entries, make sure that
the background service is enabled (See F.4 above). If you see ""could not connect to server""
entries, each entry will also contain an error code:

  C1: phiMail is disabled in the global configuration. Fix: enable.
  C2: the phiMail server URL entered in the global configuration is invalid. Fix: Confirm
      the URL has been entered correctly. It should be of the form 
      ""ssl://server.example.com:32541"".
  C3: unable to create stream context. Fix: Usually this is because the server certificate 
      file installed in F.8 above is not the correct certificate or is in the wrong format.
  C4: failed to open connection. Fix: Confirm you Internet service and local DNS servers are
      online and your firewall is not blocking connections to the phiMail Server.

H. Checking the status and history of the Direct Messaging Service in LibreEHR:
Administrators may view the status of the service by Selecting Reports::Services::Background 
Services from the main LibreEHR left navigation bar. The ""View Log"" link on this page or 
Reports::Services::Direct Message Log will open the messaging history log showing each message 
sent or received and the current status of that message (Received, Sent, Delivery Confirmed, 
or Failed).

I. Note of message status messages: Receiving message status updates requires that Direct message
checking be enabled. When receiving messages, the phiMail back-end is fully compliant with the 
Direct messaging protocols to notify the sender and provide final delivery confirmation, but 
please note that  many other Direct providers do not yet support these features. If a message 
is sent to a recipient using one of these other systems, LibreEHR probably won't ever receive a 
final delivery confirmation for that message.

J. How to use the Direct Messaging Features in LibreEHR:

1. Sending:
When the phiMail Direct Messaging service is enabled, an additional ""Transmit"" button will
appear in the Continuity of Care Record (CCR) and/or Continuity of Care Document (CCD) block 
of the Reports section in both the Patient Portal and the Patient pane of the main provider 
interface. 

To transmit a CCR or CCD, first click the ""Transmit"" button. This will open a small dialog 
immediately below the button with a form field to enter the intended recipient's Direct Address. 
Clicking ""Transmit"" again will hide the dialog.

A Direct Address should have the same form as a regular email address, e.g. 
jonesclinic@direct.example.com. Enter the address in the field and click the ""Send"" button 
immediately to the right of the field. Only a single recipient may be specified in the field.
The Send button will be temporarily disabled while LibreEHR is communicating with the phiMail 
server. This will only work for properly-configured Direct addresses. Attempts to send to a 
regular email address or Direct address outside of our test mode ""trust sandbox"" will fail
during testing. Production accounts have wide interoperability with other Direct service
providers. Should you encounter a trust community with which LibreEHR does not interoperate,
please let us know at support@emrdirect.com.

LibreEHR will then display a status message immediately below the Address field, the 
success or failure of the message transmission, or an error message. If the message is
successfully submitted to the server, the Address field will be cleared to prevent accidental
re-transmission. If multiple recipients are required, the next recipient can now be entered.

If you receive an error message, it will be followed by an error code. For a discussion
of error codes beginning with the letter ""C"" please see section G above. Error codes
beginning with ""EC"" are listed here:

  EC 1: phiMail disabled in global configuration. Fix: enable.
  EC 4: authentication failure. Fix: The Username and Password entered in the
        global configuration must be corrected.
  EC 5: request to add text failed. Fix: Confirm total message length < 5MB.
  EC 6: problem sending the text. Fix: Confirm your local network connectivity is stable.
  EC 7: request to add clinical document failed. Fix: see EC 5.
  EC 8: problem sending the clinical document. Fix: see EC 6.

2. Receiving:
When the phiMail Direct Messaging service is enabled, and message checking is enabled either 
through the background services manager of another mechanism, LibreEHR will automatically process 
message status updates and new messages. Status updates will be reflected immediately in the 
Direct Messaging log. Additionally, if a ""Failed"" notification is received for a previously sent 
message, a regular email message will be generated to the Notification Email Address specified 
in the Notifications tab of the Global Settings panel (accessed by selecting Administration::
Globals from the main left navigation menu).

New Direct messages will be processed as follows. A new ""Patient Note"" will be generated and 
sent to the phiMail notification user specified in the Connectors tab of the Global settings. 
The patient note will contain information about the message, including any text at the beginning 
of the message from the sender. Any attachments (and any non-text content) will be automatically 
converted to separate LibreEHR Documents, which will be referenced in the new Patient Note.  
The Documents and the Patient Note are initially created without an assigned patient. 

At this time, the envisioned workflow is that the notification user will review the message text
and any included Documents to determine which patient the content belongs to and will then set the 
patient using the existing Patient Note interface for choosing a patient. Once the patient is sent, 
the Patient Note can be forwarded to another provider or staff member as appropriate using the 
existing forwarding mechanism for Patient Notes. The unassigned Documents can be viewed by Selecting 
Miscellaneous::New Documents from the main left navigation menu, which opens a Documents list. Once 
the specified document is opened, the user can optionally categorize the document and, when 
appropriate, assign the document to a specific patient using the ""Move to Patient #"" feature in the 
Documents interface.


Trademark Notice: phiMail is a registered trademark of EMR Direct.

Copyright (c) 2013-2014 EMR Direct.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\lh-ehr\Direct_Messaging_README.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
Mattermost_Architecture\Navigation.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Direct Messaging with LibreEHR and EMR Direct phiMail(R)
Version 1.3, 19 Jul 2014

A. Purpose: To provide a secure method from within LibreEHR for sending/receiving 
protected health information to/from another Direct address using the Direct Project 
messaging standard, as a step toward the goal of satisfying the three MU2 criteria 
requiring the use of Direct messaging.  (For general information about Direct messaging, 
see http://www.emrdirect.com/about-directed-exchange-and-secure-direct-messaging.html)

B. IMPORTANT:  Please be aware of the following limitations when using the LibreEHR 
Direct Messaging features with PHI in a production environment:

1. the current code only supports a single shared ""group"" Direct Address for each LibreEHR 
installation. Note that this model is fully compliant with the Direct Project 
requirements for Direct messaging, but we may add additional models in the future 
should we determine that doing so would provide a higher degree of interoperability for 
LibreEHR users.

2. the current code only sends the CCR or CCD XML data that is already available in LibreEHR; 
these files as currently generated by existing LibreEHR code do not meet the requirements 
of the MU2 criteria, and the current CCD files do not pass strict CDA validation tests.

C. Problems Solved:

1. Patient-initiated transmission of clinical data from the Report section of the Patient 
Portal interface.

2. Provider-initiated transmission of clinical data from the Report section of the Patient 
pane in the main LibreEHR interface.

3. Log all data transmissions including date/time, patient, and whether transmission 
was initiated by the patient through the Patient Portal or by an LibreEHR user through the 
main interface.

4. Receive Direct messages from other sources.

D. How it Works:
Once configured, LibreEHR will interface with a phiMail Direct messaging server to complete the
required message transactions. The phiMail platform is described on the EMR Direct website, 
http://www.emrdirect.com and http://www.emrdirect.com/phimail-faq.html.

E. What you need before enabling Direct Messaging in LibreEHR:

1. Test Mode: Developers may request a complimentary test address at 
https://www.emrdirect.com/subscribe-developer  
Access to a sandbox server is available for testing and development purposes.

2. Production Mode: Healthcare provider users should begin by signing up for a production 
Direct messaging account with EMR Direct by registering at https://www.emrdirect.com/subscribe

Subscribers will receive the username, password, and server address information with which to 
configure LibreEHR.  

F. How to enable the Direct Messaging Features in LibreEHR:
Setup of phiMail Direct messaging Service is done in the Administration::Globals::Connectors 
tab

1. Check the ""Enable phiMail Direct Messaging Service"" checkbox.

2. Enter the Server Address, Username, and Password provided to you. The server address
will be of the form ""ssl://servername.example.com:32541"" - replace the hostname and port
with the values provided to you by EMR Direct. The Username is your Direct Address. Do not 
enter the server URL into your browser address bar, as this will not work.

3. Specify the LibreEHR user who will receive notification of new incoming Direct messages. 
Enter their LibreEHR username in the notification user field.

4. Specify the interval for automatic message checking; we suggest 5 or 10 minutes as a
starting point, but installations processing a large number of Direct messages may want a 
shorter interval. To disable automatic message checking through LibreEHR's background service
manager, set the interval to 0 (zero). Disabling automatic checking would be appropriate 
if message checking is managed through another mechanism, such as a system cron job.

5. Optionally check ""phiMail Allow CCD Send"" and/or ""phiMail Allow CCR Send"" to enable
the Transmit feature for these data types. If you do not select at least one of these,
LibreEHR will operate in a receive-only mode.

6. Click the ""Save"" button.

7. Confirm that a valid Notification Email Address is set in the Administration::
Globals::Notifications tab to receive error notifications from the Direct Messaging service.

8. Install the EMR Direct trust anchor certificate.  

Note: This is *not* your Direct certificate; it is the trust anchor for the SSL 
certificate issued to our servers, and is used only to validate the SSL certificate 
presented by the phiMail server on the other side of LibreEHR's connection.  Your Direct private
key and certificate are managed by the phiMail Server and are not installed in LibreEHR.
Your Direct certificate is made availabe for your review by EMR Direct, but you will not
need to install it anywhere.

For added security, the trust anchor for the phiMail Server should be installed in the LibreEHR 
installation tree at:

[installation_root]/sites/[site_id]/documents/phimail_server_pem/phimail_server.pem

This phimail_server_pem directory and its contents should be readable by the the 
webserver process, but only writable by trusted local users. The certificate file 
itself must be PEM encoded. You can identify a PEM encoded certificate file because 
it begins with the text ""-----BEGIN CERTIFICATE-----"". Although LibreEHR will connect 
to phiMail servers without installing this certificate, this is a required configuration 
step for all production  accounts to ensure that you are connecting to the correct 
server. You can obtain the correct certificate at the following URLs:

  a. Test accounts: http://certs.emrdirect.com/EMRDirectTestCA.crt
     Important: Don't forget to rename the file to phimail_server.pem and install it
     in the correct directory.

  b. Production accounts: https://www.phicert.com/certs/phiCertDirectRootCA.crt
     Important: The production root must be converted to PEM format as follows:
     $ openssl x509 -in phiCertDirectRootCA.crt -inform DER -out phimail_server.pem
     Don't forget to install phimail_server.pem in the correct directory. As an added
     security measure, please call us to confirm the thumbprint on this certificate.

G. Debugging background connections to the server.

You may review the connection activity to the server by Selecting Administration::Other::Logs,
selecting ""direct-message"" in the ""Name of events:"" drop-down menu, and clicking ""[Refresh]"".
If the background service is succesfully connecting, you will see ""message check completed""
events in the log as well as any message related entries (see below for instructions to
view more detailed message related status information). If you see no entries, make sure that
the background service is enabled (See F.4 above). If you see ""could not connect to server""
entries, each entry will also contain an error code:

  C1: phiMail is disabled in the global configuration. Fix: enable.
  C2: the phiMail server URL entered in the global configuration is invalid. Fix: Confirm
      the URL has been entered correctly. It should be of the form 
      ""ssl://server.example.com:32541"".
  C3: unable to create stream context. Fix: Usually this is because the server certificate 
      file installed in F.8 above is not the correct certificate or is in the wrong format.
  C4: failed to open connection. Fix: Confirm you Internet service and local DNS servers are
      online and your firewall is not blocking connections to the phiMail Server.

H. Checking the status and history of the Direct Messaging Service in LibreEHR:
Administrators may view the status of the service by Selecting Reports::Services::Background 
Services from the main LibreEHR left navigation bar. The ""View Log"" link on this page or 
Reports::Services::Direct Message Log will open the messaging history log showing each message 
sent or received and the current status of that message (Received, Sent, Delivery Confirmed, 
or Failed).

I. Note of message status messages: Receiving message status updates requires that Direct message
checking be enabled. When receiving messages, the phiMail back-end is fully compliant with the 
Direct messaging protocols to notify the sender and provide final delivery confirmation, but 
please note that  many other Direct providers do not yet support these features. If a message 
is sent to a recipient using one of these other systems, LibreEHR probably won't ever receive a 
final delivery confirmation for that message.

J. How to use the Direct Messaging Features in LibreEHR:

1. Sending:
When the phiMail Direct Messaging service is enabled, an additional ""Transmit"" button will
appear in the Continuity of Care Record (CCR) and/or Continuity of Care Document (CCD) block 
of the Reports section in both the Patient Portal and the Patient pane of the main provider 
interface. 

To transmit a CCR or CCD, first click the ""Transmit"" button. This will open a small dialog 
immediately below the button with a form field to enter the intended recipient's Direct Address. 
Clicking ""Transmit"" again will hide the dialog.

A Direct Address should have the same form as a regular email address, e.g. 
jonesclinic@direct.example.com. Enter the address in the field and click the ""Send"" button 
immediately to the right of the field. Only a single recipient may be specified in the field.
The Send button will be temporarily disabled while LibreEHR is communicating with the phiMail 
server. This will only work for properly-configured Direct addresses. Attempts to send to a 
regular email address or Direct address outside of our test mode ""trust sandbox"" will fail
during testing. Production accounts have wide interoperability with other Direct service
providers. Should you encounter a trust community with which LibreEHR does not interoperate,
please let us know at support@emrdirect.com.

LibreEHR will then display a status message immediately below the Address field, the 
success or failure of the message transmission, or an error message. If the message is
successfully submitted to the server, the Address field will be cleared to prevent accidental
re-transmission. If multiple recipients are required, the next recipient can now be entered.

If you receive an error message, it will be followed by an error code. For a discussion
of error codes beginning with the letter ""C"" please see section G above. Error codes
beginning with ""EC"" are listed here:

  EC 1: phiMail disabled in global configuration. Fix: enable.
  EC 4: authentication failure. Fix: The Username and Password entered in the
        global configuration must be corrected.
  EC 5: request to add text failed. Fix: Confirm total message length < 5MB.
  EC 6: problem sending the text. Fix: Confirm your local network connectivity is stable.
  EC 7: request to add clinical document failed. Fix: see EC 5.
  EC 8: problem sending the clinical document. Fix: see EC 6.

2. Receiving:
When the phiMail Direct Messaging service is enabled, and message checking is enabled either 
through the background services manager of another mechanism, LibreEHR will automatically process 
message status updates and new messages. Status updates will be reflected immediately in the 
Direct Messaging log. Additionally, if a ""Failed"" notification is received for a previously sent 
message, a regular email message will be generated to the Notification Email Address specified 
in the Notifications tab of the Global Settings panel (accessed by selecting Administration::
Globals from the main left navigation menu).

New Direct messages will be processed as follows. A new ""Patient Note"" will be generated and 
sent to the phiMail notification user specified in the Connectors tab of the Global settings. 
The patient note will contain information about the message, including any text at the beginning 
of the message from the sender. Any attachments (and any non-text content) will be automatically 
converted to separate LibreEHR Documents, which will be referenced in the new Patient Note.  
The Documents and the Patient Note are initially created without an assigned patient. 

At this time, the envisioned workflow is that the notification user will review the message text
and any included Documents to determine which patient the content belongs to and will then set the 
patient using the existing Patient Note interface for choosing a patient. Once the patient is sent, 
the Patient Note can be forwarded to another provider or staff member as appropriate using the 
existing forwarding mechanism for Patient Notes. The unassigned Documents can be viewed by Selecting 
Miscellaneous::New Documents from the main left navigation menu, which opens a Documents list. Once 
the specified document is opened, the user can optionally categorize the document and, when 
appropriate, assign the document to a specific patient using the ""Move to Patient #"" feature in the 
Documents interface.


Trademark Notice: phiMail is a registered trademark of EMR Direct.

Copyright (c) 2013-2014 EMR Direct.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Share, Collect, Process
Data Types: Health data, address, usage data
Purposes: compliance, Functionality, security
Stories:
1. We share health data and address for compliance. We share health data and address for Functionality. We collect health data and address for complaince. We collect health data and address for functionality. We process health data, address and usage data for compliance. We process health data, address and usage data for functionality. We process health data, address and usage data for security..




Edit on GitHub
Navigation
The Desktop App exercises relatively strict control over the user’s ability to navigate through the web. This is done for a few reasons:
Security:
Since we expose certain Electron (and therefore NodeJS) APIs to the front-end application, we want to be in control of what scripts are run in the front-end. We make a concerted effort to lock down the exposed APIs to only what is necessary; however, to avoid any privacy or security breaches, it’s best to avoid allowing the user to navigate to any page that isn’t explicitly trusted.
User Experience:
Our application is ONLY designed to work with the Mattermost Web App and thus allowing the user to navigate to other places that are not the Web App is not a supported use case, and could create some undesirable effects.
Internal navigation
The Mattermost Web App is self-contained, with the majority of links provided by
react-router
and thus most navigation is handled by that module. However, in the Desktop App, we have a major feature that allows users to navigate between distinct tabs bound to the same server. There are two ways that this style of navigation happens in the Web App:
A user clicks on a link provided by the
react-router
Link
component
The application calls
browserHistory.push
directly within the Web App based on the user action
Both of these methods will make use of the
browserHistory
module within the Web App.
When one of the above methods is used, normally the Web App would update the browser’s URL and change the state of the page. In the Desktop App, we instead send the arguments of the call to
browserHistory.push
up to the Electron Main Process. The information is received at the method
WindowManager.handleBrowserHistoryPush
, where we perform the following actions:
Clean the path name by removing any part of the server’s subpath pathname.
When the arguments are sent up to the Desktop App, it includes the subpath of the server hosting it.
As an example, if the server URL is
http://server-1.com/mattermost
, any path that is received will start with
/mattermost
and we will need to remove that component. The same would be true for any other path following the origin
http://server-1.com
.
Retrieve the view matching the path name
After removing the leading subpath (if applicable), we check to see if a portion of the path matches one of the other tabs, signally that we will need to switch to that tab.
For server
http://server-1.com/mattermost
, if the pathname is
/mattermost/boards/board1
, we would get the
Boards
view matching the server.
Display the correct view and send the cleaned path to its renderer process
We then explicitly display the new view if it’s not currently in focus. If it’s closed, we open it and load the corresponding URL with the provided path.
Exception
: If we’re redirecting to the root of the application and the user is not logged in, it will generate an unnecessary refresh. In this case, we do not send the path name down.
External navigation
For the cases where a user wants to navigate away from the Web App to an external site, we generally want to direct the user outside of the Desktop App and have them open their default web browser and use the external site in that application.
In order to achieve this, we need to explicitly handle every other link and method of navigation that is available to an Electron renderer process. Fortunately, Electron provides a few listeners that help us with that:
will-navigate
is an event that fires when the URL is changed for a given renderer process. Attaching a listener for this event allows us to prevent the navigation if desired.
NOTE: The event will not fire for in-page navigations or updating
window.location.hash
.
did-start-navigation
is another renderer process event that will fire once the page has started navigating. We can use this event to perform any actions when a certain URL is visited.
new-window
is an event that will fire when the user tries to open a new window or tab. This commonly will fire when the user clicks on a link marked
target=_blank
. We attach this listener using the
setWindowOpenHandler
and will allow us to
allow
or
deny
the opening as we desire.
In our application, we define all of these listeners in the
webContentEvents
module, and we attach them whenever a new
webContents
object is create to make sure that all renderer processes are correctly secured and set up correctly.
New window handling
Our new window handler will
deny
the opening of a new Electron window if any of the following cases are true:
Malformed URL:
Depending on the case, it will outright ignore it (if the URL could not be parsed), or it will open the user’s default browser if it is somehow invalid in another way.
Untrusted Protocol:
If the URL does not match an allowed protocol (allowed protocols include
http
,
https
, and any other protocol that was explicitly allowed by the user).
In this case, it will ask the user whether the protocol should be allowed, and if so will open the URL in the user’s default application that corresponds to that protocol.
Unknown Site:
If the URL does not match the root of a configured server, it will always try to open the link in the user’s default browser.
If the URL DOES match the root of a configured server, we still will deny the window opening for a few cases:
If the URL matches the public files route (
/api/v4/public/files/*
)
If the URL matches the image proxy route (
/api/v4/image/*
)
If the URL matches the help route (
/help/*
)
For these cases, we will open the link in the user’s browser.
Deep Link Case
: If the URL doesn’t match any of the above routes, but is still a valid configured server, we will generally treat is as the deep link cause, and will instead attempt to show the correct tab as well as navigate to the corresponding URL within the app.
There are two cases where we do allow the application to open a new window:
If the URL matches the
devtools:
protocol, so that we can open the Chrome Developer Tools.
If the URL is a valid configured server URL that corresponds to the plugins route (
/plugins/*
). In these cases we allow a single popup per tab to be opened for certain plugins to do things like OAuth (e.g. GitHub or JIRA).
Any other case will be automatically denied for security reasons.
Links within the same window
By default, the Mattermost Web App marks any link external to its application as
target=_blank
, so that the application doesn’t try to open it in the same window. Any other links should therefore be internal to the application.
We
deny
any sort of in-window navigation with the following exceptions: if the link is a
mailto:
link (which always opens the default mail program), OR if we are in the custom login flow.
Custom login flow
In order to facilitate logging into to the app using an external provider (e.g. Okta) in the same way that one would in the browser, we add an exception to the navigation flow that bypasses the
will-navigate
check.
When a user clicks on a login link that redirects them to a matching URL scheme (listed
here
), we will activate the custom login flow. The URL
MUST
still be internal to the application before we activate this flow, or any URL matching this pattern would allow the app to circumvent the navigation protection.
While the current window is in the custom login flow, all links that emit the
will-navigate
event will be allowed. Anything that opens a new window will still be restricted based on the rules for new windows. We leave the custom login flow once the app has navigated back to an URL internal to the application


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\Mattermost_Architecture\Navigation.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
Monica\README.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Getting Started
Choosing an Instance
If you are used to sites like Reddit, then Lemmy works in a fundamentally different way. Instead of a single website like reddit.com, there are many different websites (called instances). These are operated by different people, have different topics and rules. Nevertheless, posts created in one instance can directly be seen by users who are registered on another. Its basically like email, but for social media.

This means before using Lemmy and registering an account, you need to pick an instance. For this you can browse the instance list and look for one that matches your topics of interest. You can also see if the rules match your expectations, and how many users there are. It is better to avoid very big or very small instances. But don't worry too much about this choice, you can always create another account on a different instance later.

[instance list screenshot]

Registration
Once you choose an instance, it's time to create your account. To do this, click sign up in the top right of the page, or click the top right button on mobile to open a menu with sign up link.

[registration page screenshot]

On the signup page you need to enter a few things:

Username: How do you want to be called? This name can not be changed and is unique within an instance. Later you can also set a displayname which can be freely changed. If your desired username is taken, consider choosing a different instance where it is still available.
Email: Your email address. This is used for password resets and notifications (if enabled). Providing an email address is usually optional, but admins may choose to make it mandatory. In this case you will have to wait for a confirmation mail and click the link after completing this form.
Password: The password for logging in to your account. Make sure to choose a long and unique password which isn't used on any other website.
Verify password: Repeat the same password from above to ensure that it was entered correctly.
There are also a few optional fields, which you may need to fill in depending on the instance configuration:

Question/Answer: Instance admins can set an arbitrary question which needs to be answered in order to create an account. This is often used to prevent spam bots from signing up. After submitting the form, you will need to wait for some time until the answer is approved manually before you can login.
Code: A captcha which is easy to solve for humans but hard for bots. Enter the letters and numbers that you see in the text box, ignoring uppercase or lowercase. Click the refresh button if you are unable to read a character. The play button plays an audio version of the captcha.
Show NSFW content: Here you can choose if content that is ""not safe for work"" (or adult-only) should be shown.
When you are done, press the sign up button.

It depends on the instance configuration when you can login and start using the account. In case the email is mandatory, you need to wait for the confirmation email and click the link first. In case ""Question/Answer"" is present, you need to wait for an admin to manually review and approve your registration. If you have problems with the registration, try to get in contact with the admin for support. You can also choose a different instance to sign up if your primary choice does not work.

Following Communities
After logging in to your new account, its time to follow communities that you are interested in. For this you can click on the communities link at the top of the page (on mobile, you need to click the menu icon on the top right first). You will see a list of communities which can be filtered by subscribed, local or all. Local communities are those which are hosted on the same site where you are signed in, while all also contains federated communities from other instances. In any case you can directly subscribe to communities with the right-hand subscribe link. Or click on the community name to browse the community first, see what its posted and what the rules are before subscribing.

Another way to find communities to subscribe to is by going to the front page and browsing the posts. If there is something that interests you, click on the post title to see more details and comments. Here you can subscribe to the community in the right-hand sidebar, or by clicking the ""sidebar"" button on mobile.

These previous ways will only show communities that are already known to the instance. Especially if you joined a small or inactive Lemmy instance, there will be few communities to discover. You can find more communities by browsing different Lemmy instances, or using the Lemmy Explorer. When you found a community that you want to follow, enter its URL (e.g. https://feddit.org/c/main) or the identifier (e.g. !main@feddit.org) into the search field of your own Lemmy instance. Lemmy will then fetch the community from its original instance, and allow you to interact with it. The same method also works to fetch users, posts or comments from other instances.

Setting up Your Profile
Before you start posting, its a good idea to provide some details about yourself. Open the top-right menu and go to ""settings"". Here the following settings are available for your public profile:

Displayname: An alternative username which can be changed at any time
Bio: Long description of yourself, can be formatted with Markdown
Matrix User: Your username on the decentralized Matrix chat
Avatar: Profile picture that is shown next to all your posts
Banner: A header image for your profile page
On this page you can also change the email and password. Additionally there are many other settings available, which allow customizing of your browsing experience:

Blocks (tab at top of the page): Here you can block users and communities, so that their posts will be hidden.
Interface language: Which language the user interface should use.
Languages: Select the languages that you speak to see only content in these languages. This is a new feature and many posts don't specify a language yet, so be sure to select ""Undetermined"" to see them.
Theme: You can choose between different color themes for the user interface. Instance admins can add more themes.
Type: Which timeline you want to see by default on the front page; only posts from communities that you subscribe to, posts in local communities, or all posts including federated.
Sort type: How posts and comments should be sorted by default. See Votes and Ranking for details.
Show NSFW content: Whether or not you want to see content that is ""not safe for work"" (or adult-only).
Show Scores: Whether the number of upvotes and downvotes should be visible.
Show Avatars: Whether profile pictures of other users should be shown.
Bot Account: Enable this if you are using a script or program to create posts automatically
Show Bot Accounts: Disable this to hide posts that were created by bot accounts.
Show Read Posts: If this is disabled, posts that you already viewed are not shown in listings anymore. Useful if you want to find new content easily, but makes it difficult to follow ongoing discussion under existing posts.
Show Notifications for New Posts: Enable this to receive a popup notification for each new post that is created.
Send notifications to Email: Enable to receive notifications about new comment replies and private messages to your email address.
Start Posting
Finally its time to start posting! To do this it is always a good idea to read the community rules in the sidebar (below the Subscribe button). When you are ready, go to a post and type your comment in the box directly below for a top-level reply. You can also write a nested reply to an existing comment, by clicking the left-pointing arrow.

Other than commenting on existing posts, you can also create new posts. To do this, click the button Create a post in the sidebar. Here you can optionally supply an external link or upload an image. The title field is mandatory and should describe what you are posting. The body is again optional, and gives space for long texts. You can also embed additional images here. The Community dropdown below allows choosing a different community to post in. With NSFW, posts can be marked as ""not safe for work"". Finally you can specify the language that the post is written in, and then click on Create.

One more possibility is to write private messages to individual users. To do this, simply visit a user profile and click Send message. You will be notified about new private messages and comment replies with the bell icon in the top right.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Delete
Data Types: Email address,username, password
Purposes: Account management, Functionality, authenticate
Stories:
1. We collect Email Address, User name, password dor account management. We use Email address, User name, password for authentication .

Document your life
Docker pulls Lines of code Code coverage License

Docs - Bug report

Monica is an open source personal relationship management system, that lets you document your life.
Warning

This branch is in development. It’s our beta version.

If you want to browse the stable and current version, see the 4.x branch.

Table of contents
Introduction
Features
Who is it for?
What Monica isn’t
Contribute
Contribute as a community
Contribute as a developer
Principles, vision, goals and strategy
Principles
Vision
Goals
Why Open Source?
Patreon
Contact
Team
Thank you, open source
License
Introduction
Monica is an open-source web application that enables you to document your life, organize, and log your interactions with your family and friends. We call it a PRM, or Personal Relationship Management. Imagine a CRM—a commonly used tool by sales teams in the corporate world—for your friends and family.

Features
Add and manage contacts
Define relationships between contacts
Reminders
Automatic reminders for birthdays
Ability to add notes to a contact
Ability to record how you met someone
Management of activities with a contact
Management of tasks
Management of addresses and all the different ways to contact someone
Management of contact field types
Management of a contact’s pets
Top of the art diary to keep track of what’s happening in your life
Ability to record how your day went
Upload documents and photos
Ability to define custom genders
Ability to define custom activity types
Ability to favorite contacts
Multiple vaults and users
Labels to organize contacts
Ability to define what section should appear on the contact sheet
Multiple currencies
Translated in 27 languages
Who is it for?
This project is for people who want to document their lives and those who have difficulty remembering details about the lives of people they care about.

We’ve also had a lot of positive reviews from people with Asperger syndrome, Alzheimer’s disease, and introverts who use our app every day.

What Monica isn’t
Monica is not a social network and it never will be. It’s not meant to be social. It’s designed to be the opposite: it’s for your eyes only.
Monica is not a smart assistant. It won’t guess what you want to do. It’s actually pretty dumb: it will only send you emails for the things you asked to be reminded of.
Monica does not have built-in AI with integrations like ChatGPT.
Monica is not a tool that will scan your data and do nasty things with it. It’s your data, your server, do whatever you want with it. You’re in control of your data.
Contribute
Do you want to lend a hand? That’s great! We accept contributions from everyone, regardless of form.

Here are some of the things you can do to help.

Contribute as a community
Unlike Fight Club, the best way to help is to actually talk about Monica as much as you can in blog posts and articles, or on social media.
You can answer questions in the issue tracker to help other community members.
You can financially support Monica’s development on Patreon or by subscribing to a paid account.
Contribute as a developer
Read our Contribution Guide.
Install the developer version locally so you can start contributing.
Look for issues labelled ‘Bugs’ if you are looking to have an immediate impact on Monica.
Look for issues labelled ‘Help Wanted’. These are issues that you can solve relatively easily.
Look for issues labelled ’Good First Issue’. These issues are for people who want to contribute, but try to work on a small feature first.
If you are an advanced developer, you can try to tackle issues labelled ‘Feature Requests’. These are harder to do and will require a lot of back-and-forth with the repository administrator to make sure we are going to the right direction with the product.
Principles, vision, goals and strategy
We want to use technology in a way that does not harm human relationships, unlike big social networks.

Principles
Monica has a few principles.

It should help improve relationships.
It should be simple to use, simple to contribute to, simple to understand, extremely simple to maintain.
It is not a social network and never will be.
It is not and never will be ad-supported.
Users are not and never will be tracked.
It should be transparent.
It should be open-source.
It should do one thing (documenting your life) extremely well, and nothing more.
It should be well documented.
Vision
Monica’s vision is to help people have more meaningful relationships.

Goals
We want to provide a platform that is:

really easy to use: we value simplicity over anything else.
open-source: we believe everyone should be able to contribute to this tool, and see for themselves that nothing nasty is done behind the scenes that would go against the best interests of the users. We also want to leverage the community to build attractive features and do things that would not be possible otherwise.
easy to contribute to: we want to keep the codebase as simple as possible. This has two big advantages: anyone can contribute, and it’s easily maintainable on the long run.
available everywhere: Monica should be able to run on any desktop OS or mobile phone easily. This will be made possible by making sure the tool is easily installable by anyone who wants to either contribute or host the platform themselves.
Why Open Source?
Why is Monica open source? Is it risky? Could someone steal my code and use it to start a for-profit business that could hurt my own? Why reveal our strategy to the world? We’ve already received these kinds of questions in our emails.

The answer is simple: yes, you can fork Monica and create a competing project, make money from it (even if the license is not ideal for that) and we won’t be aware. But that’s okay, we don’t mind.

We wanted to open source Monica for several reasons:

We believe that this tool can really change people’s lives. We aim to make money from this project, but also want everyone to benefit. Open sourcing it will help Monica become much bigger than we imagine. We believe the software should follow our vision, but we must be humble enough to recognize that ideas come from everywhere and people may have better ideas than us.
You can’t make something great alone. While Monica could become a company and hire a bunch of super smart people to work on it, you can’t beat the manpower of an entire community. Open sourcing the product means bugs will be fixed faster, features will be developed faster, and more importantly, developers will be able to contribute to a tool that positively changes their own lives and the lives of other people.
Doing things in a transparent way leads to formidable things. People respect the project more when they can see how it’s being worked on. You can’t hide nasty things in the code. You can’t do things behind the backs of your users. Doing everything in the open is a major driving force that motivates you to keep doing what’s right.
Once you’ve created a community of passionate developers around your project, you’ve won. Developers are powerful influencers: they create apps, discuss your product on forums, and share it with their networks. Nurture your relationship with developers – users will follow.
Patreon
You can support the development of Monica on Patreon. Thanks for your help.

Contact
Team
Our team is made of two core members:

Regis (djaiss)
Alexis Saettler (asbiin)
We are also fortunate to have an amazing community of developers who help us greatly.

Thank you, open source
Monica makes use of numerous open-source projects and we are deeply grateful. We hope that by offering Monica as a free, open-source project, we can help others in the same way these programs have helped us.

License
Copyright © 2016–2023

Licensed under the AGPL License.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\Monica\README.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
openMRS\Architecture.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Edit on GitHub
Navigation
The Desktop App exercises relatively strict control over the userâ€™s ability to navigate through the web. This is done for a few reasons:
Security:
Since we expose certain Electron (and therefore NodeJS) APIs to the front-end application, we want to be in control of what scripts are run in the front-end. We make a concerted effort to lock down the exposed APIs to only what is necessary; however, to avoid any privacy or security breaches, itâ€™s best to avoid allowing the user to navigate to any page that isnâ€™t explicitly trusted.
User Experience:
Our application is ONLY designed to work with the Mattermost Web App and thus allowing the user to navigate to other places that are not the Web App is not a supported use case, and could create some undesirable effects.
Internal navigation
The Mattermost Web App is self-contained, with the majority of links provided by
react-router
and thus most navigation is handled by that module. However, in the Desktop App, we have a major feature that allows users to navigate between distinct tabs bound to the same server. There are two ways that this style of navigation happens in the Web App:
A user clicks on a link provided by the
react-router
Link
component
The application calls
browserHistory.push
directly within the Web App based on the user action
Both of these methods will make use of the
browserHistory
module within the Web App.
When one of the above methods is used, normally the Web App would update the browserâ€™s URL and change the state of the page. In the Desktop App, we instead send the arguments of the call to
browserHistory.push
up to the Electron Main Process. The information is received at the method
WindowManager.handleBrowserHistoryPush
, where we perform the following actions:
Clean the path name by removing any part of the serverâ€™s subpath pathname.
When the arguments are sent up to the Desktop App, it includes the subpath of the server hosting it.
As an example, if the server URL is
http://server-1.com/mattermost
, any path that is received will start with
/mattermost
and we will need to remove that component. The same would be true for any other path following the origin
http://server-1.com
.
Retrieve the view matching the path name
After removing the leading subpath (if applicable), we check to see if a portion of the path matches one of the other tabs, signally that we will need to switch to that tab.
For server
http://server-1.com/mattermost
, if the pathname is
/mattermost/boards/board1
, we would get the
Boards
view matching the server.
Display the correct view and send the cleaned path to its renderer process
We then explicitly display the new view if itâ€™s not currently in focus. If itâ€™s closed, we open it and load the corresponding URL with the provided path.
Exception
: If weâ€™re redirecting to the root of the application and the user is not logged in, it will generate an unnecessary refresh. In this case, we do not send the path name down.
External navigation
For the cases where a user wants to navigate away from the Web App to an external site, we generally want to direct the user outside of the Desktop App and have them open their default web browser and use the external site in that application.
In order to achieve this, we need to explicitly handle every other link and method of navigation that is available to an Electron renderer process. Fortunately, Electron provides a few listeners that help us with that:
will-navigate
is an event that fires when the URL is changed for a given renderer process. Attaching a listener for this event allows us to prevent the navigation if desired.
NOTE: The event will not fire for in-page navigations or updating
window.location.hash
.
did-start-navigation
is another renderer process event that will fire once the page has started navigating. We can use this event to perform any actions when a certain URL is visited.
new-window
is an event that will fire when the user tries to open a new window or tab. This commonly will fire when the user clicks on a link marked
target=_blank
. We attach this listener using the
setWindowOpenHandler
and will allow us to
allow
or
deny
the opening as we desire.
In our application, we define all of these listeners in the
webContentEvents
module, and we attach them whenever a new
webContents
object is create to make sure that all renderer processes are correctly secured and set up correctly.
New window handling
Our new window handler will
deny
the opening of a new Electron window if any of the following cases are true:
Malformed URL:
Depending on the case, it will outright ignore it (if the URL could not be parsed), or it will open the userâ€™s default browser if it is somehow invalid in another way.
Untrusted Protocol:
If the URL does not match an allowed protocol (allowed protocols include
http
,
https
, and any other protocol that was explicitly allowed by the user).
In this case, it will ask the user whether the protocol should be allowed, and if so will open the URL in the userâ€™s default application that corresponds to that protocol.
Unknown Site:
If the URL does not match the root of a configured server, it will always try to open the link in the userâ€™s default browser.
If the URL DOES match the root of a configured server, we still will deny the window opening for a few cases:
If the URL matches the public files route (
/api/v4/public/files/*
)
If the URL matches the image proxy route (
/api/v4/image/*
)
If the URL matches the help route (
/help/*
)
For these cases, we will open the link in the userâ€™s browser.
Deep Link Case
: If the URL doesnâ€™t match any of the above routes, but is still a valid configured server, we will generally treat is as the deep link cause, and will instead attempt to show the correct tab as well as navigate to the corresponding URL within the app.
There are two cases where we do allow the application to open a new window:
If the URL matches the
devtools:
protocol, so that we can open the Chrome Developer Tools.
If the URL is a valid configured server URL that corresponds to the plugins route (
/plugins/*
). In these cases we allow a single popup per tab to be opened for certain plugins to do things like OAuth (e.g. GitHub or JIRA).
Any other case will be automatically denied for security reasons.
Links within the same window
By default, the Mattermost Web App marks any link external to its application as
target=_blank
, so that the application doesnâ€™t try to open it in the same window. Any other links should therefore be internal to the application.
We
deny
any sort of in-window navigation with the following exceptions: if the link is a
mailto:
link (which always opens the default mail program), OR if we are in the custom login flow.
Custom login flow
In order to facilitate logging into to the app using an external provider (e.g. Okta) in the same way that one would in the browser, we add an exception to the navigation flow that bypasses the
will-navigate
check.
When a user clicks on a login link that redirects them to a matching URL scheme (listed
here
), we will activate the custom login flow. The URL
MUST
still be internal to the application before we activate this flow, or any URL matching this pattern would allow the app to circumvent the navigation protection.
While the current window is in the custom login flow, all links that emit the
will-navigate
event will be allowed. Anything that opens a new window will still be restricted based on the rules for new windows. We leave the custom login flow once the app has navigated back to an URL internal to the application

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Process
Data Types: usage data
Purposes: Functionality, security
Stories:
1. We process usage data for Functionality. We process usage data for security..


Architecture
This chapter contains an in-depth view of the architecture of the system. If you don't understand everything on the first reading, don't fret! Understanding how the basic system fits together is the most important thing you need for now.

#Technical Overview
OpenMRS is a framework built upon Java and other related frameworks. It is based on a modular architecture which consists of a core application and optional modules which provide additional functionality to the core workflows.


The key architectural components of the OpenMRS core can be depicted as follows:

An Overview of OpenMRS
An Overview of OpenMRS
The backbone of OpenMRS lies in its core API. The OpenMRS API has methods for all of the basic functions such as adding/updating a patient, encounter, observation, etc. Methods which enable this functionality are provided in service layer classes.

#The Source Code Structure
In OpenMRS framework and modules, there are different levels in the code architecture. The OpenMRS source code is divided into three main segments:

The User Interface (presentation)
The Service Layer
The Data Access layer
This layering isolates various system responsibilities from one another, to improve both system development and maintenance.

#The Data Access layer

The Data Access layer is an abstraction layer from the actual data model and its changes. It uses Hibernate as the Object Relational mapping tool, and Liquibase to manage relational database changes in a database-independent way.


The relationships between our domain objects and database tables are mapped using a mixture of Hibernate annotations and XML mapping files. The data access layer is exposed to the service layer through interfaces, thereby shielding it from implementation details such as which object relational mapping tool is being used. see openmrs DataModel at openmrs university

#The Service layer
The Service layer is responsible for managing the business logic of the application. It is built around the Spring framework. The OpenMRS service layer classes make extensive use of the Spring framework for a number of tasks including the following:

Spring Aspect Oriented Programming (AOP) is used to provide separate cross cutting functions (for example: authentication, logging).
Spring Dependency Injection (DI) is used to provide dependencies between components.
Spring is used to manage transactions in between service layer classes


#User Interface layer
The User Interface layer for the legacy application is built upon Spring MVC, Direct Web Remoting (DWR), JSP and JavaScript. DWR is used for AJAX functionality and it provides the mapping between our Java objects and methods to JavaScript objects and methods respectively. JQuery is used to simplify the interactions with Javascript and the browser. Spring MVC is used to provide the Model-View-Controller design pattern. Our domain objects serve as the Model. We have a mixture of controllers that subclass Spring's SimpleFormControllers and those which use Spring's @Controller annotation. For the new reference application user interface, we no longer use Spring MVC, DWR or JSP, but heavily use Groovy, JQuery, AngularJS, and more.

#The Modular Architecture
At the heart of OpenMRS is a custom module framework which lets you extend and modify the default functionality of the OpenMRS core in accordance to your needs. Modules are also structured like the OpenMRS core, and consist of user interface, data access and service layers.

Some OpenMRS functionality is pulled out into modules instead of being written into the core application. This allows users to upgrade the content in those modules without having to wait for the next OpenMRS release. Currently, the only core module used in OpenMRS is the Logic Module.

#Associated Frameworks and Technology Stacks
#Hibernate
Hibernate is the object-relational mapping library used by OpenMRS. It allows users to describe the relationship between database tables and domain objects using xml configuration files or Java annotations.

Hibernate is also useful in managing dependencies between classes. As an example, the concept domain in the data model consists of tables named concept, concept_answer, concept_set and concept_name. It would be very difficult to keep up with where to store each part of the concept object and the relations between them if a user decides to update each table individually. However, using Hibernate, developers only need to concern themselves with the Concept object, and not the tables behind that object. The concept.hbm.xml mapping file does the work of knowing that the Concept object contains a collection of ConceptSet objects, a collection of ConceptName objects, etc.

However, also note that Hibernate enforces lazy loading - it will not load all associated objects until they are needed. For this reason, you must either fetch/save/manipulate your object in the same session (between one open/closeSession) or you must hydrate all object collections in the object by calling the getters (getConceptAnswers, getConceptNames, getSynonyms, etc).

#Spring MVC
OpenMRS strongly subscribes to the Model-View-Controller pattern. Most controllers included in the OpenMRS core will be SimpleFormControllers and be placed in the org.openmrs.web.controller package. However, some controllers have been rewritten to use Spring 2.5+ annotations, and we recommend that you use these in the future. The model is set up in the controller's formBackingObject, and processed/saved in the processFormSubmission and onSubmit methods. The jsp views are placed in /web/WEB-INF/view.

Furthermore, not all files served by the webapp are run through Spring. The /web/WEB-INF/web.xml file maps certain web page extensions to the SpringController. All *.form, *.htm, and *.list pages are mapped. The SpringController then uses the mappings in the openmrs-servlet.xml file to know which pages are mapping to which Controller.

There are no jsp pages that are accessed directly. If a page's url is /admin/patients/index.htm, the jsp will actually reside in /web/WEB-INF/view/admin/patients/index.jsp. This is necessary so that we can do the redirect with the SpringController. Because the file being accessed ends with .htm, the SpringController is invoked by the web server. When the SpringController sees the url, it simply replaces .htm with .jsp and looks for the file in /web/WEB-INF/view/ according to the jspViewResolver bean in openmrs-servlet.xml. If the page being accessed was patient.form, the mapping in the urlMapping bean would have told spring to use the PatientFormController and the patientForm.jsp file.

#Authentication and Authorization

OpenMRS has a very granulated permissions system. Every action is associated with a Privilege, which in turn can be grouped into Roles. Examples of such privileges are ""Add Patient"", ""Update Patient"", ""Delete Patient"", ""Add Concept"", ""Update Concept"", and more. A Role can also point to a list of inherited roles. The role inherits all privileges from that inherited role. In this way, hierarchies of roles are possible. A User contains only a collection of Roles, not Privileges. These privileges are enforced in the service layer using AOP annotations. In a way, this also enssures Confidentiality of patients' Data by putting restrictions on the data Access.


#Build Management
OpenMRS uses Apache Maven for build management of the OpenMRS core and modules.

All information regarding the module being built, its dependencies on other external modules and components, the build order, directories, and required plug-ins are stored in the modules' pom.xml file.

Following release, these build artifacts are uploaded and maintained in a maven repository manager. A maven repository manager is used for this purpose due to a number of advantages that it provides. These advantages include:

Faster and more reliable builds
Improved collaboration
Component usage visibility
Enforcement of component standards
The Maven Repository used by OpenMRS is SonaType Nexus, which can be accessed at http://mavenrepo.openmrs.org/nexus/.
Artifacts maintained in the OpenMRS repository are:
#Releases
Maven built releases (1.8.0 and later)
Ant built releases (1.5.0 up to 1.7.X)
#Snapshots
Maven development versions
#Modules
Module releases
#3rd Party Artifacts
Libraries not found in other Maven repositories (HAPI)
Modified libraries (DWR, Hibernate, Liquibase, Simple XML)
Custom Maven plugins (OpenMRS omod plugin)
#Summary
As you read the next section, keep in mind the important parts from this chapter:

OpenMRS consists of a core system, with a modular architecture to extend its functionality.
There are three main layers to the system: User Interface (Presentation), Service Layer and Data Access Layer.
OpenMRS makes extensive use of a number of frameworks including Spring and Hibernate.
We use Apache Maven for build management, JIRA for issue management and Github for version control.
Authentication/Authorisation is ensured by grouping different priviledges into roles which then are assigned to defined users and in turn it ensures the confidentiality of patients data and security of the system.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\openMRS\Architecture.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
OpenTracks\data-structure.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
This page was a draft. See
{#s    
TracDev/DatabaseSchema/NotificationSystem
page now.
The
Open questions
section might still contain unimplemented ideas.
Table
notify_subscription
Table
notify_watch
Open Questions
Trac Database Schema: Notification
The
TracNotification
module stores notification event subscriptions in the database.
Table
notify_subscription
Table
Key
notify_subscription
id
Columns
Type
Notes
id
auto_increment
time
int64
changetime
int64
class
The name of the Python class that stored this subscription.
sid
The
session
ID of the subscriber.
authenticated
int
1
for authenticated session IDs,
0
for anonymous session IDs
distributor
Identifies the distributor to used for this subscription (e.g.
email
)
format
Identifies the MIME type to be used for this subscription (e.g.
text/plain
or
text/html
)
priority
int
Precedence level of this subscription. E.g.
1
overrules
2
.
adverb
always
or
never
Indices
sid
,
authenticated
class
Stores if a subscription rule always/never applies for a certain user, at what priority and using what distribution method/format.
Use the
trac.notification.model.Subscription
model class to access this table.
Note that this table does not store an (email) address, but the commonly used subscription tuple has an additional item
addr
. Usually such tuples that correspond to entries in this DB table contain a
addr
of
None
. Other tuples may contain an (email) address (e.g. retrieved from  a ticket CC field) but are missing the
sid
item instead.
See
trac.notification.model.Subscription
â€‹
Table
notify_watch
Table
Key
notify_watch
id
Columns
Type
Notes
id
auto_increment
sid
The session ID of the subscriber.
authenticated
int
1
for authenticated session IDs,
0
for anonymous session IDs
class
The name of the Python class that stored this watch.
realm
The realm of this subscription (e.g.
ticket
).
target
The target of this subscription (e.g. a ticket id).
Indices
sid
,
authenticated
,
class
class
,
realm
,
target
Stores watches to identify the target resource(s) of a subscription (e.g. a watched ticket's id, wiki page filters, joined groups, etc.)
Use the
trac.notification.model.Watch
model class to access this table.
See
trac.notification.model.Watch
â€‹
Open Questions
Rename
class
column?
Something like
rule
might be more appropriate.
See also
INotificationSubscriber
.
Rename
distributor
column?
transport
might be more consistent.
Rename tables?
The current table names are taken from the
â€‹
th:AnnouncerPlugin
.
Would this cause problems for users that already used that plugin?
DONE
Renamed
subscription
to
notify_subscription
.
DONE
Renamed
subscription_attribute
to
notify_watch
.
Remove
time
and
changetime
columns?
These are not really needed.
/}

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Collect, Use
Data Types: Email, Usage Data, Email, Usage Data
Purposes: Functionality, Authentication, Functionality, Authentication
Stories:
1. We collect Email and Usage Data for functionality. We collect Email and usage data for authentication..


@startuml
class Track {
    -id
    -name
    -description
    -category
    -numberOfPoints
    -icon
}
Track o-- TrackPoint
Track o-- Marker
Track ""1"" - ""1"" TrackStatistics

class TrackStatistics {
    - startTime
    - stopTime
    - totalDistance
    - totalTime
    - movingTime
    - maxSpeed
    - totalGain
}

class TrackStatisticsUpdater {
}

TrackStatisticsUpdater ..> TrackStatistics : creates/updates
TrackStatisticsUpdater ..> TrackPoint : uses

class TrackPoint {
    - id (database id, order)
    - type
    - trackId
    - longitude
    - latitude
    - time
    - altitude
    - accuracy
    - speed
    - bearing
    - sensor_heartrate
    - sensor_cadence
    - sensor_power
}

class Marker {
    - id
    - trackId
    - name
    - description
    - category
    - icon
    - length
    - duration
    - longitude
    - latitude
    - photoUrl
}

class DataField {
    - key
    - title
    - isVisible
    - isPrimary
    - isWide
}

class StatisticData {
    - value
    - unit
    - description
}
StatisticData o-- DataField

class Layout {
    - profile
}
Layout ""1"" o-- ""many"" DataField

note left of TrackPoint
As of OpenTracks version 3.15.0, all times are using device time.
Before that TrackPoint.time contained GPS time (determined by GPS hardware).
However, start/pause/stop events (also stored as TrackPoints) used device time.
end note

note right of Track
A track is an ordered collection of one or more segments (i.e., continuous parts of distance covered).
Segments may be started by a user (i.e., start a track recording, continue a paused track, or resume a track) as well as stopped by the user (i.e., pausing or stopping a recording).
Also segments may started automatically while recording (i.e., distance to previous location was to large).
Note that this finishes the previous segment.

Segment data is stored as TrackPoints (Type.SEGMENT_START_MANUAL, Type.SEGMENT_START_AUTOMATIC, or Type.SEGMENT_END_MANUAL).
Trackpoints with Type.SEGMENT_START_AUTOMATIC also mark the end of the previous segment.
All TrackPoints of Type.TRACKPOINT belong to the segment started by the prior TrackPoint with Type.SEGMENT_START_(MANUAL|AUTOMATIC).
Trackpoints of Type.SEGMENT_START_MANUAL or Type.SEGMENT_END_MANUAL do not contain location data or sensor data.

Tracks recorded prior to OpenTracks version 3.15.0, do neither begin with a Type.SEGMENT_START_MANUAL nor end with a Type.SEGMENT_END_MANUAL.
end note
@enduml


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\OpenTracks\data-structure.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",2.0
peertube\managing-users.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Getting Started
Choosing an Instance
If you are used to sites like Reddit, then Lemmy works in a fundamentally different way. Instead of a single website like reddit.com, there are many different websites (called instances). These are operated by different people, have different topics and rules. Nevertheless, posts created in one instance can directly be seen by users who are registered on another. Its basically like email, but for social media.

This means before using Lemmy and registering an account, you need to pick an instance. For this you can browse the instance list and look for one that matches your topics of interest. You can also see if the rules match your expectations, and how many users there are. It is better to avoid very big or very small instances. But don't worry too much about this choice, you can always create another account on a different instance later.

[instance list screenshot]

Registration
Once you choose an instance, it's time to create your account. To do this, click sign up in the top right of the page, or click the top right button on mobile to open a menu with sign up link.

[registration page screenshot]

On the signup page you need to enter a few things:

Username: How do you want to be called? This name can not be changed and is unique within an instance. Later you can also set a displayname which can be freely changed. If your desired username is taken, consider choosing a different instance where it is still available.
Email: Your email address. This is used for password resets and notifications (if enabled). Providing an email address is usually optional, but admins may choose to make it mandatory. In this case you will have to wait for a confirmation mail and click the link after completing this form.
Password: The password for logging in to your account. Make sure to choose a long and unique password which isn't used on any other website.
Verify password: Repeat the same password from above to ensure that it was entered correctly.
There are also a few optional fields, which you may need to fill in depending on the instance configuration:

Question/Answer: Instance admins can set an arbitrary question which needs to be answered in order to create an account. This is often used to prevent spam bots from signing up. After submitting the form, you will need to wait for some time until the answer is approved manually before you can login.
Code: A captcha which is easy to solve for humans but hard for bots. Enter the letters and numbers that you see in the text box, ignoring uppercase or lowercase. Click the refresh button if you are unable to read a character. The play button plays an audio version of the captcha.
Show NSFW content: Here you can choose if content that is ""not safe for work"" (or adult-only) should be shown.
When you are done, press the sign up button.

It depends on the instance configuration when you can login and start using the account. In case the email is mandatory, you need to wait for the confirmation email and click the link first. In case ""Question/Answer"" is present, you need to wait for an admin to manually review and approve your registration. If you have problems with the registration, try to get in contact with the admin for support. You can also choose a different instance to sign up if your primary choice does not work.

Following Communities
After logging in to your new account, its time to follow communities that you are interested in. For this you can click on the communities link at the top of the page (on mobile, you need to click the menu icon on the top right first). You will see a list of communities which can be filtered by subscribed, local or all. Local communities are those which are hosted on the same site where you are signed in, while all also contains federated communities from other instances. In any case you can directly subscribe to communities with the right-hand subscribe link. Or click on the community name to browse the community first, see what its posted and what the rules are before subscribing.

Another way to find communities to subscribe to is by going to the front page and browsing the posts. If there is something that interests you, click on the post title to see more details and comments. Here you can subscribe to the community in the right-hand sidebar, or by clicking the ""sidebar"" button on mobile.

These previous ways will only show communities that are already known to the instance. Especially if you joined a small or inactive Lemmy instance, there will be few communities to discover. You can find more communities by browsing different Lemmy instances, or using the Lemmy Explorer. When you found a community that you want to follow, enter its URL (e.g. https://feddit.org/c/main) or the identifier (e.g. !main@feddit.org) into the search field of your own Lemmy instance. Lemmy will then fetch the community from its original instance, and allow you to interact with it. The same method also works to fetch users, posts or comments from other instances.

Setting up Your Profile
Before you start posting, its a good idea to provide some details about yourself. Open the top-right menu and go to ""settings"". Here the following settings are available for your public profile:

Displayname: An alternative username which can be changed at any time
Bio: Long description of yourself, can be formatted with Markdown
Matrix User: Your username on the decentralized Matrix chat
Avatar: Profile picture that is shown next to all your posts
Banner: A header image for your profile page
On this page you can also change the email and password. Additionally there are many other settings available, which allow customizing of your browsing experience:

Blocks (tab at top of the page): Here you can block users and communities, so that their posts will be hidden.
Interface language: Which language the user interface should use.
Languages: Select the languages that you speak to see only content in these languages. This is a new feature and many posts don't specify a language yet, so be sure to select ""Undetermined"" to see them.
Theme: You can choose between different color themes for the user interface. Instance admins can add more themes.
Type: Which timeline you want to see by default on the front page; only posts from communities that you subscribe to, posts in local communities, or all posts including federated.
Sort type: How posts and comments should be sorted by default. See Votes and Ranking for details.
Show NSFW content: Whether or not you want to see content that is ""not safe for work"" (or adult-only).
Show Scores: Whether the number of upvotes and downvotes should be visible.
Show Avatars: Whether profile pictures of other users should be shown.
Bot Account: Enable this if you are using a script or program to create posts automatically
Show Bot Accounts: Disable this to hide posts that were created by bot accounts.
Show Read Posts: If this is disabled, posts that you already viewed are not shown in listings anymore. Useful if you want to find new content easily, but makes it difficult to follow ongoing discussion under existing posts.
Show Notifications for New Posts: Enable this to receive a popup notification for each new post that is created.
Send notifications to Email: Enable to receive notifications about new comment replies and private messages to your email address.
Start Posting
Finally its time to start posting! To do this it is always a good idea to read the community rules in the sidebar (below the Subscribe button). When you are ready, go to a post and type your comment in the box directly below for a top-level reply. You can also write a nested reply to an existing comment, by clicking the left-pointing arrow.

Other than commenting on existing posts, you can also create new posts. To do this, click the button Create a post in the sidebar. Here you can optionally supply an external link or upload an image. The title field is mandatory and should describe what you are posting. The body is again optional, and gives space for long texts. You can also embed additional images here. The Community dropdown below allows choosing a different community to post in. With NSFW, posts can be marked as ""not safe for work"". Finally you can specify the language that the post is written in, and then click on Create.

One more possibility is to write private messages to individual users. To do this, simply visit a user profile and click Send message. You will be notified about new private messages and comment replies with the bell icon in the top right.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Delete
Data Types: Email address,username, password
Purposes: Account management, Functionality, authenticate
Stories:
1. We collect Email Address, User name, password dor account management. We use Email address, User name, password for authentication .

Manage Users & Auth
Registrations
You can enable registrations of on your instance. To prevent SPAM, we recommend to enable to following signup settings:

Require email verification
Require approval
Registration approval PeerTube >= 5.1
If signup require approval, users will request registration on your instance and will have to fill a Registration reason to help you to decide if you want to accept or not the user.

Registration reason input

Administrators and moderators can then list registration requests on the instance.

Registration list table

And accept or reject them. A Moderation response must be filled that will be sent to the user to explain its registration request has been accepted/rejected.

Accepting a registration will automatically create the user.

Registration accept modal

Manage users
The user menu allows you to manage all existing users on your instance.

Window displayed when in user menu

Users will be created when they register to your instance, but you may also create users manually using the ""create user"" button at the top right of the user menu.

Under the user menu you can update or delete a user by clicking on the three dots  at the left of a user info.

User dot button

Edit user will allow you to update user informations - see below.
Delete user will allow you to definitely delete this user. All of that user's videos will also be deleted.
Ban will disable connection for this user but videos and comments will be kept as is. No one else will be able to register with the same nickname or email address.
Editing users
When clicking on Edit, you can update parameters for a user such as email, role, video quota and so on. You also can specify if it needs review before a video goes public.

Window displayed when clicking on Edit user

You have two ways to reset password:

by sending a reset link to the user email
by changing it manually
Roles
Role defines what a user is allowed to do on the instance. There are three roles on PeerTube: Administrator, Moderator, and User.

Administrator
Administrators can do anything, and have access to the full admin backend.

Add, Remove, and Edit user accounts, including Admin and Moderator accounts
View, Edit, Add and Remove instance following and followers
Delete Local Videos
Allow or disallow video storage redundancy for followed instances
Configure the instance:
instance name
short and full descriptions
Terms of Service (ToS)
Whether or not the instance is dedicated to NSFW content
default landing page
default NSFW video display policy (which can be modified by logged-in users)
whether signups are enabled or disabled
default user quotas
whether importing videos is allowed
from YouTube
from a torrent file or Magnet Link
whether or not new videos are automatically blacklisted when uploaded
whether other instances can follow your instance, and whether those followers need to be manually approved or not
administrator email
enable or disable the contact form
Twitter account information for the instance link previews (optional)
transcoding settings
enable or disable transcoding
enable or disable mkv, .mov, .avi, and .flv videos (this is all or none)
allow or disallow audio file uploads
number of threads to use for transcoding on the server
which resolutions are enabled (240p, 360p, 480p, 720p, 1080p, 2160p)
cache size for previews and captions
custom JavaScript and CSS
Search for and install Plugins and Themes
View System Jobs, Logs, and Debugging information
Admins also have the ability to perform any action that can be performed by a Moderator or a User

Moderator
Moderators have access to the ""Moderation"" part of the administration backend which Administrators also see.

View user account information:
username
email address
daily/total quotas
role
creation date
Add accounts with the User role.
View video abuse reports
reporter
abuse report date and time
video title (with link to video)
Delete, Comment, Accept or Reject video abuse reports
View blacklisted videos
video title
whether the video is labeled as sensitive or not
whether the video has been unfederated or not (only applies to local videos)
date and time of the blacklist
View muted accounts
account username and instance
date and time of the mute
View muted instances
instance domain
date and time of the mute
Blacklist videos
Mute Accounts
Mute Instances
List, accept and reject registration requests
Moderators can also do anything that a User account can do.

User
User is the default role.

Create, Edit, and Delete channels associated with their account
Create, Edit, and Delete playlists associated with their account
Upload, Edit, and Delete videos to their account, associated with one of their channels
Comment on videos
Add videos to playlists, or remove videos from them
Change user settings (See the Use PeerTube page for more information)
Report videos to the moderators with a comment about why the video is being reported
Quotas
Video Quota
Video Quota represents the size limit a user cannot exceed when uploading videos. Each time a user upload a video, Peertube checks if there is enough quota to store it. If not, the upload is denied. Beware, the quota after an upload is estimated only on the size of the file uploaded. However, after transcoding (which outputs videos of unpredictable size) the video resolutions resulting of the transcoding are also taken into account in a user's quota. If you have enabled multiple resolutions, a user can use more than their quota on disk. Peertube will provide you an estimation of maximal space a user will use according to your transcoding options. You can change the default for new users in the configuration menu.

Daily Video Quota
Daily Video Quota represents the max quota a user is allowed to upload by day. You can tune this parameter to adjust the resources your instance will use. For instance, if you have many users transcoding could take a long time, so limiting upload by user by day could help to share resources between them. You can change the default for new users in the configuration menu.

Once you are satisfied with your user, you can click on the ""Update User"" button to save modifications.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\peertube\managing-users.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
sharetribe\analyrics-events.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Manage Users & Auth
Registrations
You can enable registrations of on your instance. To prevent SPAM, we recommend to enable to following signup settings:

Require email verification
Require approval
Registration approval PeerTube >= 5.1
If signup require approval, users will request registration on your instance and will have to fill a Registration reason to help you to decide if you want to accept or not the user.

Registration reason input

Administrators and moderators can then list registration requests on the instance.

Registration list table

And accept or reject them. A Moderation response must be filled that will be sent to the user to explain its registration request has been accepted/rejected.

Accepting a registration will automatically create the user.

Registration accept modal

Manage users
The user menu allows you to manage all existing users on your instance.

Window displayed when in user menu

Users will be created when they register to your instance, but you may also create users manually using the ""create user"" button at the top right of the user menu.

Under the user menu you can update or delete a user by clicking on the three dots  at the left of a user info.

User dot button

Edit user will allow you to update user informations - see below.
Delete user will allow you to definitely delete this user. All of that user's videos will also be deleted.
Ban will disable connection for this user but videos and comments will be kept as is. No one else will be able to register with the same nickname or email address.
Editing users
When clicking on Edit, you can update parameters for a user such as email, role, video quota and so on. You also can specify if it needs review before a video goes public.

Window displayed when clicking on Edit user

You have two ways to reset password:

by sending a reset link to the user email
by changing it manually
Roles
Role defines what a user is allowed to do on the instance. There are three roles on PeerTube: Administrator, Moderator, and User.

Administrator
Administrators can do anything, and have access to the full admin backend.

Add, Remove, and Edit user accounts, including Admin and Moderator accounts
View, Edit, Add and Remove instance following and followers
Delete Local Videos
Allow or disallow video storage redundancy for followed instances
Configure the instance:
instance name
short and full descriptions
Terms of Service (ToS)
Whether or not the instance is dedicated to NSFW content
default landing page
default NSFW video display policy (which can be modified by logged-in users)
whether signups are enabled or disabled
default user quotas
whether importing videos is allowed
from YouTube
from a torrent file or Magnet Link
whether or not new videos are automatically blacklisted when uploaded
whether other instances can follow your instance, and whether those followers need to be manually approved or not
administrator email
enable or disable the contact form
Twitter account information for the instance link previews (optional)
transcoding settings
enable or disable transcoding
enable or disable mkv, .mov, .avi, and .flv videos (this is all or none)
allow or disallow audio file uploads
number of threads to use for transcoding on the server
which resolutions are enabled (240p, 360p, 480p, 720p, 1080p, 2160p)
cache size for previews and captions
custom JavaScript and CSS
Search for and install Plugins and Themes
View System Jobs, Logs, and Debugging information
Admins also have the ability to perform any action that can be performed by a Moderator or a User

Moderator
Moderators have access to the ""Moderation"" part of the administration backend which Administrators also see.

View user account information:
username
email address
daily/total quotas
role
creation date
Add accounts with the User role.
View video abuse reports
reporter
abuse report date and time
video title (with link to video)
Delete, Comment, Accept or Reject video abuse reports
View blacklisted videos
video title
whether the video is labeled as sensitive or not
whether the video has been unfederated or not (only applies to local videos)
date and time of the blacklist
View muted accounts
account username and instance
date and time of the mute
View muted instances
instance domain
date and time of the mute
Blacklist videos
Mute Accounts
Mute Instances
List, accept and reject registration requests
Moderators can also do anything that a User account can do.

User
User is the default role.

Create, Edit, and Delete channels associated with their account
Create, Edit, and Delete playlists associated with their account
Upload, Edit, and Delete videos to their account, associated with one of their channels
Comment on videos
Add videos to playlists, or remove videos from them
Change user settings (See the Use PeerTube page for more information)
Report videos to the moderators with a comment about why the video is being reported
Quotas
Video Quota
Video Quota represents the size limit a user cannot exceed when uploading videos. Each time a user upload a video, Peertube checks if there is enough quota to store it. If not, the upload is denied. Beware, the quota after an upload is estimated only on the size of the file uploaded. However, after transcoding (which outputs videos of unpredictable size) the video resolutions resulting of the transcoding are also taken into account in a user's quota. If you have enabled multiple resolutions, a user can use more than their quota on disk. Peertube will provide you an estimation of maximal space a user will use according to your transcoding options. You can change the default for new users in the configuration menu.

Daily Video Quota
Daily Video Quota represents the max quota a user is allowed to upload by day. You can tune this parameter to adjust the resources your instance will use. For instance, if you have many users transcoding could take a long time, so limiting upload by user by day could help to share resources between them. You can change the default for new users in the configuration menu.

Once you are satisfied with your user, you can click on the ""Update User"" button to save modifications.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Process, Delete
Data Types: Email address, account information, video
Purposes: account management, user protection
Stories:
1. We collect email address, account information for account management. We Process email addres, account information and video for account management. We delete account information and video for user protection..

Analytics
Creating analytics events
In javascript:

window.ST.analytics.logEvent(category, action, opt_label, props)
Current events:

""admin"", ""export"", ""users""
""listing"", ""commented""
""listing"", ""created""
""message"", ""sent""
""user"", ""signed up"", ""facebook""
""user"", ""signed up"", ""normal form""
In controllers:

  record_event(flash, event_category, event_data) 
Current events:

""AccountConfirmed""
""admin_email_confirmed""
""BuyButtonClicked"", {listing_id, listing_uuid, payment_process, user_logged_in}
""GaveConsent""
""InitiatePreauthorizedTransaction"", {listing_id, listing_uuid}
""ListingViewed"", {listing_id, listing_uuid, payment_process}
""PreauthorizedTransactionAccepted"", {listing_id, listing_uuid, transaction_id}
""PreauthorizedTransactionRejected"", {listing_id, listing_uuid, transaction_id}
""ProviderPaymentDetailsMissing"", {listing_id, listing_uuid}
""RedirectingBuyerToPayPal"", { listing_id, listing_uuid, community_id, marketplace_uuid, user_logged_in}
""SignUp"", {method}
""TransactionCreated"", {listing_id, listing_uuid, transaction_id, payment_process}
""user"", {action: ""deleted"", opt_label: ""by user""})
""km_record"", {km_event: ""Onboarding cover photo uploaded""})
""km_record"", {km_event: ""Onboarding filter created""})
""km_record"", {km_event: ""Onboarding invitation created""})
""km_record"", {km_event: ""Onboarding listing created""}
""km_record"", {km_event: ""Onboarding payment disabled""})
""km_record"", {km_event: ""Onboarding payments setup""})
""km_record"", {km_event: ""Onboarding payments setup""})
""km_record"", {km_event: ""Onboarding paypal connected""})
""km_record"", {km_event: ""Onboarding slogan/description created""})
Sending events to different engines
All analytics events are triggered as custom jQuery ""st-analytics:"" events.

st-analytics:setup
Event is triggered on initialization, with user and community info, to send proper identification data to analytics engine:

  window.ST.analytics.data = {
      community_ident: """",
      community_uuid:  ""b1b3b8e4-41e6-11e7-b73b-204747729953"",
      community_id:    ""1"",
    
      user_id:      ""eIyDCQJZ-StdbCqLMC1qEA"",
      user_uuid:    ""b233c084-41e6-11e7-b73b-204747729953"",
      user_is_admin: true,
      user_email:    ""admin@example.com"",
      user_name:     ""Admin D"",
      user_hash:     null,
    
      feature_flags: [""topbar_v1""],
    
      plan_status:       ""active"",
      plan_member_limit:  null,
      plan_created_at:    1497439731,
      plan_updated_at:    1497439731,
      plan_expires_at:    null,
      plan_features:      ""deletable, admin_email, whitelabel"",
    
      identity_information: {
        ""info_user_id_old"":""eIyDCQJZ-StdbCqLMC1qEA"",
        ""info_marketplace_id"":""b1b3b8e4-41e6-11e7-b73b-204747729953"",
        ""info_marketplace_id_old"":1,""
        info_marketplace_url"":""http://tribeme.lvh.me:3000"",
        ""info_email_confirmed"":true
      }
    };

Sample handler for GTM:

  $(document).on(""st-analytics:setup"", function(event, info) {
    if (info.community_id) {
      dataLayer.push({""event"": ""identify"", ""id"": ""mp-""+info.community_id+""-admin"" });
    }

    dataLayer.push({ event: 'feature flags', featureFlags: info.feature_flags});
  });
st-analytics:logout
Event is triggered on user logout, for example to clear user session if tracked.

  $(document).on(""st-analytics:logout"", function(event, args){
    ampClient.setUserId(null);
    ampClient.regenerateDeviceid();
  });
st-analytics:event
Triggered for new analytics event.

window.ST.analytics.logEvent = function(category, action, opt_label, props) {
  $(document).trigger('st-analytics:event', {category: category, action: action, opt_label: opt_label, props: props});
}
Sample handle for Google Analytics:

  $(document).on('st-analytics:event', function(event, args) {
    var params_array = [args.category, args.action, args.opt_label];
    if (typeof _gaq !== 'undefined' && Array.isArray(_gaq)) {
      _gaq.push(['_trackEvent'].concat(params_array));
    }
  });


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\sharetribe\analyrics-events.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
Synapse\account_data_callbacks.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
# Password auth provider callbacks

Password auth providers offer a way for server administrators to integrate
their Synapse installation with an external authentication system. The callbacks can be
registered by using the Module API's `register_password_auth_provider_callbacks` method.

## Callbacks

### `auth_checkers`

_First introduced in Synapse v1.46.0_

```python
auth_checkers: Dict[Tuple[str, Tuple[str, ...]], Callable]
```

A dict mapping from tuples of a login type identifier (such as `m.login.password`) and a
tuple of field names (such as `(""password"", ""secret_thing"")`) to authentication checking
callbacks, which should be of the following form:

```python
async def check_auth(
    user: str,
    login_type: str,
    login_dict: ""synapse.module_api.JsonDict"",
) -> Optional[
    Tuple[
        str, 
        Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]]
    ]
]
```

The login type and field names should be provided by the user in the
request to the `/login` API. [The Matrix specification](https://matrix.org/docs/spec/client_server/latest#authentication-types)
defines some types, however user defined ones are also allowed.

The callback is passed the `user` field provided by the client (which might not be in
`@username:server` form), the login type, and a dictionary of login secrets passed by
the client.

If the authentication is successful, the module must return the user's Matrix ID (e.g. 
`@alice:example.com`) and optionally a callback to be called with the response to the
`/login` request. If the module doesn't wish to return a callback, it must return `None`
instead.

If the authentication is unsuccessful, the module must return `None`.

Note that the user is not automatically registered, the `register_user(..)` method of
the [module API](writing_a_module.html) can be used to lazily create users.

If multiple modules register an auth checker for the same login type but with different
fields, Synapse will refuse to start.

If multiple modules register an auth checker for the same login type with the same fields,
then the callbacks will be executed in order, until one returns a Matrix User ID (and
optionally a callback). In that case, the return value of that callback will be accepted
and subsequent callbacks will not be fired. If every callback returns `None`, then the
authentication fails.
\} 

{#s (a: collect, use) (dt: Account data, Username, password, email ) (p: Log in)
### `check_3pid_auth`

_First introduced in Synapse v1.46.0_

```python
async def check_3pid_auth(
    medium: str, 
    address: str,
    password: str,
) -> Optional[
    Tuple[
        str, 
        Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]]
    ]
]
```

Called when a user attempts to register or log in with a third party identifier,
such as email. It is passed the medium (eg. `email`), an address (eg. `jdoe@example.com`)
and the user's password.

If the authentication is successful, the module must return the user's Matrix ID (e.g. 
`@alice:example.com`) and optionally a callback to be called with the response to the `/login` request.
If the module doesn't wish to return a callback, it must return None instead.

If the authentication is unsuccessful, the module must return `None`.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the authentication is denied.
\} 

{#s (a: collect, use) (dt: Account data, Username, password ) (p: Log out)
### `on_logged_out`

_First introduced in Synapse v1.46.0_

```python
async def on_logged_out(
    user_id: str,
    device_id: Optional[str],
    access_token: str
) -> None
``` 
Called during a logout request for a user. It is passed the qualified user ID, the ID of the
deactivated device (if any: access tokens are occasionally created without an associated
device ID), and the (now deactivated) access token.

Deleting the related pushers is done after calling `on_logged_out`, so you can rely on them
to still be present.

If multiple modules implement this callback, Synapse runs them all in order.
\} 

{#s (a: collect, use) (dt: Account data, Username, password, email ) (p: Account open)
### `get_username_for_registration`

_First introduced in Synapse v1.52.0_

```python
async def get_username_for_registration(
    uia_results: Dict[str, Any],
    params: Dict[str, Any],
) -> Optional[str]
```

Called when registering a new user. The module can return a username to set for the user
being registered by returning it as a string, or `None` if it doesn't wish to force a
username for this user. If a username is returned, it will be used as the local part of a
user's full Matrix ID (e.g. it's `alice` in `@alice:example.com`).

This callback is called once [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
has been completed by the user. It is not called when registering a user via SSO. It is
passed two dictionaries, which include the information that the user has provided during
the registration process.

The first dictionary contains the results of the [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
flow followed by the user. Its keys are the identifiers of every step involved in the flow,
associated with either a boolean value indicating whether the step was correctly completed,
or additional information (e.g. email address, phone number...). A list of most existing
identifiers can be found in the [Matrix specification](https://spec.matrix.org/v1.1/client-server-api/#authentication-types).
Here's an example featuring all currently supported keys:

```python
{
    ""m.login.dummy"": True,  # Dummy authentication
    ""m.login.terms"": True,  # User has accepted the terms of service for the homeserver
    ""m.login.recaptcha"": True,  # User has completed the recaptcha challenge
    ""m.login.email.identity"": {  # User has provided and verified an email address
        ""medium"": ""email"",
        ""address"": ""alice@example.com"",
        ""validated_at"": 1642701357084,
    },
    ""m.login.msisdn"": {  # User has provided and verified a phone number
        ""medium"": ""msisdn"",
        ""address"": ""33123456789"",
        ""validated_at"": 1642701357084,
    },
    ""m.login.registration_token"": ""sometoken"",  # User has registered through a registration token
}
```

The second dictionary contains the parameters provided by the user's client in the request
to `/_matrix/client/v3/register`. See the [Matrix specification](https://spec.matrix.org/latest/client-server-api/#post_matrixclientv3register)
for a complete list of these parameters.

If the module cannot, or does not wish to, generate a username for this user, it must
return `None`.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the username provided by the user is used, if any (otherwise one is automatically
generated).

### `get_displayname_for_registration`

_First introduced in Synapse v1.54.0_

```python
async def get_displayname_for_registration(
    uia_results: Dict[str, Any],
    params: Dict[str, Any],
) -> Optional[str]
```

Called when registering a new user. The module can return a display name to set for the
user being registered by returning it as a string, or `None` if it doesn't wish to force a
display name for this user.

This callback is called once [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
has been completed by the user. It is not called when registering a user via SSO. It is
passed two dictionaries, which include the information that the user has provided during
the registration process. These dictionaries are identical to the ones passed to
[`get_username_for_registration`](#get_username_for_registration), so refer to the
documentation of this callback for more information about them.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the username will be used (e.g. `alice` if the user being registered is `@alice:example.com`).
\} 

{#s (a: collect, use) (dt: Phone number, email, username, password ) (p: Log in)
## `is_3pid_allowed`

_First introduced in Synapse v1.53.0_

```python
async def is_3pid_allowed(self, medium: str, address: str, registration: bool) -> bool
```

Called when attempting to bind a third-party identifier (i.e. an email address or a phone
number). The module is given the medium of the third-party identifier (which is `email` if
the identifier is an email address, or `msisdn` if the identifier is a phone number) and
its address, as well as a boolean indicating whether the attempt to bind is happening as
part of registering a new user. The module must return a boolean indicating whether the
identifier can be allowed to be bound to an account on the local homeserver.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `True`, Synapse falls through to the next one. The value of the first
callback that does not return `True` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback.

## Example

The example module below implements authentication checkers for two different login types: 
-  `my.login.type` 
    - Expects a `my_field` field to be sent to `/login`
    - Is checked by the method: `self.check_my_login`
- `m.login.password` (defined in [the spec](https://matrix.org/docs/spec/client_server/latest#password-based))
    - Expects a `password` field to be sent to `/login`
    - Is checked by the method: `self.check_pass`

```python
from typing import Awaitable, Callable, Optional, Tuple

import synapse
from synapse import module_api


class MyAuthProvider:
    def __init__(self, config: dict, api: module_api):

        self.api = api

        self.credentials = {
            ""bob"": ""building"",
            ""@scoop:matrix.org"": ""digging"",
        }

        api.register_password_auth_provider_callbacks(
            auth_checkers={
                (""my.login_type"", (""my_field"",)): self.check_my_login,
                (""m.login.password"", (""password"",)): self.check_pass,
            },
        )

    async def check_my_login(
        self,
        username: str,
        login_type: str,
        login_dict: ""synapse.module_api.JsonDict"",
    ) -> Optional[
        Tuple[
            str,
            Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]],
        ]
    ]:
        if login_type != ""my.login_type"":
            return None

        if self.credentials.get(username) == login_dict.get(""my_field""):
            return (self.api.get_qualified_user_id(username), None)

    async def check_pass(
        self,
        username: str,
        login_type: str,
        login_dict: ""synapse.module_api.JsonDict"",
    ) -> Optional[
        Tuple[
            str,
            Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]],
        ]
    ]:
        if login_type != ""m.login.password"":
            return None

        if self.credentials.get(username) == login_dict.get(""password""):
            return (self.api.get_qualified_user_id(username), None)
```

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, process
Data Types: account information, email address, phone number
Purposes: functionality, account management
Stories:
1. We collect account information, email address and phone number for functionality. We collect account information, email address and phone number for account management. We process account information, email address and phone number for functionality.   We process account information, email address and phone number for account management..


# Account data callbacks

Account data callbacks allow module developers to react to changes of the account data
of local users. Account data callbacks can be registered using the module API's
`register_account_data_callbacks` method.

## Callbacks

The available account data callbacks are:

### `on_account_data_updated`

_First introduced in Synapse v1.57.0_

```python
async def on_account_data_updated(
    user_id: str,
    room_id: Optional[str],
    account_data_type: str,
    content: ""synapse.module_api.JsonDict"",
) -> None:
```

Called after user's account data has been updated. The module is given the
Matrix ID of the user whose account data is changing, the room ID the data is associated
with, the type associated with the change, as well as the new content. If the account
data is not associated with a specific room, then the room ID is `None`.

This callback is triggered when new account data is added or when the data associated with
a given type (and optionally room) changes. This includes deletion, since in Matrix,
deleting account data consists of replacing the data associated with a given type
(and optionally room) with an empty dictionary (`{}`).

Note that this doesn't trigger when changing the tags associated with a room, as these are
processed separately by Synapse.

If multiple modules implement this callback, Synapse runs them all in order.

## Example

The example below is a module that implements the `on_account_data_updated` callback, and
sends an event to an audit room when a user changes their account data.

```python
import json
import attr
from typing import Any, Dict, Optional

from synapse.module_api import JsonDict, ModuleApi
from synapse.module_api.errors import ConfigError


@attr.s(auto_attribs=True)
class CustomAccountDataConfig:
    audit_room: str
    sender: str


class CustomAccountDataModule:
    def __init__(self, config: CustomAccountDataConfig, api: ModuleApi):
        self.api = api
        self.config = config

        self.api.register_account_data_callbacks(
            on_account_data_updated=self.log_new_account_data,
        )

    @staticmethod
    def parse_config(config: Dict[str, Any]) -> CustomAccountDataConfig:
        def check_in_config(param: str):
            if param not in config:
                raise ConfigError(f""'{param}' is required"")

        check_in_config(""audit_room"")
        check_in_config(""sender"")

        return CustomAccountDataConfig(
            audit_room=config[""audit_room""],
            sender=config[""sender""],
        )

    async def log_new_account_data(
        self,
        user_id: str,
        room_id: Optional[str],
        account_data_type: str,
        content: JsonDict,
    ) -> None:
        content_raw = json.dumps(content)
        msg_content = f""{user_id} has changed their account data for type {account_data_type} to: {content_raw}""

        if room_id is not None:
            msg_content += f"" (in room {room_id})""

        await self.api.create_and_send_event_into_room(
            {
                ""room_id"": self.config.audit_room,
                ""sender"": self.config.sender,
                ""type"": ""m.room.message"",
                ""content"": {
                    ""msgtype"": ""m.text"",
                    ""body"": msg_content
                }
            }
        )
```

Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\Synapse\account_data_callbacks.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
Synapse\account_validity_callbacks.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
# Password auth provider callbacks

Password auth providers offer a way for server administrators to integrate
their Synapse installation with an external authentication system. The callbacks can be
registered by using the Module API's `register_password_auth_provider_callbacks` method.

## Callbacks

### `auth_checkers`

_First introduced in Synapse v1.46.0_

```python
auth_checkers: Dict[Tuple[str, Tuple[str, ...]], Callable]
```

A dict mapping from tuples of a login type identifier (such as `m.login.password`) and a
tuple of field names (such as `(""password"", ""secret_thing"")`) to authentication checking
callbacks, which should be of the following form:

```python
async def check_auth(
    user: str,
    login_type: str,
    login_dict: ""synapse.module_api.JsonDict"",
) -> Optional[
    Tuple[
        str, 
        Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]]
    ]
]
```

The login type and field names should be provided by the user in the
request to the `/login` API. [The Matrix specification](https://matrix.org/docs/spec/client_server/latest#authentication-types)
defines some types, however user defined ones are also allowed.

The callback is passed the `user` field provided by the client (which might not be in
`@username:server` form), the login type, and a dictionary of login secrets passed by
the client.

If the authentication is successful, the module must return the user's Matrix ID (e.g. 
`@alice:example.com`) and optionally a callback to be called with the response to the
`/login` request. If the module doesn't wish to return a callback, it must return `None`
instead.

If the authentication is unsuccessful, the module must return `None`.

Note that the user is not automatically registered, the `register_user(..)` method of
the [module API](writing_a_module.html) can be used to lazily create users.

If multiple modules register an auth checker for the same login type but with different
fields, Synapse will refuse to start.

If multiple modules register an auth checker for the same login type with the same fields,
then the callbacks will be executed in order, until one returns a Matrix User ID (and
optionally a callback). In that case, the return value of that callback will be accepted
and subsequent callbacks will not be fired. If every callback returns `None`, then the
authentication fails.
\} 

{#s (a: collect, use) (dt: Account data, Username, password, email ) (p: Log in)
### `check_3pid_auth`

_First introduced in Synapse v1.46.0_

```python
async def check_3pid_auth(
    medium: str, 
    address: str,
    password: str,
) -> Optional[
    Tuple[
        str, 
        Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]]
    ]
]
```

Called when a user attempts to register or log in with a third party identifier,
such as email. It is passed the medium (eg. `email`), an address (eg. `jdoe@example.com`)
and the user's password.

If the authentication is successful, the module must return the user's Matrix ID (e.g. 
`@alice:example.com`) and optionally a callback to be called with the response to the `/login` request.
If the module doesn't wish to return a callback, it must return None instead.

If the authentication is unsuccessful, the module must return `None`.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the authentication is denied.
\} 

{#s (a: collect, use) (dt: Account data, Username, password ) (p: Log out)
### `on_logged_out`

_First introduced in Synapse v1.46.0_

```python
async def on_logged_out(
    user_id: str,
    device_id: Optional[str],
    access_token: str
) -> None
``` 
Called during a logout request for a user. It is passed the qualified user ID, the ID of the
deactivated device (if any: access tokens are occasionally created without an associated
device ID), and the (now deactivated) access token.

Deleting the related pushers is done after calling `on_logged_out`, so you can rely on them
to still be present.

If multiple modules implement this callback, Synapse runs them all in order.
\} 

{#s (a: collect, use) (dt: Account data, Username, password, email ) (p: Account open)
### `get_username_for_registration`

_First introduced in Synapse v1.52.0_

```python
async def get_username_for_registration(
    uia_results: Dict[str, Any],
    params: Dict[str, Any],
) -> Optional[str]
```

Called when registering a new user. The module can return a username to set for the user
being registered by returning it as a string, or `None` if it doesn't wish to force a
username for this user. If a username is returned, it will be used as the local part of a
user's full Matrix ID (e.g. it's `alice` in `@alice:example.com`).

This callback is called once [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
has been completed by the user. It is not called when registering a user via SSO. It is
passed two dictionaries, which include the information that the user has provided during
the registration process.

The first dictionary contains the results of the [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
flow followed by the user. Its keys are the identifiers of every step involved in the flow,
associated with either a boolean value indicating whether the step was correctly completed,
or additional information (e.g. email address, phone number...). A list of most existing
identifiers can be found in the [Matrix specification](https://spec.matrix.org/v1.1/client-server-api/#authentication-types).
Here's an example featuring all currently supported keys:

```python
{
    ""m.login.dummy"": True,  # Dummy authentication
    ""m.login.terms"": True,  # User has accepted the terms of service for the homeserver
    ""m.login.recaptcha"": True,  # User has completed the recaptcha challenge
    ""m.login.email.identity"": {  # User has provided and verified an email address
        ""medium"": ""email"",
        ""address"": ""alice@example.com"",
        ""validated_at"": 1642701357084,
    },
    ""m.login.msisdn"": {  # User has provided and verified a phone number
        ""medium"": ""msisdn"",
        ""address"": ""33123456789"",
        ""validated_at"": 1642701357084,
    },
    ""m.login.registration_token"": ""sometoken"",  # User has registered through a registration token
}
```

The second dictionary contains the parameters provided by the user's client in the request
to `/_matrix/client/v3/register`. See the [Matrix specification](https://spec.matrix.org/latest/client-server-api/#post_matrixclientv3register)
for a complete list of these parameters.

If the module cannot, or does not wish to, generate a username for this user, it must
return `None`.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the username provided by the user is used, if any (otherwise one is automatically
generated).

### `get_displayname_for_registration`

_First introduced in Synapse v1.54.0_

```python
async def get_displayname_for_registration(
    uia_results: Dict[str, Any],
    params: Dict[str, Any],
) -> Optional[str]
```

Called when registering a new user. The module can return a display name to set for the
user being registered by returning it as a string, or `None` if it doesn't wish to force a
display name for this user.

This callback is called once [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
has been completed by the user. It is not called when registering a user via SSO. It is
passed two dictionaries, which include the information that the user has provided during
the registration process. These dictionaries are identical to the ones passed to
[`get_username_for_registration`](#get_username_for_registration), so refer to the
documentation of this callback for more information about them.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the username will be used (e.g. `alice` if the user being registered is `@alice:example.com`).
\} 

{#s (a: collect, use) (dt: Phone number, email, username, password ) (p: Log in)
## `is_3pid_allowed`

_First introduced in Synapse v1.53.0_

```python
async def is_3pid_allowed(self, medium: str, address: str, registration: bool) -> bool
```

Called when attempting to bind a third-party identifier (i.e. an email address or a phone
number). The module is given the medium of the third-party identifier (which is `email` if
the identifier is an email address, or `msisdn` if the identifier is a phone number) and
its address, as well as a boolean indicating whether the attempt to bind is happening as
part of registering a new user. The module must return a boolean indicating whether the
identifier can be allowed to be bound to an account on the local homeserver.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `True`, Synapse falls through to the next one. The value of the first
callback that does not return `True` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback.

## Example

The example module below implements authentication checkers for two different login types: 
-  `my.login.type` 
    - Expects a `my_field` field to be sent to `/login`
    - Is checked by the method: `self.check_my_login`
- `m.login.password` (defined in [the spec](https://matrix.org/docs/spec/client_server/latest#password-based))
    - Expects a `password` field to be sent to `/login`
    - Is checked by the method: `self.check_pass`

```python
from typing import Awaitable, Callable, Optional, Tuple

import synapse
from synapse import module_api


class MyAuthProvider:
    def __init__(self, config: dict, api: module_api):

        self.api = api

        self.credentials = {
            ""bob"": ""building"",
            ""@scoop:matrix.org"": ""digging"",
        }

        api.register_password_auth_provider_callbacks(
            auth_checkers={
                (""my.login_type"", (""my_field"",)): self.check_my_login,
                (""m.login.password"", (""password"",)): self.check_pass,
            },
        )

    async def check_my_login(
        self,
        username: str,
        login_type: str,
        login_dict: ""synapse.module_api.JsonDict"",
    ) -> Optional[
        Tuple[
            str,
            Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]],
        ]
    ]:
        if login_type != ""my.login_type"":
            return None

        if self.credentials.get(username) == login_dict.get(""my_field""):
            return (self.api.get_qualified_user_id(username), None)

    async def check_pass(
        self,
        username: str,
        login_type: str,
        login_dict: ""synapse.module_api.JsonDict"",
    ) -> Optional[
        Tuple[
            str,
            Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]],
        ]
    ]:
        if login_type != ""m.login.password"":
            return None

        if self.credentials.get(username) == login_dict.get(""password""):
            return (self.api.get_qualified_user_id(username), None)
```

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, process
Data Types: account information, email address, phone number
Purposes: functionality, account management
Stories:
1. We collect account information, email address and phone number for functionality. We collect account information, email address and phone number for account management. We process account information, email address and phone number for functionality.   We process account information, email address and phone number for account management..

# Account validity callbacks

Account validity callbacks allow module developers to add extra steps to verify the
validity on an account, i.e. see if a user can be granted access to their account on the
Synapse instance. Account validity callbacks can be registered using the module API's
`register_account_validity_callbacks` method.

The available account validity callbacks are:

### `is_user_expired`

_First introduced in Synapse v1.39.0_

```python
async def is_user_expired(user: str) -> Optional[bool]
```

Called when processing any authenticated request (except for logout requests). The module
can return a `bool` to indicate whether the user has expired and should be locked out of
their account, or `None` if the module wasn't able to figure it out. The user is
represented by their Matrix user ID (e.g. `@alice:example.com`).

If the module returns `True`, the current request will be denied with the error code
`ORG_MATRIX_EXPIRED_ACCOUNT` and the HTTP status code 403. Note that this doesn't
invalidate the user's access token.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback.

### `on_user_registration`

_First introduced in Synapse v1.39.0_

```python
async def on_user_registration(user: str) -> None
```

Called after successfully registering a user, in case the module needs to perform extra
operations to keep track of them. (e.g. add them to a database table). The user is
represented by their Matrix user ID.

If multiple modules implement this callback, Synapse runs them all in order.

### `on_user_login`

_First introduced in Synapse v1.98.0_

```python
async def on_user_login(user_id: str, auth_provider_type: str, auth_provider_id: str) -> None
```

Called after successfully login or registration of a user for cases when module needs to perform extra operations after auth.
represented by their Matrix user ID.

If multiple modules implement this callback, Synapse runs them all in order.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\Synapse\account_validity_callbacks.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
Synapse\password_auth_provider_callbacks.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
# Account validity callbacks

Account validity callbacks allow module developers to add extra steps to verify the
validity on an account, i.e. see if a user can be granted access to their account on the
Synapse instance. Account validity callbacks can be registered using the module API's
`register_account_validity_callbacks` method.

The available account validity callbacks are:

### `is_user_expired`

_First introduced in Synapse v1.39.0_

```python
async def is_user_expired(user: str) -> Optional[bool]
```

Called when processing any authenticated request (except for logout requests). The module
can return a `bool` to indicate whether the user has expired and should be locked out of
their account, or `None` if the module wasn't able to figure it out. The user is
represented by their Matrix user ID (e.g. `@alice:example.com`).

If the module returns `True`, the current request will be denied with the error code
`ORG_MATRIX_EXPIRED_ACCOUNT` and the HTTP status code 403. Note that this doesn't
invalidate the user's access token.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback.

### `on_user_registration`

_First introduced in Synapse v1.39.0_

```python
async def on_user_registration(user: str) -> None
```

Called after successfully registering a user, in case the module needs to perform extra
operations to keep track of them. (e.g. add them to a database table). The user is
represented by their Matrix user ID.

If multiple modules implement this callback, Synapse runs them all in order.

### `on_user_login`

_First introduced in Synapse v1.98.0_

```python
async def on_user_login(user_id: str, auth_provider_type: str, auth_provider_id: str) -> None
```

Called after successfully login or registration of a user for cases when module needs to perform extra operations after auth.
represented by their Matrix user ID.

If multiple modules implement this callback, Synapse runs them all in order.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Process
Data Types: account information
Purposes: Security,account management, functionality
Stories:
1. We process account information for security. We process account information for functionality. We process account information for account management..

# Password auth provider callbacks

Password auth providers offer a way for server administrators to integrate
their Synapse installation with an external authentication system. The callbacks can be
registered by using the Module API's `register_password_auth_provider_callbacks` method.

## Callbacks

### `auth_checkers`

_First introduced in Synapse v1.46.0_

```python
auth_checkers: Dict[Tuple[str, Tuple[str, ...]], Callable]
```

A dict mapping from tuples of a login type identifier (such as `m.login.password`) and a
tuple of field names (such as `(""password"", ""secret_thing"")`) to authentication checking
callbacks, which should be of the following form:

```python
async def check_auth(
    user: str,
    login_type: str,
    login_dict: ""synapse.module_api.JsonDict"",
) -> Optional[
    Tuple[
        str, 
        Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]]
    ]
]
```

The login type and field names should be provided by the user in the
request to the `/login` API. [The Matrix specification](https://matrix.org/docs/spec/client_server/latest#authentication-types)
defines some types, however user defined ones are also allowed.

The callback is passed the `user` field provided by the client (which might not be in
`@username:server` form), the login type, and a dictionary of login secrets passed by
the client.

If the authentication is successful, the module must return the user's Matrix ID (e.g. 
`@alice:example.com`) and optionally a callback to be called with the response to the
`/login` request. If the module doesn't wish to return a callback, it must return `None`
instead.

If the authentication is unsuccessful, the module must return `None`.

Note that the user is not automatically registered, the `register_user(..)` method of
the [module API](writing_a_module.html) can be used to lazily create users.

If multiple modules register an auth checker for the same login type but with different
fields, Synapse will refuse to start.

If multiple modules register an auth checker for the same login type with the same fields,
then the callbacks will be executed in order, until one returns a Matrix User ID (and
optionally a callback). In that case, the return value of that callback will be accepted
and subsequent callbacks will not be fired. If every callback returns `None`, then the
authentication fails.


{#s (a: collect, use) (dt: Account data, Username, password, email ) (p: Log in)
### `check_3pid_auth`

_First introduced in Synapse v1.46.0_

```python
async def check_3pid_auth(
    medium: str, 
    address: str,
    password: str,
) -> Optional[
    Tuple[
        str, 
        Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]]
    ]
]
```

Called when a user attempts to register or log in with a third party identifier,
such as email. It is passed the medium (eg. `email`), an address (eg. `jdoe@example.com`)
and the user's password.

If the authentication is successful, the module must return the user's Matrix ID (e.g. 
`@alice:example.com`) and optionally a callback to be called with the response to the `/login` request.
If the module doesn't wish to return a callback, it must return None instead.

If the authentication is unsuccessful, the module must return `None`.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the authentication is denied.
\} 

{#s (a: collect, use) (dt: Account data, Username, password ) (p: Log out)
### `on_logged_out`

_First introduced in Synapse v1.46.0_

```python
async def on_logged_out(
    user_id: str,
    device_id: Optional[str],
    access_token: str
) -> None
``` 
Called during a logout request for a user. It is passed the qualified user ID, the ID of the
deactivated device (if any: access tokens are occasionally created without an associated
device ID), and the (now deactivated) access token.

Deleting the related pushers is done after calling `on_logged_out`, so you can rely on them
to still be present.

If multiple modules implement this callback, Synapse runs them all in order.
\} 

{#s (a: collect, use) (dt: Account data, Username, password, email ) (p: Account open)
### `get_username_for_registration`

_First introduced in Synapse v1.52.0_

```python
async def get_username_for_registration(
    uia_results: Dict[str, Any],
    params: Dict[str, Any],
) -> Optional[str]
```

Called when registering a new user. The module can return a username to set for the user
being registered by returning it as a string, or `None` if it doesn't wish to force a
username for this user. If a username is returned, it will be used as the local part of a
user's full Matrix ID (e.g. it's `alice` in `@alice:example.com`).

This callback is called once [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
has been completed by the user. It is not called when registering a user via SSO. It is
passed two dictionaries, which include the information that the user has provided during
the registration process.

The first dictionary contains the results of the [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
flow followed by the user. Its keys are the identifiers of every step involved in the flow,
associated with either a boolean value indicating whether the step was correctly completed,
or additional information (e.g. email address, phone number...). A list of most existing
identifiers can be found in the [Matrix specification](https://spec.matrix.org/v1.1/client-server-api/#authentication-types).
Here's an example featuring all currently supported keys:

```python
{
    ""m.login.dummy"": True,  # Dummy authentication
    ""m.login.terms"": True,  # User has accepted the terms of service for the homeserver
    ""m.login.recaptcha"": True,  # User has completed the recaptcha challenge
    ""m.login.email.identity"": {  # User has provided and verified an email address
        ""medium"": ""email"",
        ""address"": ""alice@example.com"",
        ""validated_at"": 1642701357084,
    },
    ""m.login.msisdn"": {  # User has provided and verified a phone number
        ""medium"": ""msisdn"",
        ""address"": ""33123456789"",
        ""validated_at"": 1642701357084,
    },
    ""m.login.registration_token"": ""sometoken"",  # User has registered through a registration token
}
```

The second dictionary contains the parameters provided by the user's client in the request
to `/_matrix/client/v3/register`. See the [Matrix specification](https://spec.matrix.org/latest/client-server-api/#post_matrixclientv3register)
for a complete list of these parameters.

If the module cannot, or does not wish to, generate a username for this user, it must
return `None`.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the username provided by the user is used, if any (otherwise one is automatically
generated).

### `get_displayname_for_registration`

_First introduced in Synapse v1.54.0_

```python
async def get_displayname_for_registration(
    uia_results: Dict[str, Any],
    params: Dict[str, Any],
) -> Optional[str]
```

Called when registering a new user. The module can return a display name to set for the
user being registered by returning it as a string, or `None` if it doesn't wish to force a
display name for this user.

This callback is called once [User-Interactive Authentication](https://spec.matrix.org/latest/client-server-api/#user-interactive-authentication-api)
has been completed by the user. It is not called when registering a user via SSO. It is
passed two dictionaries, which include the information that the user has provided during
the registration process. These dictionaries are identical to the ones passed to
[`get_username_for_registration`](#get_username_for_registration), so refer to the
documentation of this callback for more information about them.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `None`, Synapse falls through to the next one. The value of the first
callback that does not return `None` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback. If every callback returns `None`,
the username will be used (e.g. `alice` if the user being registered is `@alice:example.com`).
\} 

## `is_3pid_allowed`

_First introduced in Synapse v1.53.0_

```python
async def is_3pid_allowed(self, medium: str, address: str, registration: bool) -> bool
```

Called when attempting to bind a third-party identifier (i.e. an email address or a phone
number). The module is given the medium of the third-party identifier (which is `email` if
the identifier is an email address, or `msisdn` if the identifier is a phone number) and
its address, as well as a boolean indicating whether the attempt to bind is happening as
part of registering a new user. The module must return a boolean indicating whether the
identifier can be allowed to be bound to an account on the local homeserver.

If multiple modules implement this callback, they will be considered in order. If a
callback returns `True`, Synapse falls through to the next one. The value of the first
callback that does not return `True` will be used. If this happens, Synapse will not call
any of the subsequent implementations of this callback.

## Example

The example module below implements authentication checkers for two different login types: 
-  `my.login.type` 
    - Expects a `my_field` field to be sent to `/login`
    - Is checked by the method: `self.check_my_login`
- `m.login.password` (defined in [the spec](https://matrix.org/docs/spec/client_server/latest#password-based))
    - Expects a `password` field to be sent to `/login`
    - Is checked by the method: `self.check_pass`

```python
from typing import Awaitable, Callable, Optional, Tuple

import synapse
from synapse import module_api


class MyAuthProvider:
    def __init__(self, config: dict, api: module_api):

        self.api = api

        self.credentials = {
            ""bob"": ""building"",
            ""@scoop:matrix.org"": ""digging"",
        }

        api.register_password_auth_provider_callbacks(
            auth_checkers={
                (""my.login_type"", (""my_field"",)): self.check_my_login,
                (""m.login.password"", (""password"",)): self.check_pass,
            },
        )

    async def check_my_login(
        self,
        username: str,
        login_type: str,
        login_dict: ""synapse.module_api.JsonDict"",
    ) -> Optional[
        Tuple[
            str,
            Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]],
        ]
    ]:
        if login_type != ""my.login_type"":
            return None

        if self.credentials.get(username) == login_dict.get(""my_field""):
            return (self.api.get_qualified_user_id(username), None)

    async def check_pass(
        self,
        username: str,
        login_type: str,
        login_dict: ""synapse.module_api.JsonDict"",
    ) -> Optional[
        Tuple[
            str,
            Optional[Callable[[""synapse.module_api.LoginResponse""], Awaitable[None]]],
        ]
    ]:
        if login_type != ""m.login.password"":
            return None

        if self.credentials.get(username) == login_dict.get(""password""):
            return (self.api.get_qualified_user_id(username), None)
```

Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\Synapse\password_auth_provider_callbacks.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
TracDev_Docs\DatabaseSchema.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
This page was a draft. See
TracDev/PluginDevelopment/ExtensionPoints/trac.notification.api.INotificationSubscriber
page now.
{#s   
The
Open questions
section might still contain unimplemented ideas.
Extension Point :
INotificationSubscriber
Interface
INotificationSubscriber
Since
1.1.3
Module
trac.notification
Source
api.py
â€‹
The
INotificationSubscriber
subscribes users to
notification
events.
Purpose
Trac provides an extendible and flexible notification system. Different people are interested in different kinds of notifications. Notification subscriptions allow administrators and / or users to configure the exact rules used that trigger sending of notifications.
Usage
Implementing the interface follows the standard guidelines found in
TracDev/ComponentArchitecture
and of course
TracDev/PluginDevelopment
.
The main part of this interface is the
match()
function. It returns a list of subscriptions, in the form of tuples consisting of:
class
: The name of the Python class. (This could probably be removed.)
distributor
: Also known as
transport
. E.g. the string
email
. See
INotificationDistributor
.
sid
: The session ID of the subscriber. (Can be
None
if
address
is provided.)
authenticated
:
1
for authenticated session IDs,
0
for anonymous session IDs.
address
: The (email) address to use. (Can be
None
if
sid
is provided.)
format
: The MIME type to be used (e.g.
text/plain
or
text/html
.)
priority
: An integer priority. Smaller numbers have higher priority than bigger numbers.
1
is the highest priority.
adverb
: Either the string
always
or
never
.
Since more than one component can handle the same realms and categories, the priorities and adverbs are used to resolve conflicting subscriptions.
The implementation can use any means to determine if a user is interested in hearing about a given event.
Most check that the appropriate conditions apply and then retrieve the required information from the
subscription
DB table.
The subscriptions in that table are configured in a shared preferences panel that uses two other methods of this interface:
The simple
description()
method returns a description string shown to the user in the preferences panel (or
None
if the plugin does use the
subscriptions
DB table.)
The
requires_authentication()
method allows hiding the rule from unauthenticated users. (E.g. because only authenticated users can be ticket owners.)
The
default_subscriptions()
method describes any  default subscriptions that automatically exist without the user configuring
subscription
DB entries in the preferences.
These are also displayed on the preferences panel, but can not be directly modified there. (They usually can be overriden by non-default subscriptions.)
The plugin still has to return the respective subscriptions from the
matches()
method.
Default descriptions should be used when users can be determined by the event itself.
For instance, ticket author has a default subscription that is controlled via trac.ini.
Default subscriptions should be low priority (i.e. have a priority number much larger than
1
, like 100) so that the user can easily override them.
Examples
The following example implements a simple subscriber that can trigger notifications when a new ticket is created with a high priority level.
from
trac.core
import
*
from
trac.notification.api
import
INotificationSubscriber
from
trac.notification.model
import
Subscription
class
HighPriorityTicketNotificationSubscriber
(
Component
):
implements
(
INotificationSubscriber
)
# INotificationSubscriber methods
def
matches
(
self
,
event
):
if
event
.
realm
!=
'ticket'
:
return
if
event
.
category
!=
'created'
:
return
ticket
=
event
.
target
if
ticket
[
'priority'
]
not
in
(
'blocker'
,
'critical'
,
'major'
):
return
klass
=
self
.
__class__
.
__name__
for
i
in
Subscription
.
find_by_class
(
self
.
env
,
klass
):
yield
i
.
subscription_tuple
()
def
description
(
self
):
return
""notify me when new high priority tickets are created""
def
requires_authentication
(
self
):
return
False
Available Implementations
Several implementations are part of core Trac:
trac.ticket.notification.AllTicketSubscriber
Allows anyone to subscribe to all ticket change notifications.
trac.ticket.notification.TicketOwnerSubscriber
Allows ticket owners to subscribe to (or unsubscribe from) change notifications for owned tickets.
trac.ticket.notification.TicketComponentOwnerSubscriber
Allows component owners to subscribe to (or unsubscribe from) change notifications for tickets assigned to owned component.
trac.ticket.notification.TicketUpdaterSubscriber
Allows anyone to subscribe to (or unsubscribe from) change notifications for their own ticket changes.
trac.ticket.notification.TicketReporterSubscriber
Allows ticket reporters to subscribe to (or unsubscribe from) change notifications for tickets they created.
trac.ticket.notification.CarbonCopySubscriber
Allows anyone to subscribe to (or unsubscribe from) change notifications for tickets where they are listed in CC.
Additional Information and References
â€‹
epydoc
â€‹
API Reference
The precursor of this interface was
IAnnouncementSubscriber
from the
â€‹
th:AnnouncerPlugin
.
DONE
The
IAnnouncementDefaultSubscriber
from the
â€‹
th:AnnouncerPlugin
was also folded into this interface.
Open Questions
Merge
description()
and
requires_authentication()
These methods are both only used in the preferences panel.
Merging them could be easier to understand and more flexible, allowing different requirement checks:
def get_subscription_preference_description(self, req):
        if req.is_authenticated and 'TICKET_ADMIN' in req.perm:
            return ""notify me when an admin is needed""
Remove
class
name
The
class
item could be removed from the tuple returned by
matches()
. It's not really needed and clutters up each plugin with ugly
klass = self.__class__.__name__
lines.
Counter-arguments:
It helps debugging and can be logged.
But if that's needed the
NotificationSystem
should do so, to avoid mistakes and simplify plugins.
The
subscription
DB table requires that anyway.
But it should be replaced there as well, e.g. by a freely chosen
rule
string.
/}

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Collect, Use
Data Types: messages, username, messages, username
Purposes: Functionality, Customization, Security, Functionality, Customization, Security
Stories:
1. we collect messages, username for security. We use messages, username for customization..

This page was a draft. See

TracDev/DatabaseSchema/NotificationSystem
page now.
The
Open questions
section might still contain unimplemented ideas.
Table
notify_subscription
Table
notify_watch
Open Questions
Trac Database Schema: Notification
The
TracNotification
module stores notification event subscriptions in the database.
Table
notify_subscription
Table
Key
notify_subscription
id
Columns
Type
Notes
id
auto_increment
time
int64
changetime
int64
class
The name of the Python class that stored this subscription.
sid
The
session
ID of the subscriber.
authenticated
int
1
for authenticated session IDs,
0
for anonymous session IDs
distributor
Identifies the distributor to used for this subscription (e.g.
email
)
format
Identifies the MIME type to be used for this subscription (e.g.
text/plain
or
text/html
)
priority
int
Precedence level of this subscription. E.g.
1
overrules
2
.
adverb
always
or
never
Indices
sid
,
authenticated
class
Stores if a subscription rule always/never applies for a certain user, at what priority and using what distribution method/format.
Use the
trac.notification.model.Subscription
model class to access this table.
Note that this table does not store an (email) address, but the commonly used subscription tuple has an additional item
addr
. Usually such tuples that correspond to entries in this DB table contain a
addr
of
None
. Other tuples may contain an (email) address (e.g. retrieved from  a ticket CC field) but are missing the
sid
item instead.
See
trac.notification.model.Subscription
​
Table
notify_watch
Table
Key
notify_watch
id
Columns
Type
Notes
id
auto_increment
sid
The session ID of the subscriber.
authenticated
int
1
for authenticated session IDs,
0
for anonymous session IDs
class
The name of the Python class that stored this watch.
realm
The realm of this subscription (e.g.
ticket
).
target
The target of this subscription (e.g. a ticket id).
Indices
sid
,
authenticated
,
class
class
,
realm
,
target
Stores watches to identify the target resource(s) of a subscription (e.g. a watched ticket's id, wiki page filters, joined groups, etc.)
Use the
trac.notification.model.Watch
model class to access this table.
See
trac.notification.model.Watch
​
Open Questions
Rename
class
column?
Something like
rule
might be more appropriate.
See also
INotificationSubscriber
.
Rename
distributor
column?
transport
might be more consistent.
Rename tables?
The current table names are taken from the
​
th:AnnouncerPlugin
.
Would this cause problems for users that already used that plugin?
DONE
Renamed
subscription
to
notify_subscription
.
DONE
Renamed
subscription_attribute
to
notify_watch
.
Remove
time
and
changetime
columns?
These are not really needed.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\TracDev_Docs\DatabaseSchema.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
TracDev_Docs\INotificationDistributor.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
This page was a draft. See
TracDev/PluginDevelopment/ExtensionPoints/trac.notification.api.INotificationSubscriber
page now.
{#s   
The
Open questions
section might still contain unimplemented ideas.
Extension Point :
INotificationSubscriber
Interface
INotificationSubscriber
Since
1.1.3
Module
trac.notification
Source
api.py
â€‹
The
INotificationSubscriber
subscribes users to
notification
events.
Purpose
Trac provides an extendible and flexible notification system. Different people are interested in different kinds of notifications. Notification subscriptions allow administrators and / or users to configure the exact rules used that trigger sending of notifications.
Usage
Implementing the interface follows the standard guidelines found in
TracDev/ComponentArchitecture
and of course
TracDev/PluginDevelopment
.
The main part of this interface is the
match()
function. It returns a list of subscriptions, in the form of tuples consisting of:
class
: The name of the Python class. (This could probably be removed.)
distributor
: Also known as
transport
. E.g. the string
email
. See
INotificationDistributor
.
sid
: The session ID of the subscriber. (Can be
None
if
address
is provided.)
authenticated
:
1
for authenticated session IDs,
0
for anonymous session IDs.
address
: The (email) address to use. (Can be
None
if
sid
is provided.)
format
: The MIME type to be used (e.g.
text/plain
or
text/html
.)
priority
: An integer priority. Smaller numbers have higher priority than bigger numbers.
1
is the highest priority.
adverb
: Either the string
always
or
never
.
Since more than one component can handle the same realms and categories, the priorities and adverbs are used to resolve conflicting subscriptions.
The implementation can use any means to determine if a user is interested in hearing about a given event.
Most check that the appropriate conditions apply and then retrieve the required information from the
subscription
DB table.
The subscriptions in that table are configured in a shared preferences panel that uses two other methods of this interface:
The simple
description()
method returns a description string shown to the user in the preferences panel (or
None
if the plugin does use the
subscriptions
DB table.)
The
requires_authentication()
method allows hiding the rule from unauthenticated users. (E.g. because only authenticated users can be ticket owners.)
The
default_subscriptions()
method describes any  default subscriptions that automatically exist without the user configuring
subscription
DB entries in the preferences.
These are also displayed on the preferences panel, but can not be directly modified there. (They usually can be overriden by non-default subscriptions.)
The plugin still has to return the respective subscriptions from the
matches()
method.
Default descriptions should be used when users can be determined by the event itself.
For instance, ticket author has a default subscription that is controlled via trac.ini.
Default subscriptions should be low priority (i.e. have a priority number much larger than
1
, like 100) so that the user can easily override them.
Examples
The following example implements a simple subscriber that can trigger notifications when a new ticket is created with a high priority level.
from
trac.core
import
*
from
trac.notification.api
import
INotificationSubscriber
from
trac.notification.model
import
Subscription
class
HighPriorityTicketNotificationSubscriber
(
Component
):
implements
(
INotificationSubscriber
)
# INotificationSubscriber methods
def
matches
(
self
,
event
):
if
event
.
realm
!=
'ticket'
:
return
if
event
.
category
!=
'created'
:
return
ticket
=
event
.
target
if
ticket
[
'priority'
]
not
in
(
'blocker'
,
'critical'
,
'major'
):
return
klass
=
self
.
__class__
.
__name__
for
i
in
Subscription
.
find_by_class
(
self
.
env
,
klass
):
yield
i
.
subscription_tuple
()
def
description
(
self
):
return
""notify me when new high priority tickets are created""
def
requires_authentication
(
self
):
return
False
Available Implementations
Several implementations are part of core Trac:
trac.ticket.notification.AllTicketSubscriber
Allows anyone to subscribe to all ticket change notifications.
trac.ticket.notification.TicketOwnerSubscriber
Allows ticket owners to subscribe to (or unsubscribe from) change notifications for owned tickets.
trac.ticket.notification.TicketComponentOwnerSubscriber
Allows component owners to subscribe to (or unsubscribe from) change notifications for tickets assigned to owned component.
trac.ticket.notification.TicketUpdaterSubscriber
Allows anyone to subscribe to (or unsubscribe from) change notifications for their own ticket changes.
trac.ticket.notification.TicketReporterSubscriber
Allows ticket reporters to subscribe to (or unsubscribe from) change notifications for tickets they created.
trac.ticket.notification.CarbonCopySubscriber
Allows anyone to subscribe to (or unsubscribe from) change notifications for tickets where they are listed in CC.
Additional Information and References
â€‹
epydoc
â€‹
API Reference
The precursor of this interface was
IAnnouncementSubscriber
from the
â€‹
th:AnnouncerPlugin
.
DONE
The
IAnnouncementDefaultSubscriber
from the
â€‹
th:AnnouncerPlugin
was also folded into this interface.
Open Questions
Merge
description()
and
requires_authentication()
These methods are both only used in the preferences panel.
Merging them could be easier to understand and more flexible, allowing different requirement checks:
def get_subscription_preference_description(self, req):
        if req.is_authenticated and 'TICKET_ADMIN' in req.perm:
            return ""notify me when an admin is needed""
Remove
class
name
The
class
item could be removed from the tuple returned by
matches()
. It's not really needed and clutters up each plugin with ugly
klass = self.__class__.__name__
lines.
Counter-arguments:
It helps debugging and can be logged.
But if that's needed the
NotificationSystem
should do so, to avoid mistakes and simplify plugins.
The
subscription
DB table requires that anyway.
But it should be replaced there as well, e.g. by a freely chosen
rule
string.
/}

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Collect, Use
Data Types: messages, username, messages, username
Purposes: Functionality, Customization, Security, Functionality, Customization, Security
Stories:
1. we collect messages, username for security. We use messages, username for customization..

This page was a draft. See
TracDev/PluginDevelopment/ExtensionPoints/trac.notification.api.INotificationDistributor
page now.

Extension Point :
INotificationDistributor
Interface
INotificationDistributor
Since
1.1.3
Module
trac.notification
Source
api.py
​
The
INotificationDistributor
sends
notification
events over some distribution channel, like email.
Purpose
Trac provides an extendible and flexible notification system, that historically has sent notifications by email. Notifications could however also be distributed by XMPP, SMS or any other messaging protocol.
Usage
Implementing the interface follows the standard guidelines found in
TracDev/ComponentArchitecture
and of course
TracDev/PluginDevelopment
.
A simple
transports()
method lists the names of the supported transports (protocols / distribution channels). The
distribute()
method distributes a message to one or more recipients. It receives the following parameters:
transport
: The name of the transports that should be used. One of those returned by
transports()
.
recipients
: A list of
(sid, authenticated, address, format)
tuples.
sid
: The Trac session ID of the recipient (or
None
).
authenticated
:
1
if the Trac session ID is authenticated,
0
otherwise.
address
: A protocol specific address to send the notification to. If it is
None
the implementation might still be able to send the message to the recipient using the
sid
/
authenticated
information somehow. (E.g. the
EmailDistributor
falls back to
IEmailAddressResolver
implementations.)
format
: MIME type of the message format to be used.
event
: A
trac.notification.api.NotificationEvent
instance describing the event about which the recipients should be notified.
The
event
is supposed to be formatted into a message in the given
format
using a
INotificationFormatter
.
Examples
The following example distributes notifications by SMS. (The
sms
library does not exist. Several commercial SMS services provide real APIs.)
from
itertools
import
groupby
from
operator
import
itemgetter
from
trac.core
import
*
from
trac.notification.api
import
INotificationDistributor
,
\
INotificationFormatter
import
sms
class
SmsNotificationDistributor
(
Component
):
implements
(
INotificationDistributor
)
formatters
=
ExtensionPoint
(
INotificationFormatter
)
# INotificationDistributor methods
def
transports
(
self
):
return
[
'sms'
]
def
distribute
(
self
,
transport
,
recipients
,
event
):
if
transport
!=
'sms'
:
return
# Group by message format:
for
format
,
group
in
groupby
(
recipients
,
itemgetter
(
3
)):
formatter
=
None
for
f
in
self
.
formatters
:
for
style
in
f
.
styles
(
transport
,
event
.
realm
):
if
style
==
format
:
formatter
=
f
if
formatter
:
message
=
formatter
.
format
(
transport
,
format
,
event
)
for
sid
,
authenticated
,
address
,
format
in
group
:
if
address
:
sms
.
send
(
message
,
address
)
Available Implementations
Only
trac.notification.mail.EmailDistributor
is part of core Trac.
XmppDistributor
will be part of
​
th:AnnouncerPlugin
.
Additional Information and References
​
epydoc
​
API Reference
Related to the
INotificationFormatter
This interface originated in
​
th:AnnouncerPlugin
as
IAnnouncementDistributor
.
DONE
IAnnouncerDistributor
had no
format
in the
recipients
parameter to
distribute()
.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\TracDev_Docs\INotificationDistributor.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
TracDev_Docs\INotificationSubscriber.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
This page was a draft. See
TracDev/PluginDevelopment/ExtensionPoints/trac.notification.api.INotificationDistributor
page now.
{#s   
Extension Point :
INotificationDistributor
Interface
INotificationDistributor
Since
1.1.3
Module
trac.notification
Source
api.py
â€‹
The
INotificationDistributor
sends
notification
events over some distribution channel, like email.
Purpose
Trac provides an extendible and flexible notification system, that historically has sent notifications by email. Notifications could however also be distributed by XMPP, SMS or any other messaging protocol.
Usage
Implementing the interface follows the standard guidelines found in
TracDev/ComponentArchitecture
and of course
TracDev/PluginDevelopment
.
A simple
transports()
method lists the names of the supported transports (protocols / distribution channels). The
distribute()
method distributes a message to one or more recipients. It receives the following parameters:
transport
: The name of the transports that should be used. One of those returned by
transports()
.
recipients
: A list of
(sid, authenticated, address, format)
tuples.
sid
: The Trac session ID of the recipient (or
None
).
authenticated
:
1
if the Trac session ID is authenticated,
0
otherwise.
address
: A protocol specific address to send the notification to. If it is
None
the implementation might still be able to send the message to the recipient using the
sid
/
authenticated
information somehow. (E.g. the
EmailDistributor
falls back to
IEmailAddressResolver
implementations.)
format
: MIME type of the message format to be used.
event
: A
trac.notification.api.NotificationEvent
instance describing the event about which the recipients should be notified.
The
event
is supposed to be formatted into a message in the given
format
using a
INotificationFormatter
.
Examples
The following example distributes notifications by SMS. (The
sms
library does not exist. Several commercial SMS services provide real APIs.)
from
itertools
import
groupby
from
operator
import
itemgetter
from
trac.core
import
*
from
trac.notification.api
import
INotificationDistributor
,
\
INotificationFormatter
import
sms
class
SmsNotificationDistributor
(
Component
):
implements
(
INotificationDistributor
)
formatters
=
ExtensionPoint
(
INotificationFormatter
)
# INotificationDistributor methods
def
transports
(
self
):
return
[
'sms'
]
def
distribute
(
self
,
transport
,
recipients
,
event
):
if
transport
!=
'sms'
:
return
# Group by message format:
for
format
,
group
in
groupby
(
recipients
,
itemgetter
(
3
)):
formatter
=
None
for
f
in
self
.
formatters
:
for
style
in
f
.
styles
(
transport
,
event
.
realm
):
if
style
==
format
:
formatter
=
f
if
formatter
:
message
=
formatter
.
format
(
transport
,
format
,
event
)
for
sid
,
authenticated
,
address
,
format
in
group
:
if
address
:
sms
.
send
(
message
,
address
)
Available Implementations
Only
trac.notification.mail.EmailDistributor
is part of core Trac.
XmppDistributor
will be part of
â€‹
th:AnnouncerPlugin
.
Additional Information and References
â€‹
epydoc
â€‹
API Reference
Related to the
INotificationFormatter
This interface originated in
â€‹
th:AnnouncerPlugin
as
IAnnouncementDistributor
.
DONE
IAnnouncerDistributor
had no
format
in the
recipients
parameter to
distribute()
.
/}

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Collect, Use, Collect, Use
Data Types: Email Address, username, app interactions, session IDs
Purposes: Functionality, Security, Functionality, Authentication
Stories:
1. We collect session IDs for authentication.

This page was a draft. See
TracDev/PluginDevelopment/ExtensionPoints/trac.notification.api.INotificationSubscriber
page now.

The
Open questions
section might still contain unimplemented ideas.
Extension Point :
INotificationSubscriber
Interface
INotificationSubscriber
Since
1.1.3
Module
trac.notification
Source
api.py
​
The
INotificationSubscriber
subscribes users to
notification
events.
Purpose
Trac provides an extendible and flexible notification system. Different people are interested in different kinds of notifications. Notification subscriptions allow administrators and / or users to configure the exact rules used that trigger sending of notifications.
Usage
Implementing the interface follows the standard guidelines found in
TracDev/ComponentArchitecture
and of course
TracDev/PluginDevelopment
.
The main part of this interface is the
match()
function. It returns a list of subscriptions, in the form of tuples consisting of:
class
: The name of the Python class. (This could probably be removed.)
distributor
: Also known as
transport
. E.g. the string
email
. See
INotificationDistributor
.
sid
: The session ID of the subscriber. (Can be
None
if
address
is provided.)
authenticated
:
1
for authenticated session IDs,
0
for anonymous session IDs.
address
: The (email) address to use. (Can be
None
if
sid
is provided.)
format
: The MIME type to be used (e.g.
text/plain
or
text/html
.)
priority
: An integer priority. Smaller numbers have higher priority than bigger numbers.
1
is the highest priority.
adverb
: Either the string
always
or
never
.
Since more than one component can handle the same realms and categories, the priorities and adverbs are used to resolve conflicting subscriptions.
The implementation can use any means to determine if a user is interested in hearing about a given event.
Most check that the appropriate conditions apply and then retrieve the required information from the
subscription
DB table.
The subscriptions in that table are configured in a shared preferences panel that uses two other methods of this interface:
The simple
description()
method returns a description string shown to the user in the preferences panel (or
None
if the plugin does use the
subscriptions
DB table.)
The
requires_authentication()
method allows hiding the rule from unauthenticated users. (E.g. because only authenticated users can be ticket owners.)
The
default_subscriptions()
method describes any  default subscriptions that automatically exist without the user configuring
subscription
DB entries in the preferences.
These are also displayed on the preferences panel, but can not be directly modified there. (They usually can be overriden by non-default subscriptions.)
The plugin still has to return the respective subscriptions from the
matches()
method.
Default descriptions should be used when users can be determined by the event itself.
For instance, ticket author has a default subscription that is controlled via trac.ini.
Default subscriptions should be low priority (i.e. have a priority number much larger than
1
, like 100) so that the user can easily override them.
Examples
The following example implements a simple subscriber that can trigger notifications when a new ticket is created with a high priority level.
from
trac.core
import
*
from
trac.notification.api
import
INotificationSubscriber
from
trac.notification.model
import
Subscription
class
HighPriorityTicketNotificationSubscriber
(
Component
):
implements
(
INotificationSubscriber
)
# INotificationSubscriber methods
def
matches
(
self
,
event
):
if
event
.
realm
!=
'ticket'
:
return
if
event
.
category
!=
'created'
:
return
ticket
=
event
.
target
if
ticket
[
'priority'
]
not
in
(
'blocker'
,
'critical'
,
'major'
):
return
klass
=
self
.
__class__
.
__name__
for
i
in
Subscription
.
find_by_class
(
self
.
env
,
klass
):
yield
i
.
subscription_tuple
()
def
description
(
self
):
return
""notify me when new high priority tickets are created""
def
requires_authentication
(
self
):
return
False
Available Implementations
Several implementations are part of core Trac:
trac.ticket.notification.AllTicketSubscriber
Allows anyone to subscribe to all ticket change notifications.
trac.ticket.notification.TicketOwnerSubscriber
Allows ticket owners to subscribe to (or unsubscribe from) change notifications for owned tickets.
trac.ticket.notification.TicketComponentOwnerSubscriber
Allows component owners to subscribe to (or unsubscribe from) change notifications for tickets assigned to owned component.
trac.ticket.notification.TicketUpdaterSubscriber
Allows anyone to subscribe to (or unsubscribe from) change notifications for their own ticket changes.
trac.ticket.notification.TicketReporterSubscriber
Allows ticket reporters to subscribe to (or unsubscribe from) change notifications for tickets they created.
trac.ticket.notification.CarbonCopySubscriber
Allows anyone to subscribe to (or unsubscribe from) change notifications for tickets where they are listed in CC.
Additional Information and References
​
epydoc
​
API Reference
The precursor of this interface was
IAnnouncementSubscriber
from the
​
th:AnnouncerPlugin
.
DONE
The
IAnnouncementDefaultSubscriber
from the
​
th:AnnouncerPlugin
was also folded into this interface.
Open Questions
Merge
description()
and
requires_authentication()
These methods are both only used in the preferences panel.
Merging them could be easier to understand and more flexible, allowing different requirement checks:
def get_subscription_preference_description(self, req):
        if req.is_authenticated and 'TICKET_ADMIN' in req.perm:
            return ""notify me when an admin is needed""
Remove
class
name
The
class
item could be removed from the tuple returned by
matches()
. It's not really needed and clutters up each plugin with ugly
klass = self.__class__.__name__
lines.
Counter-arguments:
It helps debugging and can be logged.
But if that's needed the
NotificationSystem
should do so, to avoid mistakes and simplify plugins.
The
subscription
DB table requires that anyway.
But it should be replaced there as well, e.g. by a freely chosen
rule
string.


Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\TracDev_Docs\INotificationSubscriber.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
Zulip\file.txt,"You are a privacy expert annotator tasked with annotating text files with metadata about privacy behaviors and stories. For the given text, annotate the following:

1. Actions: Actions performed or expected in the text.
2. Data Types: Types of data referenced in the text. Data types may include specific subcategories.
3. Purposes: Intentions or purposes related to the actions and data types.
4. Stories: Concise stories that describe how actions, data types, and purposes interact in context.

After providing your annotations, explain your rationale for these annotations. Place <R> tag between your annotations and your rationale.

Use only the categories listed below when annotating:

Actions:
sub, Collect, Process, Share

Data Types:
sub:
  anonymize:
  aggregate:
Patterns:
  Minimal-Information-Asymmetry, Awareness Feed, User data confinement pattern
Synonyms:
  Personally Identifiable Information, PII, Personal Information, Your Data, Your Information
Contact Data:
  Phone Number:
    Synonyms:
      mobile number
  Email address:
  User ID:
  Login Information:
  Job Title:
  Contact List:
  Company Name:
  Address:
    Synonyms:
      postal addess, mailing address, shipping address
  Name:
    First Name:
    Last Name:
  Date of Birth:
    Synonyms:
      birthday
  Image (Photos, Pictures, Video):
    Synonyms:
      photo, picture, video
  Government ID:
    Synonyms:
      National identification number
    Driver's License:
    Passport:
    Social Security Number:
    Tax ID Number:
    License Plate Number:
  Biographical Data:
    CV:
      Synonyms:
        Curriculum Vitae
    Education:
    Employment:
Health Data:
  Synonyms:
    medical information
  Physical activity:
Social Media:
Location:
  Patterns:
    Location Granularity
  Approximate location:
  Precise location:
  GPS:
  Localisation:
  Address:
Financial:
  Synonyms:
    economic, spending, commercial information
  Orders:
  Payment Card:
  Payment History:
  Purchase History:
    Synonyms:
      order history
  Carts:
  Order:
  Card Data:
  Bank Account:
  Credit Score:
  Income Information:
  assets:
    vehicle:
    Insurance:
Usage Data:
  App Interactions:
    Patterns:
      Use-of-dummies
    Pages Visited:
      Synonyms:
        app activity
    Timestamps:
    Interaction with Ads:
    Content Viewing Order:
    User Engagement:
    Content Moderation:
    Clicks:
    Transportation Data:
  Device Information:
    Synonyms:
      Log Data, App data
    IP Address:
    Identifier:
      Synonyms:
        User IDs
      Device ID:
        Synonyms:
          device identifier
      Advertisement ID:
        Synonyms:
          Advertisement identifier, ad identifiers
      Browser:
      Operating System:
        Synonyms:
          OS
      Device Settings:
      Make:
      Model:
      Network Information (Mobile Network):
      Wi-Fi Access:
      Diagnostics:
      Sensor Data:
      Audio:
      Browsing history:
Tracking:
  Cookies:
    Patterns:
      Protection-against-tracking
  Web Beacons/Pixels:
  Tags:
Account Information:
  Patterns:
    Whoâ€™s Listening, Unusual-activities
  Synonyms:
    account credentials
  User id:
  Username:
  Password:
    Patterns:
      Informed Secure Passwords
  Files:
  Account Balance:
  Messages:
  Friends:

Purposes:
Contact, Analytics, Customization, Advertisement, Security, Tracking, Functionality, Accounts, Requirements, Save, Identification

Here is the text:

Full Cleaned Text:
Direct Messaging with LibreEHR and EMR Direct phiMail(R)
Version 1.3, 19 Jul 2014

A. Purpose: To provide a secure method from within LibreEHR for sending/receiving 
protected health information to/from another Direct address using the Direct Project 
messaging standard, as a step toward the goal of satisfying the three MU2 criteria 
requiring the use of Direct messaging.  (For general information about Direct messaging, 
see http://www.emrdirect.com/about-directed-exchange-and-secure-direct-messaging.html)

B. IMPORTANT:  Please be aware of the following limitations when using the LibreEHR 
Direct Messaging features with PHI in a production environment:

1. the current code only supports a single shared ""group"" Direct Address for each LibreEHR 
installation. Note that this model is fully compliant with the Direct Project 
requirements for Direct messaging, but we may add additional models in the future 
should we determine that doing so would provide a higher degree of interoperability for 
LibreEHR users.

2. the current code only sends the CCR or CCD XML data that is already available in LibreEHR; 
these files as currently generated by existing LibreEHR code do not meet the requirements 
of the MU2 criteria, and the current CCD files do not pass strict CDA validation tests.

C. Problems Solved:

1. Patient-initiated transmission of clinical data from the Report section of the Patient 
Portal interface.

2. Provider-initiated transmission of clinical data from the Report section of the Patient 
pane in the main LibreEHR interface.

3. Log all data transmissions including date/time, patient, and whether transmission 
was initiated by the patient through the Patient Portal or by an LibreEHR user through the 
main interface.

4. Receive Direct messages from other sources.

D. How it Works:
Once configured, LibreEHR will interface with a phiMail Direct messaging server to complete the
required message transactions. The phiMail platform is described on the EMR Direct website, 
http://www.emrdirect.com and http://www.emrdirect.com/phimail-faq.html.

E. What you need before enabling Direct Messaging in LibreEHR:

1. Test Mode: Developers may request a complimentary test address at 
https://www.emrdirect.com/subscribe-developer  
Access to a sandbox server is available for testing and development purposes.

2. Production Mode: Healthcare provider users should begin by signing up for a production 
Direct messaging account with EMR Direct by registering at https://www.emrdirect.com/subscribe

Subscribers will receive the username, password, and server address information with which to 
configure LibreEHR.  

F. How to enable the Direct Messaging Features in LibreEHR:
Setup of phiMail Direct messaging Service is done in the Administration::Globals::Connectors 
tab

1. Check the ""Enable phiMail Direct Messaging Service"" checkbox.

2. Enter the Server Address, Username, and Password provided to you. The server address
will be of the form ""ssl://servername.example.com:32541"" - replace the hostname and port
with the values provided to you by EMR Direct. The Username is your Direct Address. Do not 
enter the server URL into your browser address bar, as this will not work.

3. Specify the LibreEHR user who will receive notification of new incoming Direct messages. 
Enter their LibreEHR username in the notification user field.

4. Specify the interval for automatic message checking; we suggest 5 or 10 minutes as a
starting point, but installations processing a large number of Direct messages may want a 
shorter interval. To disable automatic message checking through LibreEHR's background service
manager, set the interval to 0 (zero). Disabling automatic checking would be appropriate 
if message checking is managed through another mechanism, such as a system cron job.

5. Optionally check ""phiMail Allow CCD Send"" and/or ""phiMail Allow CCR Send"" to enable
the Transmit feature for these data types. If you do not select at least one of these,
LibreEHR will operate in a receive-only mode.

6. Click the ""Save"" button.

7. Confirm that a valid Notification Email Address is set in the Administration::
Globals::Notifications tab to receive error notifications from the Direct Messaging service.

8. Install the EMR Direct trust anchor certificate.  

Note: This is *not* your Direct certificate; it is the trust anchor for the SSL 
certificate issued to our servers, and is used only to validate the SSL certificate 
presented by the phiMail server on the other side of LibreEHR's connection.  Your Direct private
key and certificate are managed by the phiMail Server and are not installed in LibreEHR.
Your Direct certificate is made availabe for your review by EMR Direct, but you will not
need to install it anywhere.

For added security, the trust anchor for the phiMail Server should be installed in the LibreEHR 
installation tree at:

[installation_root]/sites/[site_id]/documents/phimail_server_pem/phimail_server.pem

This phimail_server_pem directory and its contents should be readable by the the 
webserver process, but only writable by trusted local users. The certificate file 
itself must be PEM encoded. You can identify a PEM encoded certificate file because 
it begins with the text ""-----BEGIN CERTIFICATE-----"". Although LibreEHR will connect 
to phiMail servers without installing this certificate, this is a required configuration 
step for all production  accounts to ensure that you are connecting to the correct 
server. You can obtain the correct certificate at the following URLs:

  a. Test accounts: http://certs.emrdirect.com/EMRDirectTestCA.crt
     Important: Don't forget to rename the file to phimail_server.pem and install it
     in the correct directory.

  b. Production accounts: https://www.phicert.com/certs/phiCertDirectRootCA.crt
     Important: The production root must be converted to PEM format as follows:
     $ openssl x509 -in phiCertDirectRootCA.crt -inform DER -out phimail_server.pem
     Don't forget to install phimail_server.pem in the correct directory. As an added
     security measure, please call us to confirm the thumbprint on this certificate.

G. Debugging background connections to the server.

You may review the connection activity to the server by Selecting Administration::Other::Logs,
selecting ""direct-message"" in the ""Name of events:"" drop-down menu, and clicking ""[Refresh]"".
If the background service is succesfully connecting, you will see ""message check completed""
events in the log as well as any message related entries (see below for instructions to
view more detailed message related status information). If you see no entries, make sure that
the background service is enabled (See F.4 above). If you see ""could not connect to server""
entries, each entry will also contain an error code:

  C1: phiMail is disabled in the global configuration. Fix: enable.
  C2: the phiMail server URL entered in the global configuration is invalid. Fix: Confirm
      the URL has been entered correctly. It should be of the form 
      ""ssl://server.example.com:32541"".
  C3: unable to create stream context. Fix: Usually this is because the server certificate 
      file installed in F.8 above is not the correct certificate or is in the wrong format.
  C4: failed to open connection. Fix: Confirm you Internet service and local DNS servers are
      online and your firewall is not blocking connections to the phiMail Server.

H. Checking the status and history of the Direct Messaging Service in LibreEHR:
Administrators may view the status of the service by Selecting Reports::Services::Background 
Services from the main LibreEHR left navigation bar. The ""View Log"" link on this page or 
Reports::Services::Direct Message Log will open the messaging history log showing each message 
sent or received and the current status of that message (Received, Sent, Delivery Confirmed, 
or Failed).

I. Note of message status messages: Receiving message status updates requires that Direct message
checking be enabled. When receiving messages, the phiMail back-end is fully compliant with the 
Direct messaging protocols to notify the sender and provide final delivery confirmation, but 
please note that  many other Direct providers do not yet support these features. If a message 
is sent to a recipient using one of these other systems, LibreEHR probably won't ever receive a 
final delivery confirmation for that message.

J. How to use the Direct Messaging Features in LibreEHR:

1. Sending:
When the phiMail Direct Messaging service is enabled, an additional ""Transmit"" button will
appear in the Continuity of Care Record (CCR) and/or Continuity of Care Document (CCD) block 
of the Reports section in both the Patient Portal and the Patient pane of the main provider 
interface. 

To transmit a CCR or CCD, first click the ""Transmit"" button. This will open a small dialog 
immediately below the button with a form field to enter the intended recipient's Direct Address. 
Clicking ""Transmit"" again will hide the dialog.

A Direct Address should have the same form as a regular email address, e.g. 
jonesclinic@direct.example.com. Enter the address in the field and click the ""Send"" button 
immediately to the right of the field. Only a single recipient may be specified in the field.
The Send button will be temporarily disabled while LibreEHR is communicating with the phiMail 
server. This will only work for properly-configured Direct addresses. Attempts to send to a 
regular email address or Direct address outside of our test mode ""trust sandbox"" will fail
during testing. Production accounts have wide interoperability with other Direct service
providers. Should you encounter a trust community with which LibreEHR does not interoperate,
please let us know at support@emrdirect.com.

LibreEHR will then display a status message immediately below the Address field, the 
success or failure of the message transmission, or an error message. If the message is
successfully submitted to the server, the Address field will be cleared to prevent accidental
re-transmission. If multiple recipients are required, the next recipient can now be entered.

If you receive an error message, it will be followed by an error code. For a discussion
of error codes beginning with the letter ""C"" please see section G above. Error codes
beginning with ""EC"" are listed here:

  EC 1: phiMail disabled in global configuration. Fix: enable.
  EC 4: authentication failure. Fix: The Username and Password entered in the
        global configuration must be corrected.
  EC 5: request to add text failed. Fix: Confirm total message length < 5MB.
  EC 6: problem sending the text. Fix: Confirm your local network connectivity is stable.
  EC 7: request to add clinical document failed. Fix: see EC 5.
  EC 8: problem sending the clinical document. Fix: see EC 6.

2. Receiving:
When the phiMail Direct Messaging service is enabled, and message checking is enabled either 
through the background services manager of another mechanism, LibreEHR will automatically process 
message status updates and new messages. Status updates will be reflected immediately in the 
Direct Messaging log. Additionally, if a ""Failed"" notification is received for a previously sent 
message, a regular email message will be generated to the Notification Email Address specified 
in the Notifications tab of the Global Settings panel (accessed by selecting Administration::
Globals from the main left navigation menu).

New Direct messages will be processed as follows. A new ""Patient Note"" will be generated and 
sent to the phiMail notification user specified in the Connectors tab of the Global settings. 
The patient note will contain information about the message, including any text at the beginning 
of the message from the sender. Any attachments (and any non-text content) will be automatically 
converted to separate LibreEHR Documents, which will be referenced in the new Patient Note.  
The Documents and the Patient Note are initially created without an assigned patient. 

At this time, the envisioned workflow is that the notification user will review the message text
and any included Documents to determine which patient the content belongs to and will then set the 
patient using the existing Patient Note interface for choosing a patient. Once the patient is sent, 
the Patient Note can be forwarded to another provider or staff member as appropriate using the 
existing forwarding mechanism for Patient Notes. The unassigned Documents can be viewed by Selecting 
Miscellaneous::New Documents from the main left navigation menu, which opens a Documents list. Once 
the specified document is opened, the user can optionally categorize the document and, when 
appropriate, assign the document to a specific patient using the ""Move to Patient #"" feature in the 
Documents interface.


Trademark Notice: phiMail is a registered trademark of EMR Direct.

Copyright (c) 2013-2014 EMR Direct.

Here are the behaviors and the privacy requirements in the form of privacy stories we build from them:
Privacy stories are built explicitly from our labelled privacy behaviors in the format of we (action) (data type) for (purpose)Actions: Share, Collect, Process
Data Types: Health data, address, usage data
Purposes: compliance, Functionality, security
Stories:
1. We share health data and address for compliance. We share health data and address for Functionality. We collect health data and address for complaince. We collect health data and address for functionality. We process health data, address and usage data for compliance. We process health data, address and usage data for functionality. We process health data, address and usage data for security..

Email and password
Zulip's default EmailAuthBackend authenticates users by verifying control over their email address, and then allowing them to set a password for their account. There are two development environment details worth understanding:

All of our authentication flows in the development environment have special links to the /emails page (advertised in /devtools), which shows all emails that the Zulip server has ""sent"" (emails are not actually sent by the development environment), to make it convenient to click through the UI of signup, password reset, etc.
There's a management command, manage.py print_initial_password username@example.com, that prints out default passwords for the development environment users. Note that if you change a user's password in the development environment, those passwords will no longer work. It also prints out the user's current API key.

Security and privacy
Use of the push notification bouncer is subject to the Zulip Cloud Terms of Service, Privacy Policy and Rules of Use. By using push notifications, you agree to these terms.

We've designed this push notification bouncer service with security and privacy in mind:

A central design goal of the Push Notification Service is to avoid any message content being stored or logged by the service, even in error cases.

The Push Notification Service only stores the necessary metadata for delivering the notifications to the appropriate devices and otherwise operating the service:

The APNS/FCM tokens needed to securely send mobile push notifications to iOS and Android devices, one per device registered to be notified by your Zulip server.
User ID numbers generated by your Zulip server, needed to route a given notification to the appropriate set of mobile devices. These user ID numbers are opaque to the Push Notification Service and Kandra Labs.
Basic organization metadata, optional usage statistics, and aggregate statistics about how many push notifications are sent by each customer.
The Push Notification Service receives (but does not store) the contents of individual mobile push notifications:

The numeric message ID generated by your Zulip server.
Metadata on the message's sender (name and avatar URL).
Metadata on the message's recipient (channel name + ID, topic, direct message recipients, etc.).
A timestamp.
The message's content.
There's a PUSH_NOTIFICATION_REDACT_CONTENT setting available to disable any message content being sent via the push notification bouncer (i.e., message content will be replaced with New message). Note that this setting makes push notifications significantly less usable.

We plan to replace that setting with end-to-end encryption which would eliminate that usability tradeoff and additionally allow us to not have any access to the other details mentioned in this section.

All of the network requests (both from Zulip servers to the Push Notification Service and from the Push Notification Service to the relevant Google and Apple services) are encrypted over the wire with SSL/TLS.

The code for the push notification forwarding service is 100% open source and available as part of the Zulip server project on GitHub (specifically, here).

The push notification forwarding servers are professionally managed by a small team of security-sensitive engineers.

If you have any questions about the security model, contact Zulip support.

Uploading basic metadata
All Zulip installations running Zulip 8.0 or greater that are registered for the Mobile Push Notification Service regularly upload to the service basic metadata about the organizations hosted by the installation. (Older Zulip servers upload these metadata only if uploading usage statistics is enabled).

Uploaded metadata consists of, for each organization hosted by the installation:

A subset of the basic metadata returned by the unauthenticated GET /server_settings API endpoint.

The purpose of that API endpoint is to serve the minimal data needed by the Zulip mobile apps in order to:

Verify that a given URL is indeed a valid Zulip server URL
Present a correct login form, offering only the supported features and authentication methods for that organization and Zulip server version.
Most of the metadata it returns is necessarily displayed to anyone with network access to the Zulip server on the login and signup pages for your Zulip organization as well.

(Some fields returned by this endpoint, like the organization icon and description, are not included in uploaded metadata.)

The organization type and creation date.

The number of user accounts with each role.

Our use of uploaded metadata is governed by the same Terms of Service and Privacy Policy that covers the Mobile Push Notification Service itself.

Uploading usage statistics
By default, Zulip installations that register for the Mobile Push Notification Service upload the following usage statistics. You can disable these uploads any time by setting ZULIP_SERVICE_SUBMIT_USAGE_STATISTICS=False in /etc/zulip/settings.py.

Totals for messages sent and read with subtotals for various combinations of clients and integrations.
Totals for active users under a few definitions (1day, 7day, 15day) and related statistics.
Some of the graphs on your server's usage statistics page can be generated from these statistics.

When enabled, usage statistics are submitted via an hourly cron job. If you'd like to access plan management immediately after enabling SUBMIT_USAGE_STATISTICS=True (the legacy form of this setting) on a pre-8.0 Zulip server, you can run the analytics job manually via:

/home/zulip/deployments/current/manage.py update_analytics_counts
Our use of uploaded usage statistics is governed by the same Terms of Service and Privacy Policy that covers the Mobile Push Notification Service itself.

Rate limits
The Mobile Push Notification Service API has a very high default rate limit of 1000 requests per minute. A Zulip server makes requests to this API every time it sends a push notification, which is fairly frequent, but we believe it to be unlikely that a self-hosted installation will hit this limit.

This limit is primarily intended to protect the service against DoS attacks (intentional or otherwise). If you hit this limit or you anticipate that your server will require sending more push notifications than the limit permits, please contact support.

Updating your server's registration
Your server's registration includes the server's hostname and contact email address (from EXTERNAL_HOST and ZULIP_ADMINISTRATOR in /etc/zulip/settings.py, aka the --hostname and --email options in the installer). You can update your server's registration data by running manage.py register_server again.

If you'd like to rotate your server's API key for this service (zulip_org_key), you need to use manage.py register_server --rotate-key option; it will automatically generate a new zulip_org_key and store that new key in /etc/zulip/zulip-secrets.conf.

Deactivating your server's registration
If you are deleting your Zulip server or otherwise no longer want to use the Mobile Push Notification Service, you can deactivate your server's registration.

Cancel any paid plans associated with your server.

Run the deregistration command. If you installed Zulip directly on the server (without Docker), run as root:

su zulip -c '/home/zulip/deployments/current/manage.py register_server --deactivate'
Or if you're using Docker, run:

docker exec -it -u zulip <container_name> /home/zulip/deployments/current/manage.py register_server --deactivate
Comment out the ZULIP_SERVICE_PUSH_NOTIFICATIONS = True line in your /etc/zulip/settings.py file (i.e., add #  at the start of the line), and restart your Zulip server.

If you ever need to reactivate your server's registration, contact Zulip support.

Pausing use of the Mobile Push Notification Service
You can temporarily stop using the Mobile Push Notification Service. Comment out the PUSH_NOTIFICATION_BOUNCER_URL = 'https://push.zulipchat.com' line in your /etc/zulip/settings.py file (i.e., add #  at the start of the line), and restart your Zulip server. This approach makes it easy to start using the service again by uncommenting the same line.

Sending push notifications directly from your server
This section documents an alternative way to send push notifications that does not involve using the Mobile Push Notification Service at the cost of needing to compile and distribute modified versions of the Zulip mobile apps.

We don't recommend this path -- patching and shipping a production mobile app can take dozens of hours to set up even for an experienced developer, and even more time to maintain. And it doesn't provide material privacy benefits -- your organization's push notification data would still go through Apple/Google's servers, just not Kandra Labs'. But in the interest of transparency, we document in this section roughly what's involved in doing so.

As discussed above, it is impossible for a single app in the Google or Apple store to receive push notifications from multiple, mutually untrusted, servers. The Mobile Push Notification Service is one of the possible solutions to this problem.

The other possible solution is for an individual Zulip server's administrators to build and distribute their own copy of the Zulip mobile apps, hardcoding a key that they possess. This solution is possible with Zulip, but it requires the server administrators to publish their own copies of the Zulip mobile apps. There's nothing the Zulip team can do to eliminate this onerous requirement.

The main work is thus distributing your own copies of the Zulip mobile apps configured to use APNS/FCM keys that you generate. This is not for the faint of heart! If you haven't done this before, be warned that one can easily spend hundreds of dollars (on things like a DUNS number registration) and a week struggling through the hoops Apple requires to build and distribute an app through the Apple app store, even if you're making no code modifications to an app already present in the store (as would be the case here). The Zulip mobile app also gets frequent updates that you will have to either forgo or republish to the app stores yourself.

If you've done that work, the Zulip server configuration for sending push notifications through the new app is quite straightforward:

Create an FCM push notifications key in the Google Developer console and set android_gcm_api_key in /etc/zulip/zulip-secrets.conf to that key.

In Apple's developer console, register a token or certificate for sending push notifications. Then in /etc/zulip/settings.py, set APNS_SANDBOX=False, and:

If using APNs certificate-based authentication, set APNS_CERT_FILE to the path of your APNs certificate file.

If using APNs token-based authentication, set APNS_TOKEN_KEY_FILE to the path of your APNs token key file, APNS_TOKEN_KEY_ID to the corresponding 10-character key ID, and APNS_TEAM_ID to your 10-character Apple team ID.

Restart the Zulip server.



Annotate the text with actions, data types, purposes, and stories as demonstrated, using only the categories from the list provided. For each annotation, provide your rationale and place <R> tag between your annotations and rationales.
",openai:gpt-4o-mini,input\Zulip\file.txt,{},"""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types: \n- Email address\n- Username\n- Password\n- Financial data\n- Account Balance\n\nPurposes: \n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email address, Username, and Password for account management. We use Email address, Username, and Password for authentication.\n2. We process Financial data and Account Balance for budgeting functionality. We share Account Balance for tracking purposes.\n\n<R>\n**Rationale:**\n1. **Actions:** The text describes steps users can take, such as creating accounts and managing them, thus the actions include \""Collect\"" (e.g., gathering user data during registration), \""Process\"" (e.g., managing accounts and transactions), \""Share\"" (e.g., sharing account balances for tracking), and \""Delete\"" (e.g., deleting accounts).\n  \n2. **Data Types:** The text explicitly references types of data such as \""Email address,\"" \""Username,\"" and \""Password\"" during the registration process. Additionally, \""Financial data\"" and \""Account Balance\"" are referenced when discussing account management and budgeting. \n\n3. **Purposes:** The purpose of collecting user data is primarily for \""Accounts\"" (to manage and authenticate accounts) and \""Functionality\"" (to allow users to effectively budget and track their finances). The mention of tracking account balances aligns with the purpose of \""Tracking.\""\n\n4. **Stories:** The stories succinctly encapsulate the interactions of actions, data types, and purposes described in the text, highlighting how user information is used for account management and how financial data is utilized for budgeting purposes.""","""**Annotations:**\n\nActions: \n- Collect\n- Process\n- Share\n- Delete\n\nData Types:\n- Email address\n- User ID\n- Password\n- Transaction Data\n- Account Balance\n\nPurposes:\n- Accounts\n- Functionality\n- Tracking\n\nStories:\n1. We collect Email Address, User ID, and Password for account management. We use Email Address, User ID, and Password for functionality.\n2. We collect Transaction Data and Account Balance for tracking purposes. We process Transaction Data and Account Balance to provide users with insights into their financial status.\n\n<R>\n**Rationale:**\n\n1. **Actions**: The actions identified include \""Collect\"" (referring to gathering user credentials), \""Process\"" (handling transaction data for budgeting), \""Share\"" (implied when discussing interactions with other accounts or services), and \""Delete\"" (referring to the deletion of accounts). Each action relates to user interactions and the system's operation.\n\n2. **Data Types**: The data types include \""Email address\"", \""User ID\"", and \""Password\"" as they are essential for creating and managing user accounts. \""Transaction Data\"" and \""Account Balance\"" are also included because they are referenced in the context of managing finances and budgets.\n\n3. **Purposes**: The purposes identified include \""Accounts\"" (for managing user accounts), \""Functionality\"" (for ensuring the platform works effectively), and \""Tracking\"" (for monitoring financial transactions and balances).\n\n4. **Stories**: The stories concisely summarize how the actions, data types, and purposes interact. The first story highlights the collection of user credentials necessary for account management and functionality. The second story emphasizes the collection and processing of financial data for tracking, which is crucial for users to manage their finances effectively. Each story captures the essential relationship between the actions taken, the data involved, and the intended outcomes in the context of the application described.""",
